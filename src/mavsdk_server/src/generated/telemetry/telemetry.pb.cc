// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: telemetry/telemetry.proto

#include "telemetry/telemetry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mavsdk {
namespace rpc {
namespace telemetry {
constexpr SubscribePositionRequest::SubscribePositionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribePositionRequestDefaultTypeInternal {
  constexpr SubscribePositionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribePositionRequestDefaultTypeInternal() {}
  union {
    SubscribePositionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribePositionRequestDefaultTypeInternal _SubscribePositionRequest_default_instance_;
constexpr PositionResponse::PositionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr){}
struct PositionResponseDefaultTypeInternal {
  constexpr PositionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PositionResponseDefaultTypeInternal() {}
  union {
    PositionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PositionResponseDefaultTypeInternal _PositionResponse_default_instance_;
constexpr SubscribeHomeRequest::SubscribeHomeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeHomeRequestDefaultTypeInternal {
  constexpr SubscribeHomeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeHomeRequestDefaultTypeInternal() {}
  union {
    SubscribeHomeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeHomeRequestDefaultTypeInternal _SubscribeHomeRequest_default_instance_;
constexpr HomeResponse::HomeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : home_(nullptr){}
struct HomeResponseDefaultTypeInternal {
  constexpr HomeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HomeResponseDefaultTypeInternal() {}
  union {
    HomeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HomeResponseDefaultTypeInternal _HomeResponse_default_instance_;
constexpr SubscribeInAirRequest::SubscribeInAirRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeInAirRequestDefaultTypeInternal {
  constexpr SubscribeInAirRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeInAirRequestDefaultTypeInternal() {}
  union {
    SubscribeInAirRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeInAirRequestDefaultTypeInternal _SubscribeInAirRequest_default_instance_;
constexpr InAirResponse::InAirResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_in_air_(false){}
struct InAirResponseDefaultTypeInternal {
  constexpr InAirResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InAirResponseDefaultTypeInternal() {}
  union {
    InAirResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InAirResponseDefaultTypeInternal _InAirResponse_default_instance_;
constexpr SubscribeLandedStateRequest::SubscribeLandedStateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeLandedStateRequestDefaultTypeInternal {
  constexpr SubscribeLandedStateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeLandedStateRequestDefaultTypeInternal() {}
  union {
    SubscribeLandedStateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeLandedStateRequestDefaultTypeInternal _SubscribeLandedStateRequest_default_instance_;
constexpr LandedStateResponse::LandedStateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : landed_state_(0)
{}
struct LandedStateResponseDefaultTypeInternal {
  constexpr LandedStateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LandedStateResponseDefaultTypeInternal() {}
  union {
    LandedStateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LandedStateResponseDefaultTypeInternal _LandedStateResponse_default_instance_;
constexpr SubscribeArmedRequest::SubscribeArmedRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeArmedRequestDefaultTypeInternal {
  constexpr SubscribeArmedRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeArmedRequestDefaultTypeInternal() {}
  union {
    SubscribeArmedRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeArmedRequestDefaultTypeInternal _SubscribeArmedRequest_default_instance_;
constexpr ArmedResponse::ArmedResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_armed_(false){}
struct ArmedResponseDefaultTypeInternal {
  constexpr ArmedResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ArmedResponseDefaultTypeInternal() {}
  union {
    ArmedResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ArmedResponseDefaultTypeInternal _ArmedResponse_default_instance_;
constexpr SubscribeAttitudeQuaternionRequest::SubscribeAttitudeQuaternionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeAttitudeQuaternionRequestDefaultTypeInternal {
  constexpr SubscribeAttitudeQuaternionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeAttitudeQuaternionRequestDefaultTypeInternal() {}
  union {
    SubscribeAttitudeQuaternionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeAttitudeQuaternionRequestDefaultTypeInternal _SubscribeAttitudeQuaternionRequest_default_instance_;
constexpr AttitudeQuaternionResponse::AttitudeQuaternionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attitude_quaternion_(nullptr){}
struct AttitudeQuaternionResponseDefaultTypeInternal {
  constexpr AttitudeQuaternionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AttitudeQuaternionResponseDefaultTypeInternal() {}
  union {
    AttitudeQuaternionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AttitudeQuaternionResponseDefaultTypeInternal _AttitudeQuaternionResponse_default_instance_;
constexpr SubscribeAttitudeEulerRequest::SubscribeAttitudeEulerRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeAttitudeEulerRequestDefaultTypeInternal {
  constexpr SubscribeAttitudeEulerRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeAttitudeEulerRequestDefaultTypeInternal() {}
  union {
    SubscribeAttitudeEulerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeAttitudeEulerRequestDefaultTypeInternal _SubscribeAttitudeEulerRequest_default_instance_;
constexpr AttitudeEulerResponse::AttitudeEulerResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attitude_euler_(nullptr){}
struct AttitudeEulerResponseDefaultTypeInternal {
  constexpr AttitudeEulerResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AttitudeEulerResponseDefaultTypeInternal() {}
  union {
    AttitudeEulerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AttitudeEulerResponseDefaultTypeInternal _AttitudeEulerResponse_default_instance_;
constexpr SubscribeAttitudeAngularVelocityBodyRequest::SubscribeAttitudeAngularVelocityBodyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeAttitudeAngularVelocityBodyRequestDefaultTypeInternal {
  constexpr SubscribeAttitudeAngularVelocityBodyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeAttitudeAngularVelocityBodyRequestDefaultTypeInternal() {}
  union {
    SubscribeAttitudeAngularVelocityBodyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeAttitudeAngularVelocityBodyRequestDefaultTypeInternal _SubscribeAttitudeAngularVelocityBodyRequest_default_instance_;
constexpr AttitudeAngularVelocityBodyResponse::AttitudeAngularVelocityBodyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attitude_angular_velocity_body_(nullptr){}
struct AttitudeAngularVelocityBodyResponseDefaultTypeInternal {
  constexpr AttitudeAngularVelocityBodyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AttitudeAngularVelocityBodyResponseDefaultTypeInternal() {}
  union {
    AttitudeAngularVelocityBodyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AttitudeAngularVelocityBodyResponseDefaultTypeInternal _AttitudeAngularVelocityBodyResponse_default_instance_;
constexpr SubscribeCameraAttitudeQuaternionRequest::SubscribeCameraAttitudeQuaternionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeCameraAttitudeQuaternionRequestDefaultTypeInternal {
  constexpr SubscribeCameraAttitudeQuaternionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeCameraAttitudeQuaternionRequestDefaultTypeInternal() {}
  union {
    SubscribeCameraAttitudeQuaternionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeCameraAttitudeQuaternionRequestDefaultTypeInternal _SubscribeCameraAttitudeQuaternionRequest_default_instance_;
constexpr CameraAttitudeQuaternionResponse::CameraAttitudeQuaternionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attitude_quaternion_(nullptr){}
struct CameraAttitudeQuaternionResponseDefaultTypeInternal {
  constexpr CameraAttitudeQuaternionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraAttitudeQuaternionResponseDefaultTypeInternal() {}
  union {
    CameraAttitudeQuaternionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraAttitudeQuaternionResponseDefaultTypeInternal _CameraAttitudeQuaternionResponse_default_instance_;
constexpr SubscribeCameraAttitudeEulerRequest::SubscribeCameraAttitudeEulerRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeCameraAttitudeEulerRequestDefaultTypeInternal {
  constexpr SubscribeCameraAttitudeEulerRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeCameraAttitudeEulerRequestDefaultTypeInternal() {}
  union {
    SubscribeCameraAttitudeEulerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeCameraAttitudeEulerRequestDefaultTypeInternal _SubscribeCameraAttitudeEulerRequest_default_instance_;
constexpr CameraAttitudeEulerResponse::CameraAttitudeEulerResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attitude_euler_(nullptr){}
struct CameraAttitudeEulerResponseDefaultTypeInternal {
  constexpr CameraAttitudeEulerResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraAttitudeEulerResponseDefaultTypeInternal() {}
  union {
    CameraAttitudeEulerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraAttitudeEulerResponseDefaultTypeInternal _CameraAttitudeEulerResponse_default_instance_;
constexpr SubscribeVelocityNedRequest::SubscribeVelocityNedRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeVelocityNedRequestDefaultTypeInternal {
  constexpr SubscribeVelocityNedRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeVelocityNedRequestDefaultTypeInternal() {}
  union {
    SubscribeVelocityNedRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeVelocityNedRequestDefaultTypeInternal _SubscribeVelocityNedRequest_default_instance_;
constexpr VelocityNedResponse::VelocityNedResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : velocity_ned_(nullptr){}
struct VelocityNedResponseDefaultTypeInternal {
  constexpr VelocityNedResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VelocityNedResponseDefaultTypeInternal() {}
  union {
    VelocityNedResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VelocityNedResponseDefaultTypeInternal _VelocityNedResponse_default_instance_;
constexpr SubscribeGpsInfoRequest::SubscribeGpsInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeGpsInfoRequestDefaultTypeInternal {
  constexpr SubscribeGpsInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeGpsInfoRequestDefaultTypeInternal() {}
  union {
    SubscribeGpsInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeGpsInfoRequestDefaultTypeInternal _SubscribeGpsInfoRequest_default_instance_;
constexpr GpsInfoResponse::GpsInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gps_info_(nullptr){}
struct GpsInfoResponseDefaultTypeInternal {
  constexpr GpsInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GpsInfoResponseDefaultTypeInternal() {}
  union {
    GpsInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GpsInfoResponseDefaultTypeInternal _GpsInfoResponse_default_instance_;
constexpr SubscribeRawGpsRequest::SubscribeRawGpsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeRawGpsRequestDefaultTypeInternal {
  constexpr SubscribeRawGpsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeRawGpsRequestDefaultTypeInternal() {}
  union {
    SubscribeRawGpsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeRawGpsRequestDefaultTypeInternal _SubscribeRawGpsRequest_default_instance_;
constexpr RawGpsResponse::RawGpsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : raw_gps_(nullptr){}
struct RawGpsResponseDefaultTypeInternal {
  constexpr RawGpsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RawGpsResponseDefaultTypeInternal() {}
  union {
    RawGpsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RawGpsResponseDefaultTypeInternal _RawGpsResponse_default_instance_;
constexpr SubscribeBatteryRequest::SubscribeBatteryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeBatteryRequestDefaultTypeInternal {
  constexpr SubscribeBatteryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeBatteryRequestDefaultTypeInternal() {}
  union {
    SubscribeBatteryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeBatteryRequestDefaultTypeInternal _SubscribeBatteryRequest_default_instance_;
constexpr BatteryResponse::BatteryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : battery_(nullptr){}
struct BatteryResponseDefaultTypeInternal {
  constexpr BatteryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatteryResponseDefaultTypeInternal() {}
  union {
    BatteryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatteryResponseDefaultTypeInternal _BatteryResponse_default_instance_;
constexpr SubscribeFlightModeRequest::SubscribeFlightModeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeFlightModeRequestDefaultTypeInternal {
  constexpr SubscribeFlightModeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeFlightModeRequestDefaultTypeInternal() {}
  union {
    SubscribeFlightModeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeFlightModeRequestDefaultTypeInternal _SubscribeFlightModeRequest_default_instance_;
constexpr FlightModeResponse::FlightModeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flight_mode_(0)
{}
struct FlightModeResponseDefaultTypeInternal {
  constexpr FlightModeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FlightModeResponseDefaultTypeInternal() {}
  union {
    FlightModeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FlightModeResponseDefaultTypeInternal _FlightModeResponse_default_instance_;
constexpr SubscribeHealthRequest::SubscribeHealthRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeHealthRequestDefaultTypeInternal {
  constexpr SubscribeHealthRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeHealthRequestDefaultTypeInternal() {}
  union {
    SubscribeHealthRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeHealthRequestDefaultTypeInternal _SubscribeHealthRequest_default_instance_;
constexpr HealthResponse::HealthResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : health_(nullptr){}
struct HealthResponseDefaultTypeInternal {
  constexpr HealthResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HealthResponseDefaultTypeInternal() {}
  union {
    HealthResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HealthResponseDefaultTypeInternal _HealthResponse_default_instance_;
constexpr SubscribeRcStatusRequest::SubscribeRcStatusRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeRcStatusRequestDefaultTypeInternal {
  constexpr SubscribeRcStatusRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeRcStatusRequestDefaultTypeInternal() {}
  union {
    SubscribeRcStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeRcStatusRequestDefaultTypeInternal _SubscribeRcStatusRequest_default_instance_;
constexpr RcStatusResponse::RcStatusResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rc_status_(nullptr){}
struct RcStatusResponseDefaultTypeInternal {
  constexpr RcStatusResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RcStatusResponseDefaultTypeInternal() {}
  union {
    RcStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RcStatusResponseDefaultTypeInternal _RcStatusResponse_default_instance_;
constexpr SubscribeStatusTextRequest::SubscribeStatusTextRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeStatusTextRequestDefaultTypeInternal {
  constexpr SubscribeStatusTextRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeStatusTextRequestDefaultTypeInternal() {}
  union {
    SubscribeStatusTextRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeStatusTextRequestDefaultTypeInternal _SubscribeStatusTextRequest_default_instance_;
constexpr StatusTextResponse::StatusTextResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_text_(nullptr){}
struct StatusTextResponseDefaultTypeInternal {
  constexpr StatusTextResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusTextResponseDefaultTypeInternal() {}
  union {
    StatusTextResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusTextResponseDefaultTypeInternal _StatusTextResponse_default_instance_;
constexpr SubscribeActuatorControlTargetRequest::SubscribeActuatorControlTargetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeActuatorControlTargetRequestDefaultTypeInternal {
  constexpr SubscribeActuatorControlTargetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeActuatorControlTargetRequestDefaultTypeInternal() {}
  union {
    SubscribeActuatorControlTargetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeActuatorControlTargetRequestDefaultTypeInternal _SubscribeActuatorControlTargetRequest_default_instance_;
constexpr ActuatorControlTargetResponse::ActuatorControlTargetResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actuator_control_target_(nullptr){}
struct ActuatorControlTargetResponseDefaultTypeInternal {
  constexpr ActuatorControlTargetResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActuatorControlTargetResponseDefaultTypeInternal() {}
  union {
    ActuatorControlTargetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActuatorControlTargetResponseDefaultTypeInternal _ActuatorControlTargetResponse_default_instance_;
constexpr SubscribeActuatorOutputStatusRequest::SubscribeActuatorOutputStatusRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeActuatorOutputStatusRequestDefaultTypeInternal {
  constexpr SubscribeActuatorOutputStatusRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeActuatorOutputStatusRequestDefaultTypeInternal() {}
  union {
    SubscribeActuatorOutputStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeActuatorOutputStatusRequestDefaultTypeInternal _SubscribeActuatorOutputStatusRequest_default_instance_;
constexpr ActuatorOutputStatusResponse::ActuatorOutputStatusResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actuator_output_status_(nullptr){}
struct ActuatorOutputStatusResponseDefaultTypeInternal {
  constexpr ActuatorOutputStatusResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActuatorOutputStatusResponseDefaultTypeInternal() {}
  union {
    ActuatorOutputStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActuatorOutputStatusResponseDefaultTypeInternal _ActuatorOutputStatusResponse_default_instance_;
constexpr SubscribeOdometryRequest::SubscribeOdometryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeOdometryRequestDefaultTypeInternal {
  constexpr SubscribeOdometryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeOdometryRequestDefaultTypeInternal() {}
  union {
    SubscribeOdometryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeOdometryRequestDefaultTypeInternal _SubscribeOdometryRequest_default_instance_;
constexpr OdometryResponse::OdometryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : odometry_(nullptr){}
struct OdometryResponseDefaultTypeInternal {
  constexpr OdometryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OdometryResponseDefaultTypeInternal() {}
  union {
    OdometryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OdometryResponseDefaultTypeInternal _OdometryResponse_default_instance_;
constexpr SubscribePositionVelocityNedRequest::SubscribePositionVelocityNedRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribePositionVelocityNedRequestDefaultTypeInternal {
  constexpr SubscribePositionVelocityNedRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribePositionVelocityNedRequestDefaultTypeInternal() {}
  union {
    SubscribePositionVelocityNedRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribePositionVelocityNedRequestDefaultTypeInternal _SubscribePositionVelocityNedRequest_default_instance_;
constexpr PositionVelocityNedResponse::PositionVelocityNedResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_velocity_ned_(nullptr){}
struct PositionVelocityNedResponseDefaultTypeInternal {
  constexpr PositionVelocityNedResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PositionVelocityNedResponseDefaultTypeInternal() {}
  union {
    PositionVelocityNedResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PositionVelocityNedResponseDefaultTypeInternal _PositionVelocityNedResponse_default_instance_;
constexpr SubscribeGroundTruthRequest::SubscribeGroundTruthRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeGroundTruthRequestDefaultTypeInternal {
  constexpr SubscribeGroundTruthRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeGroundTruthRequestDefaultTypeInternal() {}
  union {
    SubscribeGroundTruthRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeGroundTruthRequestDefaultTypeInternal _SubscribeGroundTruthRequest_default_instance_;
constexpr GroundTruthResponse::GroundTruthResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ground_truth_(nullptr){}
struct GroundTruthResponseDefaultTypeInternal {
  constexpr GroundTruthResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GroundTruthResponseDefaultTypeInternal() {}
  union {
    GroundTruthResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GroundTruthResponseDefaultTypeInternal _GroundTruthResponse_default_instance_;
constexpr SubscribeFixedwingMetricsRequest::SubscribeFixedwingMetricsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeFixedwingMetricsRequestDefaultTypeInternal {
  constexpr SubscribeFixedwingMetricsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeFixedwingMetricsRequestDefaultTypeInternal() {}
  union {
    SubscribeFixedwingMetricsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeFixedwingMetricsRequestDefaultTypeInternal _SubscribeFixedwingMetricsRequest_default_instance_;
constexpr FixedwingMetricsResponse::FixedwingMetricsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fixedwing_metrics_(nullptr){}
struct FixedwingMetricsResponseDefaultTypeInternal {
  constexpr FixedwingMetricsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FixedwingMetricsResponseDefaultTypeInternal() {}
  union {
    FixedwingMetricsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FixedwingMetricsResponseDefaultTypeInternal _FixedwingMetricsResponse_default_instance_;
constexpr SubscribeImuRequest::SubscribeImuRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeImuRequestDefaultTypeInternal {
  constexpr SubscribeImuRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeImuRequestDefaultTypeInternal() {}
  union {
    SubscribeImuRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeImuRequestDefaultTypeInternal _SubscribeImuRequest_default_instance_;
constexpr ImuResponse::ImuResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : imu_(nullptr){}
struct ImuResponseDefaultTypeInternal {
  constexpr ImuResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImuResponseDefaultTypeInternal() {}
  union {
    ImuResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImuResponseDefaultTypeInternal _ImuResponse_default_instance_;
constexpr SubscribeScaledImuRequest::SubscribeScaledImuRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeScaledImuRequestDefaultTypeInternal {
  constexpr SubscribeScaledImuRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeScaledImuRequestDefaultTypeInternal() {}
  union {
    SubscribeScaledImuRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeScaledImuRequestDefaultTypeInternal _SubscribeScaledImuRequest_default_instance_;
constexpr ScaledImuResponse::ScaledImuResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : imu_(nullptr){}
struct ScaledImuResponseDefaultTypeInternal {
  constexpr ScaledImuResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScaledImuResponseDefaultTypeInternal() {}
  union {
    ScaledImuResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScaledImuResponseDefaultTypeInternal _ScaledImuResponse_default_instance_;
constexpr SubscribeRawImuRequest::SubscribeRawImuRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeRawImuRequestDefaultTypeInternal {
  constexpr SubscribeRawImuRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeRawImuRequestDefaultTypeInternal() {}
  union {
    SubscribeRawImuRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeRawImuRequestDefaultTypeInternal _SubscribeRawImuRequest_default_instance_;
constexpr RawImuResponse::RawImuResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : imu_(nullptr){}
struct RawImuResponseDefaultTypeInternal {
  constexpr RawImuResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RawImuResponseDefaultTypeInternal() {}
  union {
    RawImuResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RawImuResponseDefaultTypeInternal _RawImuResponse_default_instance_;
constexpr SubscribeHealthAllOkRequest::SubscribeHealthAllOkRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeHealthAllOkRequestDefaultTypeInternal {
  constexpr SubscribeHealthAllOkRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeHealthAllOkRequestDefaultTypeInternal() {}
  union {
    SubscribeHealthAllOkRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeHealthAllOkRequestDefaultTypeInternal _SubscribeHealthAllOkRequest_default_instance_;
constexpr HealthAllOkResponse::HealthAllOkResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_health_all_ok_(false){}
struct HealthAllOkResponseDefaultTypeInternal {
  constexpr HealthAllOkResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HealthAllOkResponseDefaultTypeInternal() {}
  union {
    HealthAllOkResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HealthAllOkResponseDefaultTypeInternal _HealthAllOkResponse_default_instance_;
constexpr SubscribeUnixEpochTimeRequest::SubscribeUnixEpochTimeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeUnixEpochTimeRequestDefaultTypeInternal {
  constexpr SubscribeUnixEpochTimeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeUnixEpochTimeRequestDefaultTypeInternal() {}
  union {
    SubscribeUnixEpochTimeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeUnixEpochTimeRequestDefaultTypeInternal _SubscribeUnixEpochTimeRequest_default_instance_;
constexpr UnixEpochTimeResponse::UnixEpochTimeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_us_(PROTOBUF_ULONGLONG(0)){}
struct UnixEpochTimeResponseDefaultTypeInternal {
  constexpr UnixEpochTimeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnixEpochTimeResponseDefaultTypeInternal() {}
  union {
    UnixEpochTimeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnixEpochTimeResponseDefaultTypeInternal _UnixEpochTimeResponse_default_instance_;
constexpr SubscribeDistanceSensorRequest::SubscribeDistanceSensorRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeDistanceSensorRequestDefaultTypeInternal {
  constexpr SubscribeDistanceSensorRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeDistanceSensorRequestDefaultTypeInternal() {}
  union {
    SubscribeDistanceSensorRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeDistanceSensorRequestDefaultTypeInternal _SubscribeDistanceSensorRequest_default_instance_;
constexpr DistanceSensorResponse::DistanceSensorResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : distance_sensor_(nullptr){}
struct DistanceSensorResponseDefaultTypeInternal {
  constexpr DistanceSensorResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DistanceSensorResponseDefaultTypeInternal() {}
  union {
    DistanceSensorResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DistanceSensorResponseDefaultTypeInternal _DistanceSensorResponse_default_instance_;
constexpr SubscribeScaledPressureRequest::SubscribeScaledPressureRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SubscribeScaledPressureRequestDefaultTypeInternal {
  constexpr SubscribeScaledPressureRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeScaledPressureRequestDefaultTypeInternal() {}
  union {
    SubscribeScaledPressureRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeScaledPressureRequestDefaultTypeInternal _SubscribeScaledPressureRequest_default_instance_;
constexpr ScaledPressureResponse::ScaledPressureResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scaled_pressure_(nullptr){}
struct ScaledPressureResponseDefaultTypeInternal {
  constexpr ScaledPressureResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScaledPressureResponseDefaultTypeInternal() {}
  union {
    ScaledPressureResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScaledPressureResponseDefaultTypeInternal _ScaledPressureResponse_default_instance_;
constexpr SetRatePositionRequest::SetRatePositionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rate_hz_(0){}
struct SetRatePositionRequestDefaultTypeInternal {
  constexpr SetRatePositionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRatePositionRequestDefaultTypeInternal() {}
  union {
    SetRatePositionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRatePositionRequestDefaultTypeInternal _SetRatePositionRequest_default_instance_;
constexpr SetRatePositionResponse::SetRatePositionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : telemetry_result_(nullptr){}
struct SetRatePositionResponseDefaultTypeInternal {
  constexpr SetRatePositionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRatePositionResponseDefaultTypeInternal() {}
  union {
    SetRatePositionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRatePositionResponseDefaultTypeInternal _SetRatePositionResponse_default_instance_;
constexpr SetRateHomeRequest::SetRateHomeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rate_hz_(0){}
struct SetRateHomeRequestDefaultTypeInternal {
  constexpr SetRateHomeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateHomeRequestDefaultTypeInternal() {}
  union {
    SetRateHomeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateHomeRequestDefaultTypeInternal _SetRateHomeRequest_default_instance_;
constexpr SetRateHomeResponse::SetRateHomeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : telemetry_result_(nullptr){}
struct SetRateHomeResponseDefaultTypeInternal {
  constexpr SetRateHomeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateHomeResponseDefaultTypeInternal() {}
  union {
    SetRateHomeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateHomeResponseDefaultTypeInternal _SetRateHomeResponse_default_instance_;
constexpr SetRateInAirRequest::SetRateInAirRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rate_hz_(0){}
struct SetRateInAirRequestDefaultTypeInternal {
  constexpr SetRateInAirRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateInAirRequestDefaultTypeInternal() {}
  union {
    SetRateInAirRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateInAirRequestDefaultTypeInternal _SetRateInAirRequest_default_instance_;
constexpr SetRateInAirResponse::SetRateInAirResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : telemetry_result_(nullptr){}
struct SetRateInAirResponseDefaultTypeInternal {
  constexpr SetRateInAirResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateInAirResponseDefaultTypeInternal() {}
  union {
    SetRateInAirResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateInAirResponseDefaultTypeInternal _SetRateInAirResponse_default_instance_;
constexpr SetRateLandedStateRequest::SetRateLandedStateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rate_hz_(0){}
struct SetRateLandedStateRequestDefaultTypeInternal {
  constexpr SetRateLandedStateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateLandedStateRequestDefaultTypeInternal() {}
  union {
    SetRateLandedStateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateLandedStateRequestDefaultTypeInternal _SetRateLandedStateRequest_default_instance_;
constexpr SetRateLandedStateResponse::SetRateLandedStateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : telemetry_result_(nullptr){}
struct SetRateLandedStateResponseDefaultTypeInternal {
  constexpr SetRateLandedStateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateLandedStateResponseDefaultTypeInternal() {}
  union {
    SetRateLandedStateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateLandedStateResponseDefaultTypeInternal _SetRateLandedStateResponse_default_instance_;
constexpr SetRateAttitudeRequest::SetRateAttitudeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rate_hz_(0){}
struct SetRateAttitudeRequestDefaultTypeInternal {
  constexpr SetRateAttitudeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateAttitudeRequestDefaultTypeInternal() {}
  union {
    SetRateAttitudeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateAttitudeRequestDefaultTypeInternal _SetRateAttitudeRequest_default_instance_;
constexpr SetRateAttitudeResponse::SetRateAttitudeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : telemetry_result_(nullptr){}
struct SetRateAttitudeResponseDefaultTypeInternal {
  constexpr SetRateAttitudeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateAttitudeResponseDefaultTypeInternal() {}
  union {
    SetRateAttitudeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateAttitudeResponseDefaultTypeInternal _SetRateAttitudeResponse_default_instance_;
constexpr SetRateAttitudeAngularVelocityBodyRequest::SetRateAttitudeAngularVelocityBodyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rate_hz_(0){}
struct SetRateAttitudeAngularVelocityBodyRequestDefaultTypeInternal {
  constexpr SetRateAttitudeAngularVelocityBodyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateAttitudeAngularVelocityBodyRequestDefaultTypeInternal() {}
  union {
    SetRateAttitudeAngularVelocityBodyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateAttitudeAngularVelocityBodyRequestDefaultTypeInternal _SetRateAttitudeAngularVelocityBodyRequest_default_instance_;
constexpr SetRateAttitudeAngularVelocityBodyResponse::SetRateAttitudeAngularVelocityBodyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : telemetry_result_(nullptr){}
struct SetRateAttitudeAngularVelocityBodyResponseDefaultTypeInternal {
  constexpr SetRateAttitudeAngularVelocityBodyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateAttitudeAngularVelocityBodyResponseDefaultTypeInternal() {}
  union {
    SetRateAttitudeAngularVelocityBodyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateAttitudeAngularVelocityBodyResponseDefaultTypeInternal _SetRateAttitudeAngularVelocityBodyResponse_default_instance_;
constexpr SetRateCameraAttitudeQuaternionRequest::SetRateCameraAttitudeQuaternionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rate_hz_(0){}
struct SetRateCameraAttitudeQuaternionRequestDefaultTypeInternal {
  constexpr SetRateCameraAttitudeQuaternionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateCameraAttitudeQuaternionRequestDefaultTypeInternal() {}
  union {
    SetRateCameraAttitudeQuaternionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateCameraAttitudeQuaternionRequestDefaultTypeInternal _SetRateCameraAttitudeQuaternionRequest_default_instance_;
constexpr SetRateCameraAttitudeQuaternionResponse::SetRateCameraAttitudeQuaternionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : telemetry_result_(nullptr){}
struct SetRateCameraAttitudeQuaternionResponseDefaultTypeInternal {
  constexpr SetRateCameraAttitudeQuaternionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateCameraAttitudeQuaternionResponseDefaultTypeInternal() {}
  union {
    SetRateCameraAttitudeQuaternionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateCameraAttitudeQuaternionResponseDefaultTypeInternal _SetRateCameraAttitudeQuaternionResponse_default_instance_;
constexpr SetRateCameraAttitudeRequest::SetRateCameraAttitudeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rate_hz_(0){}
struct SetRateCameraAttitudeRequestDefaultTypeInternal {
  constexpr SetRateCameraAttitudeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateCameraAttitudeRequestDefaultTypeInternal() {}
  union {
    SetRateCameraAttitudeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateCameraAttitudeRequestDefaultTypeInternal _SetRateCameraAttitudeRequest_default_instance_;
constexpr SetRateCameraAttitudeResponse::SetRateCameraAttitudeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : telemetry_result_(nullptr){}
struct SetRateCameraAttitudeResponseDefaultTypeInternal {
  constexpr SetRateCameraAttitudeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateCameraAttitudeResponseDefaultTypeInternal() {}
  union {
    SetRateCameraAttitudeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateCameraAttitudeResponseDefaultTypeInternal _SetRateCameraAttitudeResponse_default_instance_;
constexpr SetRateVelocityNedRequest::SetRateVelocityNedRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rate_hz_(0){}
struct SetRateVelocityNedRequestDefaultTypeInternal {
  constexpr SetRateVelocityNedRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateVelocityNedRequestDefaultTypeInternal() {}
  union {
    SetRateVelocityNedRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateVelocityNedRequestDefaultTypeInternal _SetRateVelocityNedRequest_default_instance_;
constexpr SetRateVelocityNedResponse::SetRateVelocityNedResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : telemetry_result_(nullptr){}
struct SetRateVelocityNedResponseDefaultTypeInternal {
  constexpr SetRateVelocityNedResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateVelocityNedResponseDefaultTypeInternal() {}
  union {
    SetRateVelocityNedResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateVelocityNedResponseDefaultTypeInternal _SetRateVelocityNedResponse_default_instance_;
constexpr SetRateGpsInfoRequest::SetRateGpsInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rate_hz_(0){}
struct SetRateGpsInfoRequestDefaultTypeInternal {
  constexpr SetRateGpsInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateGpsInfoRequestDefaultTypeInternal() {}
  union {
    SetRateGpsInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateGpsInfoRequestDefaultTypeInternal _SetRateGpsInfoRequest_default_instance_;
constexpr SetRateGpsInfoResponse::SetRateGpsInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : telemetry_result_(nullptr){}
struct SetRateGpsInfoResponseDefaultTypeInternal {
  constexpr SetRateGpsInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateGpsInfoResponseDefaultTypeInternal() {}
  union {
    SetRateGpsInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateGpsInfoResponseDefaultTypeInternal _SetRateGpsInfoResponse_default_instance_;
constexpr SetRateRawGpsRequest::SetRateRawGpsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rate_hz_(0){}
struct SetRateRawGpsRequestDefaultTypeInternal {
  constexpr SetRateRawGpsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateRawGpsRequestDefaultTypeInternal() {}
  union {
    SetRateRawGpsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateRawGpsRequestDefaultTypeInternal _SetRateRawGpsRequest_default_instance_;
constexpr SetRateBatteryRequest::SetRateBatteryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rate_hz_(0){}
struct SetRateBatteryRequestDefaultTypeInternal {
  constexpr SetRateBatteryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateBatteryRequestDefaultTypeInternal() {}
  union {
    SetRateBatteryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateBatteryRequestDefaultTypeInternal _SetRateBatteryRequest_default_instance_;
constexpr SetRateBatteryResponse::SetRateBatteryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : telemetry_result_(nullptr){}
struct SetRateBatteryResponseDefaultTypeInternal {
  constexpr SetRateBatteryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateBatteryResponseDefaultTypeInternal() {}
  union {
    SetRateBatteryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateBatteryResponseDefaultTypeInternal _SetRateBatteryResponse_default_instance_;
constexpr SetRateRcStatusRequest::SetRateRcStatusRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rate_hz_(0){}
struct SetRateRcStatusRequestDefaultTypeInternal {
  constexpr SetRateRcStatusRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateRcStatusRequestDefaultTypeInternal() {}
  union {
    SetRateRcStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateRcStatusRequestDefaultTypeInternal _SetRateRcStatusRequest_default_instance_;
constexpr SetRateRcStatusResponse::SetRateRcStatusResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : telemetry_result_(nullptr){}
struct SetRateRcStatusResponseDefaultTypeInternal {
  constexpr SetRateRcStatusResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateRcStatusResponseDefaultTypeInternal() {}
  union {
    SetRateRcStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateRcStatusResponseDefaultTypeInternal _SetRateRcStatusResponse_default_instance_;
constexpr SetRateActuatorControlTargetRequest::SetRateActuatorControlTargetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rate_hz_(0){}
struct SetRateActuatorControlTargetRequestDefaultTypeInternal {
  constexpr SetRateActuatorControlTargetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateActuatorControlTargetRequestDefaultTypeInternal() {}
  union {
    SetRateActuatorControlTargetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateActuatorControlTargetRequestDefaultTypeInternal _SetRateActuatorControlTargetRequest_default_instance_;
constexpr SetRateActuatorControlTargetResponse::SetRateActuatorControlTargetResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : telemetry_result_(nullptr){}
struct SetRateActuatorControlTargetResponseDefaultTypeInternal {
  constexpr SetRateActuatorControlTargetResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateActuatorControlTargetResponseDefaultTypeInternal() {}
  union {
    SetRateActuatorControlTargetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateActuatorControlTargetResponseDefaultTypeInternal _SetRateActuatorControlTargetResponse_default_instance_;
constexpr SetRateActuatorOutputStatusRequest::SetRateActuatorOutputStatusRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rate_hz_(0){}
struct SetRateActuatorOutputStatusRequestDefaultTypeInternal {
  constexpr SetRateActuatorOutputStatusRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateActuatorOutputStatusRequestDefaultTypeInternal() {}
  union {
    SetRateActuatorOutputStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateActuatorOutputStatusRequestDefaultTypeInternal _SetRateActuatorOutputStatusRequest_default_instance_;
constexpr SetRateActuatorOutputStatusResponse::SetRateActuatorOutputStatusResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : telemetry_result_(nullptr){}
struct SetRateActuatorOutputStatusResponseDefaultTypeInternal {
  constexpr SetRateActuatorOutputStatusResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateActuatorOutputStatusResponseDefaultTypeInternal() {}
  union {
    SetRateActuatorOutputStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateActuatorOutputStatusResponseDefaultTypeInternal _SetRateActuatorOutputStatusResponse_default_instance_;
constexpr SetRateOdometryRequest::SetRateOdometryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rate_hz_(0){}
struct SetRateOdometryRequestDefaultTypeInternal {
  constexpr SetRateOdometryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateOdometryRequestDefaultTypeInternal() {}
  union {
    SetRateOdometryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateOdometryRequestDefaultTypeInternal _SetRateOdometryRequest_default_instance_;
constexpr SetRateOdometryResponse::SetRateOdometryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : telemetry_result_(nullptr){}
struct SetRateOdometryResponseDefaultTypeInternal {
  constexpr SetRateOdometryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateOdometryResponseDefaultTypeInternal() {}
  union {
    SetRateOdometryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateOdometryResponseDefaultTypeInternal _SetRateOdometryResponse_default_instance_;
constexpr SetRatePositionVelocityNedRequest::SetRatePositionVelocityNedRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rate_hz_(0){}
struct SetRatePositionVelocityNedRequestDefaultTypeInternal {
  constexpr SetRatePositionVelocityNedRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRatePositionVelocityNedRequestDefaultTypeInternal() {}
  union {
    SetRatePositionVelocityNedRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRatePositionVelocityNedRequestDefaultTypeInternal _SetRatePositionVelocityNedRequest_default_instance_;
constexpr SetRatePositionVelocityNedResponse::SetRatePositionVelocityNedResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : telemetry_result_(nullptr){}
struct SetRatePositionVelocityNedResponseDefaultTypeInternal {
  constexpr SetRatePositionVelocityNedResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRatePositionVelocityNedResponseDefaultTypeInternal() {}
  union {
    SetRatePositionVelocityNedResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRatePositionVelocityNedResponseDefaultTypeInternal _SetRatePositionVelocityNedResponse_default_instance_;
constexpr SetRateGroundTruthRequest::SetRateGroundTruthRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rate_hz_(0){}
struct SetRateGroundTruthRequestDefaultTypeInternal {
  constexpr SetRateGroundTruthRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateGroundTruthRequestDefaultTypeInternal() {}
  union {
    SetRateGroundTruthRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateGroundTruthRequestDefaultTypeInternal _SetRateGroundTruthRequest_default_instance_;
constexpr SetRateGroundTruthResponse::SetRateGroundTruthResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : telemetry_result_(nullptr){}
struct SetRateGroundTruthResponseDefaultTypeInternal {
  constexpr SetRateGroundTruthResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateGroundTruthResponseDefaultTypeInternal() {}
  union {
    SetRateGroundTruthResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateGroundTruthResponseDefaultTypeInternal _SetRateGroundTruthResponse_default_instance_;
constexpr SetRateFixedwingMetricsRequest::SetRateFixedwingMetricsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rate_hz_(0){}
struct SetRateFixedwingMetricsRequestDefaultTypeInternal {
  constexpr SetRateFixedwingMetricsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateFixedwingMetricsRequestDefaultTypeInternal() {}
  union {
    SetRateFixedwingMetricsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateFixedwingMetricsRequestDefaultTypeInternal _SetRateFixedwingMetricsRequest_default_instance_;
constexpr SetRateFixedwingMetricsResponse::SetRateFixedwingMetricsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : telemetry_result_(nullptr){}
struct SetRateFixedwingMetricsResponseDefaultTypeInternal {
  constexpr SetRateFixedwingMetricsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateFixedwingMetricsResponseDefaultTypeInternal() {}
  union {
    SetRateFixedwingMetricsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateFixedwingMetricsResponseDefaultTypeInternal _SetRateFixedwingMetricsResponse_default_instance_;
constexpr SetRateImuRequest::SetRateImuRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rate_hz_(0){}
struct SetRateImuRequestDefaultTypeInternal {
  constexpr SetRateImuRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateImuRequestDefaultTypeInternal() {}
  union {
    SetRateImuRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateImuRequestDefaultTypeInternal _SetRateImuRequest_default_instance_;
constexpr SetRateImuResponse::SetRateImuResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : telemetry_result_(nullptr){}
struct SetRateImuResponseDefaultTypeInternal {
  constexpr SetRateImuResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateImuResponseDefaultTypeInternal() {}
  union {
    SetRateImuResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateImuResponseDefaultTypeInternal _SetRateImuResponse_default_instance_;
constexpr SetRateScaledImuRequest::SetRateScaledImuRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rate_hz_(0){}
struct SetRateScaledImuRequestDefaultTypeInternal {
  constexpr SetRateScaledImuRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateScaledImuRequestDefaultTypeInternal() {}
  union {
    SetRateScaledImuRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateScaledImuRequestDefaultTypeInternal _SetRateScaledImuRequest_default_instance_;
constexpr SetRateScaledImuResponse::SetRateScaledImuResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : telemetry_result_(nullptr){}
struct SetRateScaledImuResponseDefaultTypeInternal {
  constexpr SetRateScaledImuResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateScaledImuResponseDefaultTypeInternal() {}
  union {
    SetRateScaledImuResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateScaledImuResponseDefaultTypeInternal _SetRateScaledImuResponse_default_instance_;
constexpr SetRateRawImuRequest::SetRateRawImuRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rate_hz_(0){}
struct SetRateRawImuRequestDefaultTypeInternal {
  constexpr SetRateRawImuRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateRawImuRequestDefaultTypeInternal() {}
  union {
    SetRateRawImuRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateRawImuRequestDefaultTypeInternal _SetRateRawImuRequest_default_instance_;
constexpr SetRateRawImuResponse::SetRateRawImuResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : telemetry_result_(nullptr){}
struct SetRateRawImuResponseDefaultTypeInternal {
  constexpr SetRateRawImuResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateRawImuResponseDefaultTypeInternal() {}
  union {
    SetRateRawImuResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateRawImuResponseDefaultTypeInternal _SetRateRawImuResponse_default_instance_;
constexpr SetRateUnixEpochTimeRequest::SetRateUnixEpochTimeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rate_hz_(0){}
struct SetRateUnixEpochTimeRequestDefaultTypeInternal {
  constexpr SetRateUnixEpochTimeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateUnixEpochTimeRequestDefaultTypeInternal() {}
  union {
    SetRateUnixEpochTimeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateUnixEpochTimeRequestDefaultTypeInternal _SetRateUnixEpochTimeRequest_default_instance_;
constexpr SetRateUnixEpochTimeResponse::SetRateUnixEpochTimeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : telemetry_result_(nullptr){}
struct SetRateUnixEpochTimeResponseDefaultTypeInternal {
  constexpr SetRateUnixEpochTimeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateUnixEpochTimeResponseDefaultTypeInternal() {}
  union {
    SetRateUnixEpochTimeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateUnixEpochTimeResponseDefaultTypeInternal _SetRateUnixEpochTimeResponse_default_instance_;
constexpr SetRateDistanceSensorRequest::SetRateDistanceSensorRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rate_hz_(0){}
struct SetRateDistanceSensorRequestDefaultTypeInternal {
  constexpr SetRateDistanceSensorRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateDistanceSensorRequestDefaultTypeInternal() {}
  union {
    SetRateDistanceSensorRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateDistanceSensorRequestDefaultTypeInternal _SetRateDistanceSensorRequest_default_instance_;
constexpr SetRateDistanceSensorResponse::SetRateDistanceSensorResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : telemetry_result_(nullptr){}
struct SetRateDistanceSensorResponseDefaultTypeInternal {
  constexpr SetRateDistanceSensorResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRateDistanceSensorResponseDefaultTypeInternal() {}
  union {
    SetRateDistanceSensorResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRateDistanceSensorResponseDefaultTypeInternal _SetRateDistanceSensorResponse_default_instance_;
constexpr GetGpsGlobalOriginRequest::GetGpsGlobalOriginRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetGpsGlobalOriginRequestDefaultTypeInternal {
  constexpr GetGpsGlobalOriginRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetGpsGlobalOriginRequestDefaultTypeInternal() {}
  union {
    GetGpsGlobalOriginRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetGpsGlobalOriginRequestDefaultTypeInternal _GetGpsGlobalOriginRequest_default_instance_;
constexpr GetGpsGlobalOriginResponse::GetGpsGlobalOriginResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : telemetry_result_(nullptr)
  , gps_global_origin_(nullptr){}
struct GetGpsGlobalOriginResponseDefaultTypeInternal {
  constexpr GetGpsGlobalOriginResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetGpsGlobalOriginResponseDefaultTypeInternal() {}
  union {
    GetGpsGlobalOriginResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetGpsGlobalOriginResponseDefaultTypeInternal _GetGpsGlobalOriginResponse_default_instance_;
constexpr Position::Position(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : latitude_deg_(0)
  , longitude_deg_(0)
  , absolute_altitude_m_(0)
  , relative_altitude_m_(0){}
struct PositionDefaultTypeInternal {
  constexpr PositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PositionDefaultTypeInternal _Position_default_instance_;
constexpr Quaternion::Quaternion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : w_(0)
  , x_(0)
  , y_(0)
  , z_(0)
  , timestamp_us_(PROTOBUF_ULONGLONG(0)){}
struct QuaternionDefaultTypeInternal {
  constexpr QuaternionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QuaternionDefaultTypeInternal() {}
  union {
    Quaternion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QuaternionDefaultTypeInternal _Quaternion_default_instance_;
constexpr EulerAngle::EulerAngle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roll_deg_(0)
  , pitch_deg_(0)
  , timestamp_us_(PROTOBUF_ULONGLONG(0))
  , yaw_deg_(0){}
struct EulerAngleDefaultTypeInternal {
  constexpr EulerAngleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EulerAngleDefaultTypeInternal() {}
  union {
    EulerAngle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EulerAngleDefaultTypeInternal _EulerAngle_default_instance_;
constexpr AngularVelocityBody::AngularVelocityBody(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roll_rad_s_(0)
  , pitch_rad_s_(0)
  , yaw_rad_s_(0){}
struct AngularVelocityBodyDefaultTypeInternal {
  constexpr AngularVelocityBodyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AngularVelocityBodyDefaultTypeInternal() {}
  union {
    AngularVelocityBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AngularVelocityBodyDefaultTypeInternal _AngularVelocityBody_default_instance_;
constexpr GpsInfo::GpsInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : num_satellites_(0)
  , fix_type_(0)
{}
struct GpsInfoDefaultTypeInternal {
  constexpr GpsInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GpsInfoDefaultTypeInternal() {}
  union {
    GpsInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GpsInfoDefaultTypeInternal _GpsInfo_default_instance_;
constexpr RawGps::RawGps(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_us_(PROTOBUF_ULONGLONG(0))
  , latitude_deg_(0)
  , longitude_deg_(0)
  , absolute_altitude_m_(0)
  , hdop_(0)
  , vdop_(0)
  , velocity_m_s_(0)
  , cog_deg_(0)
  , altitude_ellipsoid_m_(0)
  , horizontal_uncertainty_m_(0)
  , vertical_uncertainty_m_(0)
  , velocity_uncertainty_m_s_(0)
  , heading_uncertainty_deg_(0)
  , yaw_deg_(0){}
struct RawGpsDefaultTypeInternal {
  constexpr RawGpsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RawGpsDefaultTypeInternal() {}
  union {
    RawGps _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RawGpsDefaultTypeInternal _RawGps_default_instance_;
constexpr Battery::Battery(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : voltage_v_(0)
  , remaining_percent_(0){}
struct BatteryDefaultTypeInternal {
  constexpr BatteryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatteryDefaultTypeInternal() {}
  union {
    Battery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatteryDefaultTypeInternal _Battery_default_instance_;
constexpr Health::Health(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_gyrometer_calibration_ok_(false)
  , is_accelerometer_calibration_ok_(false)
  , is_magnetometer_calibration_ok_(false)
  , is_level_calibration_ok_(false)
  , is_local_position_ok_(false)
  , is_global_position_ok_(false)
  , is_home_position_ok_(false){}
struct HealthDefaultTypeInternal {
  constexpr HealthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HealthDefaultTypeInternal() {}
  union {
    Health _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HealthDefaultTypeInternal _Health_default_instance_;
constexpr RcStatus::RcStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : was_available_once_(false)
  , is_available_(false)
  , signal_strength_percent_(0){}
struct RcStatusDefaultTypeInternal {
  constexpr RcStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RcStatusDefaultTypeInternal() {}
  union {
    RcStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RcStatusDefaultTypeInternal _RcStatus_default_instance_;
constexpr StatusText::StatusText(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct StatusTextDefaultTypeInternal {
  constexpr StatusTextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusTextDefaultTypeInternal() {}
  union {
    StatusText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusTextDefaultTypeInternal _StatusText_default_instance_;
constexpr ActuatorControlTarget::ActuatorControlTarget(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controls_()
  , _controls_cached_byte_size_()
  , group_(0){}
struct ActuatorControlTargetDefaultTypeInternal {
  constexpr ActuatorControlTargetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActuatorControlTargetDefaultTypeInternal() {}
  union {
    ActuatorControlTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActuatorControlTargetDefaultTypeInternal _ActuatorControlTarget_default_instance_;
constexpr ActuatorOutputStatus::ActuatorOutputStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actuator_()
  , _actuator_cached_byte_size_()
  , active_(0u){}
struct ActuatorOutputStatusDefaultTypeInternal {
  constexpr ActuatorOutputStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActuatorOutputStatusDefaultTypeInternal() {}
  union {
    ActuatorOutputStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActuatorOutputStatusDefaultTypeInternal _ActuatorOutputStatus_default_instance_;
constexpr Covariance::Covariance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : covariance_matrix_()
  , _covariance_matrix_cached_byte_size_(){}
struct CovarianceDefaultTypeInternal {
  constexpr CovarianceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CovarianceDefaultTypeInternal() {}
  union {
    Covariance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CovarianceDefaultTypeInternal _Covariance_default_instance_;
constexpr VelocityBody::VelocityBody(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_m_s_(0)
  , y_m_s_(0)
  , z_m_s_(0){}
struct VelocityBodyDefaultTypeInternal {
  constexpr VelocityBodyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VelocityBodyDefaultTypeInternal() {}
  union {
    VelocityBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VelocityBodyDefaultTypeInternal _VelocityBody_default_instance_;
constexpr PositionBody::PositionBody(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_m_(0)
  , y_m_(0)
  , z_m_(0){}
struct PositionBodyDefaultTypeInternal {
  constexpr PositionBodyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PositionBodyDefaultTypeInternal() {}
  union {
    PositionBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PositionBodyDefaultTypeInternal _PositionBody_default_instance_;
constexpr Odometry::Odometry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_body_(nullptr)
  , q_(nullptr)
  , velocity_body_(nullptr)
  , angular_velocity_body_(nullptr)
  , pose_covariance_(nullptr)
  , velocity_covariance_(nullptr)
  , time_usec_(PROTOBUF_ULONGLONG(0))
  , frame_id_(0)

  , child_frame_id_(0)
{}
struct OdometryDefaultTypeInternal {
  constexpr OdometryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OdometryDefaultTypeInternal() {}
  union {
    Odometry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OdometryDefaultTypeInternal _Odometry_default_instance_;
constexpr DistanceSensor::DistanceSensor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : minimum_distance_m_(0)
  , maximum_distance_m_(0)
  , current_distance_m_(0){}
struct DistanceSensorDefaultTypeInternal {
  constexpr DistanceSensorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DistanceSensorDefaultTypeInternal() {}
  union {
    DistanceSensor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DistanceSensorDefaultTypeInternal _DistanceSensor_default_instance_;
constexpr ScaledPressure::ScaledPressure(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_us_(PROTOBUF_ULONGLONG(0))
  , absolute_pressure_hpa_(0)
  , differential_pressure_hpa_(0)
  , temperature_deg_(0)
  , differential_pressure_temperature_deg_(0){}
struct ScaledPressureDefaultTypeInternal {
  constexpr ScaledPressureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScaledPressureDefaultTypeInternal() {}
  union {
    ScaledPressure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScaledPressureDefaultTypeInternal _ScaledPressure_default_instance_;
constexpr PositionNed::PositionNed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : north_m_(0)
  , east_m_(0)
  , down_m_(0){}
struct PositionNedDefaultTypeInternal {
  constexpr PositionNedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PositionNedDefaultTypeInternal() {}
  union {
    PositionNed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PositionNedDefaultTypeInternal _PositionNed_default_instance_;
constexpr VelocityNed::VelocityNed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : north_m_s_(0)
  , east_m_s_(0)
  , down_m_s_(0){}
struct VelocityNedDefaultTypeInternal {
  constexpr VelocityNedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VelocityNedDefaultTypeInternal() {}
  union {
    VelocityNed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VelocityNedDefaultTypeInternal _VelocityNed_default_instance_;
constexpr PositionVelocityNed::PositionVelocityNed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , velocity_(nullptr){}
struct PositionVelocityNedDefaultTypeInternal {
  constexpr PositionVelocityNedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PositionVelocityNedDefaultTypeInternal() {}
  union {
    PositionVelocityNed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PositionVelocityNedDefaultTypeInternal _PositionVelocityNed_default_instance_;
constexpr GroundTruth::GroundTruth(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : latitude_deg_(0)
  , longitude_deg_(0)
  , absolute_altitude_m_(0){}
struct GroundTruthDefaultTypeInternal {
  constexpr GroundTruthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GroundTruthDefaultTypeInternal() {}
  union {
    GroundTruth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GroundTruthDefaultTypeInternal _GroundTruth_default_instance_;
constexpr FixedwingMetrics::FixedwingMetrics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : airspeed_m_s_(0)
  , throttle_percentage_(0)
  , climb_rate_m_s_(0){}
struct FixedwingMetricsDefaultTypeInternal {
  constexpr FixedwingMetricsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FixedwingMetricsDefaultTypeInternal() {}
  union {
    FixedwingMetrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FixedwingMetricsDefaultTypeInternal _FixedwingMetrics_default_instance_;
constexpr AccelerationFrd::AccelerationFrd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : forward_m_s2_(0)
  , right_m_s2_(0)
  , down_m_s2_(0){}
struct AccelerationFrdDefaultTypeInternal {
  constexpr AccelerationFrdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccelerationFrdDefaultTypeInternal() {}
  union {
    AccelerationFrd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccelerationFrdDefaultTypeInternal _AccelerationFrd_default_instance_;
constexpr AngularVelocityFrd::AngularVelocityFrd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : forward_rad_s_(0)
  , right_rad_s_(0)
  , down_rad_s_(0){}
struct AngularVelocityFrdDefaultTypeInternal {
  constexpr AngularVelocityFrdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AngularVelocityFrdDefaultTypeInternal() {}
  union {
    AngularVelocityFrd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AngularVelocityFrdDefaultTypeInternal _AngularVelocityFrd_default_instance_;
constexpr MagneticFieldFrd::MagneticFieldFrd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : forward_gauss_(0)
  , right_gauss_(0)
  , down_gauss_(0){}
struct MagneticFieldFrdDefaultTypeInternal {
  constexpr MagneticFieldFrdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MagneticFieldFrdDefaultTypeInternal() {}
  union {
    MagneticFieldFrd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MagneticFieldFrdDefaultTypeInternal _MagneticFieldFrd_default_instance_;
constexpr Imu::Imu(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : acceleration_frd_(nullptr)
  , angular_velocity_frd_(nullptr)
  , magnetic_field_frd_(nullptr)
  , timestamp_us_(PROTOBUF_ULONGLONG(0))
  , temperature_degc_(0){}
struct ImuDefaultTypeInternal {
  constexpr ImuDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImuDefaultTypeInternal() {}
  union {
    Imu _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImuDefaultTypeInternal _Imu_default_instance_;
constexpr GpsGlobalOrigin::GpsGlobalOrigin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : latitude_deg_(0)
  , longitude_deg_(0)
  , altitude_m_(0){}
struct GpsGlobalOriginDefaultTypeInternal {
  constexpr GpsGlobalOriginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GpsGlobalOriginDefaultTypeInternal() {}
  union {
    GpsGlobalOrigin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GpsGlobalOriginDefaultTypeInternal _GpsGlobalOrigin_default_instance_;
constexpr TelemetryResult::TelemetryResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)
{}
struct TelemetryResultDefaultTypeInternal {
  constexpr TelemetryResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TelemetryResultDefaultTypeInternal() {}
  union {
    TelemetryResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TelemetryResultDefaultTypeInternal _TelemetryResult_default_instance_;
}  // namespace telemetry
}  // namespace rpc
}  // namespace mavsdk
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_telemetry_2ftelemetry_2eproto[140];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_telemetry_2ftelemetry_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_telemetry_2ftelemetry_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_telemetry_2ftelemetry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribePositionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionResponse, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeHomeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::HomeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::HomeResponse, home_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeInAirRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::InAirResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::InAirResponse, is_in_air_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeLandedStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::LandedStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::LandedStateResponse, landed_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeArmedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ArmedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ArmedResponse, is_armed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeAttitudeQuaternionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AttitudeQuaternionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AttitudeQuaternionResponse, attitude_quaternion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeAttitudeEulerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AttitudeEulerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AttitudeEulerResponse, attitude_euler_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeAttitudeAngularVelocityBodyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AttitudeAngularVelocityBodyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AttitudeAngularVelocityBodyResponse, attitude_angular_velocity_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeCameraAttitudeQuaternionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::CameraAttitudeQuaternionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::CameraAttitudeQuaternionResponse, attitude_quaternion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeCameraAttitudeEulerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::CameraAttitudeEulerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::CameraAttitudeEulerResponse, attitude_euler_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeVelocityNedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VelocityNedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VelocityNedResponse, velocity_ned_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeGpsInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GpsInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GpsInfoResponse, gps_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeRawGpsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGpsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGpsResponse, raw_gps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeBatteryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::BatteryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::BatteryResponse, battery_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeFlightModeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::FlightModeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::FlightModeResponse, flight_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeHealthRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::HealthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::HealthResponse, health_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeRcStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RcStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RcStatusResponse, rc_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeStatusTextRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::StatusTextResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::StatusTextResponse, status_text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeActuatorControlTargetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorControlTargetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorControlTargetResponse, actuator_control_target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeActuatorOutputStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorOutputStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorOutputStatusResponse, actuator_output_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeOdometryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::OdometryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::OdometryResponse, odometry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribePositionVelocityNedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionVelocityNedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionVelocityNedResponse, position_velocity_ned_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeGroundTruthRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GroundTruthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GroundTruthResponse, ground_truth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeFixedwingMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::FixedwingMetricsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::FixedwingMetricsResponse, fixedwing_metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeImuRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ImuResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ImuResponse, imu_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeScaledImuRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ScaledImuResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ScaledImuResponse, imu_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeRawImuRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawImuResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawImuResponse, imu_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeHealthAllOkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::HealthAllOkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::HealthAllOkResponse, is_health_all_ok_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeUnixEpochTimeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::UnixEpochTimeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::UnixEpochTimeResponse, time_us_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeDistanceSensorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::DistanceSensorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::DistanceSensorResponse, distance_sensor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeScaledPressureRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ScaledPressureResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ScaledPressureResponse, scaled_pressure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRatePositionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRatePositionRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRatePositionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRatePositionResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateHomeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateHomeRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateHomeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateHomeResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateInAirRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateInAirRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateInAirResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateInAirResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateLandedStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateLandedStateRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateLandedStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateLandedStateResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateCameraAttitudeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateCameraAttitudeRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateCameraAttitudeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateCameraAttitudeResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateVelocityNedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateVelocityNedRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateVelocityNedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateVelocityNedResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateGpsInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateGpsInfoRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateGpsInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateGpsInfoResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateRawGpsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateRawGpsRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateBatteryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateBatteryRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateBatteryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateBatteryResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateRcStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateRcStatusRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateRcStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateRcStatusResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateActuatorControlTargetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateActuatorControlTargetRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateActuatorControlTargetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateActuatorControlTargetResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateOdometryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateOdometryRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateOdometryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateOdometryResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRatePositionVelocityNedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRatePositionVelocityNedRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRatePositionVelocityNedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRatePositionVelocityNedResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateGroundTruthRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateGroundTruthRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateGroundTruthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateGroundTruthResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateFixedwingMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateFixedwingMetricsRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateFixedwingMetricsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateFixedwingMetricsResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateImuRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateImuRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateImuResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateImuResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateScaledImuRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateScaledImuRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateScaledImuResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateScaledImuResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateRawImuRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateRawImuRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateRawImuResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateRawImuResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateUnixEpochTimeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateUnixEpochTimeRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateUnixEpochTimeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateUnixEpochTimeResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateDistanceSensorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateDistanceSensorRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateDistanceSensorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateDistanceSensorResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GetGpsGlobalOriginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GetGpsGlobalOriginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GetGpsGlobalOriginResponse, telemetry_result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GetGpsGlobalOriginResponse, gps_global_origin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Position, latitude_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Position, longitude_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Position, absolute_altitude_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Position, relative_altitude_m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Quaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Quaternion, w_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Quaternion, x_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Quaternion, y_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Quaternion, z_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Quaternion, timestamp_us_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::EulerAngle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::EulerAngle, roll_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::EulerAngle, pitch_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::EulerAngle, yaw_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::EulerAngle, timestamp_us_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AngularVelocityBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AngularVelocityBody, roll_rad_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AngularVelocityBody, pitch_rad_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AngularVelocityBody, yaw_rad_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GpsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GpsInfo, num_satellites_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GpsInfo, fix_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGps, timestamp_us_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGps, latitude_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGps, longitude_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGps, absolute_altitude_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGps, hdop_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGps, vdop_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGps, velocity_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGps, cog_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGps, altitude_ellipsoid_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGps, horizontal_uncertainty_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGps, vertical_uncertainty_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGps, velocity_uncertainty_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGps, heading_uncertainty_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RawGps, yaw_deg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Battery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Battery, voltage_v_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Battery, remaining_percent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Health, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Health, is_gyrometer_calibration_ok_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Health, is_accelerometer_calibration_ok_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Health, is_magnetometer_calibration_ok_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Health, is_level_calibration_ok_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Health, is_local_position_ok_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Health, is_global_position_ok_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Health, is_home_position_ok_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RcStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RcStatus, was_available_once_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RcStatus, is_available_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RcStatus, signal_strength_percent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::StatusText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::StatusText, type_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::StatusText, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorControlTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorControlTarget, group_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorControlTarget, controls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorOutputStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorOutputStatus, active_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorOutputStatus, actuator_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Covariance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Covariance, covariance_matrix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VelocityBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VelocityBody, x_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VelocityBody, y_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VelocityBody, z_m_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionBody, x_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionBody, y_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionBody, z_m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, time_usec_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, frame_id_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, child_frame_id_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, position_body_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, q_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, velocity_body_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, angular_velocity_body_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, pose_covariance_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, velocity_covariance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::DistanceSensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::DistanceSensor, minimum_distance_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::DistanceSensor, maximum_distance_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::DistanceSensor, current_distance_m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ScaledPressure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ScaledPressure, timestamp_us_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ScaledPressure, absolute_pressure_hpa_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ScaledPressure, differential_pressure_hpa_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ScaledPressure, temperature_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ScaledPressure, differential_pressure_temperature_deg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionNed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionNed, north_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionNed, east_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionNed, down_m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VelocityNed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VelocityNed, north_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VelocityNed, east_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VelocityNed, down_m_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionVelocityNed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionVelocityNed, position_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionVelocityNed, velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GroundTruth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GroundTruth, latitude_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GroundTruth, longitude_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GroundTruth, absolute_altitude_m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::FixedwingMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::FixedwingMetrics, airspeed_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::FixedwingMetrics, throttle_percentage_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::FixedwingMetrics, climb_rate_m_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AccelerationFrd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AccelerationFrd, forward_m_s2_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AccelerationFrd, right_m_s2_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AccelerationFrd, down_m_s2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AngularVelocityFrd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AngularVelocityFrd, forward_rad_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AngularVelocityFrd, right_rad_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AngularVelocityFrd, down_rad_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::MagneticFieldFrd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::MagneticFieldFrd, forward_gauss_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::MagneticFieldFrd, right_gauss_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::MagneticFieldFrd, down_gauss_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Imu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Imu, acceleration_frd_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Imu, angular_velocity_frd_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Imu, magnetic_field_frd_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Imu, temperature_degc_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Imu, timestamp_us_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GpsGlobalOrigin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GpsGlobalOrigin, latitude_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GpsGlobalOrigin, longitude_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GpsGlobalOrigin, altitude_m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::TelemetryResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::TelemetryResult, result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::TelemetryResult, result_str_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mavsdk::rpc::telemetry::SubscribePositionRequest)},
  { 5, -1, sizeof(::mavsdk::rpc::telemetry::PositionResponse)},
  { 11, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeHomeRequest)},
  { 16, -1, sizeof(::mavsdk::rpc::telemetry::HomeResponse)},
  { 22, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeInAirRequest)},
  { 27, -1, sizeof(::mavsdk::rpc::telemetry::InAirResponse)},
  { 33, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeLandedStateRequest)},
  { 38, -1, sizeof(::mavsdk::rpc::telemetry::LandedStateResponse)},
  { 44, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeArmedRequest)},
  { 49, -1, sizeof(::mavsdk::rpc::telemetry::ArmedResponse)},
  { 55, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeAttitudeQuaternionRequest)},
  { 60, -1, sizeof(::mavsdk::rpc::telemetry::AttitudeQuaternionResponse)},
  { 66, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeAttitudeEulerRequest)},
  { 71, -1, sizeof(::mavsdk::rpc::telemetry::AttitudeEulerResponse)},
  { 77, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeAttitudeAngularVelocityBodyRequest)},
  { 82, -1, sizeof(::mavsdk::rpc::telemetry::AttitudeAngularVelocityBodyResponse)},
  { 88, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeCameraAttitudeQuaternionRequest)},
  { 93, -1, sizeof(::mavsdk::rpc::telemetry::CameraAttitudeQuaternionResponse)},
  { 99, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeCameraAttitudeEulerRequest)},
  { 104, -1, sizeof(::mavsdk::rpc::telemetry::CameraAttitudeEulerResponse)},
  { 110, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeVelocityNedRequest)},
  { 115, -1, sizeof(::mavsdk::rpc::telemetry::VelocityNedResponse)},
  { 121, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeGpsInfoRequest)},
  { 126, -1, sizeof(::mavsdk::rpc::telemetry::GpsInfoResponse)},
  { 132, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeRawGpsRequest)},
  { 137, -1, sizeof(::mavsdk::rpc::telemetry::RawGpsResponse)},
  { 143, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeBatteryRequest)},
  { 148, -1, sizeof(::mavsdk::rpc::telemetry::BatteryResponse)},
  { 154, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeFlightModeRequest)},
  { 159, -1, sizeof(::mavsdk::rpc::telemetry::FlightModeResponse)},
  { 165, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeHealthRequest)},
  { 170, -1, sizeof(::mavsdk::rpc::telemetry::HealthResponse)},
  { 176, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeRcStatusRequest)},
  { 181, -1, sizeof(::mavsdk::rpc::telemetry::RcStatusResponse)},
  { 187, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeStatusTextRequest)},
  { 192, -1, sizeof(::mavsdk::rpc::telemetry::StatusTextResponse)},
  { 198, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeActuatorControlTargetRequest)},
  { 203, -1, sizeof(::mavsdk::rpc::telemetry::ActuatorControlTargetResponse)},
  { 209, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeActuatorOutputStatusRequest)},
  { 214, -1, sizeof(::mavsdk::rpc::telemetry::ActuatorOutputStatusResponse)},
  { 220, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeOdometryRequest)},
  { 225, -1, sizeof(::mavsdk::rpc::telemetry::OdometryResponse)},
  { 231, -1, sizeof(::mavsdk::rpc::telemetry::SubscribePositionVelocityNedRequest)},
  { 236, -1, sizeof(::mavsdk::rpc::telemetry::PositionVelocityNedResponse)},
  { 242, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeGroundTruthRequest)},
  { 247, -1, sizeof(::mavsdk::rpc::telemetry::GroundTruthResponse)},
  { 253, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeFixedwingMetricsRequest)},
  { 258, -1, sizeof(::mavsdk::rpc::telemetry::FixedwingMetricsResponse)},
  { 264, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeImuRequest)},
  { 269, -1, sizeof(::mavsdk::rpc::telemetry::ImuResponse)},
  { 275, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeScaledImuRequest)},
  { 280, -1, sizeof(::mavsdk::rpc::telemetry::ScaledImuResponse)},
  { 286, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeRawImuRequest)},
  { 291, -1, sizeof(::mavsdk::rpc::telemetry::RawImuResponse)},
  { 297, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeHealthAllOkRequest)},
  { 302, -1, sizeof(::mavsdk::rpc::telemetry::HealthAllOkResponse)},
  { 308, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeUnixEpochTimeRequest)},
  { 313, -1, sizeof(::mavsdk::rpc::telemetry::UnixEpochTimeResponse)},
  { 319, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeDistanceSensorRequest)},
  { 324, -1, sizeof(::mavsdk::rpc::telemetry::DistanceSensorResponse)},
  { 330, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeScaledPressureRequest)},
  { 335, -1, sizeof(::mavsdk::rpc::telemetry::ScaledPressureResponse)},
  { 341, -1, sizeof(::mavsdk::rpc::telemetry::SetRatePositionRequest)},
  { 347, -1, sizeof(::mavsdk::rpc::telemetry::SetRatePositionResponse)},
  { 353, -1, sizeof(::mavsdk::rpc::telemetry::SetRateHomeRequest)},
  { 359, -1, sizeof(::mavsdk::rpc::telemetry::SetRateHomeResponse)},
  { 365, -1, sizeof(::mavsdk::rpc::telemetry::SetRateInAirRequest)},
  { 371, -1, sizeof(::mavsdk::rpc::telemetry::SetRateInAirResponse)},
  { 377, -1, sizeof(::mavsdk::rpc::telemetry::SetRateLandedStateRequest)},
  { 383, -1, sizeof(::mavsdk::rpc::telemetry::SetRateLandedStateResponse)},
  { 389, -1, sizeof(::mavsdk::rpc::telemetry::SetRateAttitudeRequest)},
  { 395, -1, sizeof(::mavsdk::rpc::telemetry::SetRateAttitudeResponse)},
  { 401, -1, sizeof(::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyRequest)},
  { 407, -1, sizeof(::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyResponse)},
  { 413, -1, sizeof(::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionRequest)},
  { 419, -1, sizeof(::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionResponse)},
  { 425, -1, sizeof(::mavsdk::rpc::telemetry::SetRateCameraAttitudeRequest)},
  { 431, -1, sizeof(::mavsdk::rpc::telemetry::SetRateCameraAttitudeResponse)},
  { 437, -1, sizeof(::mavsdk::rpc::telemetry::SetRateVelocityNedRequest)},
  { 443, -1, sizeof(::mavsdk::rpc::telemetry::SetRateVelocityNedResponse)},
  { 449, -1, sizeof(::mavsdk::rpc::telemetry::SetRateGpsInfoRequest)},
  { 455, -1, sizeof(::mavsdk::rpc::telemetry::SetRateGpsInfoResponse)},
  { 461, -1, sizeof(::mavsdk::rpc::telemetry::SetRateRawGpsRequest)},
  { 467, -1, sizeof(::mavsdk::rpc::telemetry::SetRateBatteryRequest)},
  { 473, -1, sizeof(::mavsdk::rpc::telemetry::SetRateBatteryResponse)},
  { 479, -1, sizeof(::mavsdk::rpc::telemetry::SetRateRcStatusRequest)},
  { 485, -1, sizeof(::mavsdk::rpc::telemetry::SetRateRcStatusResponse)},
  { 491, -1, sizeof(::mavsdk::rpc::telemetry::SetRateActuatorControlTargetRequest)},
  { 497, -1, sizeof(::mavsdk::rpc::telemetry::SetRateActuatorControlTargetResponse)},
  { 503, -1, sizeof(::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusRequest)},
  { 509, -1, sizeof(::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusResponse)},
  { 515, -1, sizeof(::mavsdk::rpc::telemetry::SetRateOdometryRequest)},
  { 521, -1, sizeof(::mavsdk::rpc::telemetry::SetRateOdometryResponse)},
  { 527, -1, sizeof(::mavsdk::rpc::telemetry::SetRatePositionVelocityNedRequest)},
  { 533, -1, sizeof(::mavsdk::rpc::telemetry::SetRatePositionVelocityNedResponse)},
  { 539, -1, sizeof(::mavsdk::rpc::telemetry::SetRateGroundTruthRequest)},
  { 545, -1, sizeof(::mavsdk::rpc::telemetry::SetRateGroundTruthResponse)},
  { 551, -1, sizeof(::mavsdk::rpc::telemetry::SetRateFixedwingMetricsRequest)},
  { 557, -1, sizeof(::mavsdk::rpc::telemetry::SetRateFixedwingMetricsResponse)},
  { 563, -1, sizeof(::mavsdk::rpc::telemetry::SetRateImuRequest)},
  { 569, -1, sizeof(::mavsdk::rpc::telemetry::SetRateImuResponse)},
  { 575, -1, sizeof(::mavsdk::rpc::telemetry::SetRateScaledImuRequest)},
  { 581, -1, sizeof(::mavsdk::rpc::telemetry::SetRateScaledImuResponse)},
  { 587, -1, sizeof(::mavsdk::rpc::telemetry::SetRateRawImuRequest)},
  { 593, -1, sizeof(::mavsdk::rpc::telemetry::SetRateRawImuResponse)},
  { 599, -1, sizeof(::mavsdk::rpc::telemetry::SetRateUnixEpochTimeRequest)},
  { 605, -1, sizeof(::mavsdk::rpc::telemetry::SetRateUnixEpochTimeResponse)},
  { 611, -1, sizeof(::mavsdk::rpc::telemetry::SetRateDistanceSensorRequest)},
  { 617, -1, sizeof(::mavsdk::rpc::telemetry::SetRateDistanceSensorResponse)},
  { 623, -1, sizeof(::mavsdk::rpc::telemetry::GetGpsGlobalOriginRequest)},
  { 628, -1, sizeof(::mavsdk::rpc::telemetry::GetGpsGlobalOriginResponse)},
  { 635, -1, sizeof(::mavsdk::rpc::telemetry::Position)},
  { 644, -1, sizeof(::mavsdk::rpc::telemetry::Quaternion)},
  { 654, -1, sizeof(::mavsdk::rpc::telemetry::EulerAngle)},
  { 663, -1, sizeof(::mavsdk::rpc::telemetry::AngularVelocityBody)},
  { 671, -1, sizeof(::mavsdk::rpc::telemetry::GpsInfo)},
  { 678, -1, sizeof(::mavsdk::rpc::telemetry::RawGps)},
  { 697, -1, sizeof(::mavsdk::rpc::telemetry::Battery)},
  { 704, -1, sizeof(::mavsdk::rpc::telemetry::Health)},
  { 716, -1, sizeof(::mavsdk::rpc::telemetry::RcStatus)},
  { 724, -1, sizeof(::mavsdk::rpc::telemetry::StatusText)},
  { 731, -1, sizeof(::mavsdk::rpc::telemetry::ActuatorControlTarget)},
  { 738, -1, sizeof(::mavsdk::rpc::telemetry::ActuatorOutputStatus)},
  { 745, -1, sizeof(::mavsdk::rpc::telemetry::Covariance)},
  { 751, -1, sizeof(::mavsdk::rpc::telemetry::VelocityBody)},
  { 759, -1, sizeof(::mavsdk::rpc::telemetry::PositionBody)},
  { 767, -1, sizeof(::mavsdk::rpc::telemetry::Odometry)},
  { 781, -1, sizeof(::mavsdk::rpc::telemetry::DistanceSensor)},
  { 789, -1, sizeof(::mavsdk::rpc::telemetry::ScaledPressure)},
  { 799, -1, sizeof(::mavsdk::rpc::telemetry::PositionNed)},
  { 807, -1, sizeof(::mavsdk::rpc::telemetry::VelocityNed)},
  { 815, -1, sizeof(::mavsdk::rpc::telemetry::PositionVelocityNed)},
  { 822, -1, sizeof(::mavsdk::rpc::telemetry::GroundTruth)},
  { 830, -1, sizeof(::mavsdk::rpc::telemetry::FixedwingMetrics)},
  { 838, -1, sizeof(::mavsdk::rpc::telemetry::AccelerationFrd)},
  { 846, -1, sizeof(::mavsdk::rpc::telemetry::AngularVelocityFrd)},
  { 854, -1, sizeof(::mavsdk::rpc::telemetry::MagneticFieldFrd)},
  { 862, -1, sizeof(::mavsdk::rpc::telemetry::Imu)},
  { 872, -1, sizeof(::mavsdk::rpc::telemetry::GpsGlobalOrigin)},
  { 880, -1, sizeof(::mavsdk::rpc::telemetry::TelemetryResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribePositionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_PositionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeHomeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_HomeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeInAirRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_InAirResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeLandedStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_LandedStateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeArmedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_ArmedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeAttitudeQuaternionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_AttitudeQuaternionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeAttitudeEulerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_AttitudeEulerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeAttitudeAngularVelocityBodyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_AttitudeAngularVelocityBodyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeCameraAttitudeQuaternionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_CameraAttitudeQuaternionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeCameraAttitudeEulerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_CameraAttitudeEulerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeVelocityNedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_VelocityNedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeGpsInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_GpsInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeRawGpsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_RawGpsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeBatteryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_BatteryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeFlightModeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_FlightModeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeHealthRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_HealthResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeRcStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_RcStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeStatusTextRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_StatusTextResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeActuatorControlTargetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_ActuatorControlTargetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeActuatorOutputStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_ActuatorOutputStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeOdometryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_OdometryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribePositionVelocityNedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_PositionVelocityNedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeGroundTruthRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_GroundTruthResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeFixedwingMetricsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_FixedwingMetricsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeImuRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_ImuResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeScaledImuRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_ScaledImuResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeRawImuRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_RawImuResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeHealthAllOkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_HealthAllOkResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeUnixEpochTimeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_UnixEpochTimeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeDistanceSensorRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_DistanceSensorResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeScaledPressureRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_ScaledPressureResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRatePositionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRatePositionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateHomeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateHomeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateInAirRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateInAirResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateLandedStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateLandedStateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateAttitudeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateAttitudeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateAttitudeAngularVelocityBodyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateAttitudeAngularVelocityBodyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateCameraAttitudeQuaternionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateCameraAttitudeQuaternionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateCameraAttitudeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateCameraAttitudeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateVelocityNedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateVelocityNedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateGpsInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateGpsInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateRawGpsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateBatteryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateBatteryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateRcStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateRcStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateActuatorControlTargetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateActuatorControlTargetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateActuatorOutputStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateActuatorOutputStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateOdometryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateOdometryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRatePositionVelocityNedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRatePositionVelocityNedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateGroundTruthRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateGroundTruthResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateFixedwingMetricsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateFixedwingMetricsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateImuRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateImuResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateScaledImuRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateScaledImuResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateRawImuRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateRawImuResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateUnixEpochTimeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateUnixEpochTimeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateDistanceSensorRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateDistanceSensorResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_GetGpsGlobalOriginRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_GetGpsGlobalOriginResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_Quaternion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_EulerAngle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_AngularVelocityBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_GpsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_RawGps_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_Battery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_Health_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_RcStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_StatusText_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_ActuatorControlTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_ActuatorOutputStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_Covariance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_VelocityBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_PositionBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_Odometry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_DistanceSensor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_ScaledPressure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_PositionNed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_VelocityNed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_PositionVelocityNed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_GroundTruth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_FixedwingMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_AccelerationFrd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_AngularVelocityFrd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_MagneticFieldFrd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_Imu_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_GpsGlobalOrigin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_TelemetryResult_default_instance_),
};

const char descriptor_table_protodef_telemetry_2ftelemetry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031telemetry/telemetry.proto\022\024mavsdk.rpc."
  "telemetry\032\024mavsdk_options.proto\"\032\n\030Subsc"
  "ribePositionRequest\"D\n\020PositionResponse\022"
  "0\n\010position\030\001 \001(\0132\036.mavsdk.rpc.telemetry"
  ".Position\"\026\n\024SubscribeHomeRequest\"<\n\014Hom"
  "eResponse\022,\n\004home\030\001 \001(\0132\036.mavsdk.rpc.tel"
  "emetry.Position\"\027\n\025SubscribeInAirRequest"
  "\"\"\n\rInAirResponse\022\021\n\tis_in_air\030\001 \001(\010\"\035\n\033"
  "SubscribeLandedStateRequest\"N\n\023LandedSta"
  "teResponse\0227\n\014landed_state\030\001 \001(\0162!.mavsd"
  "k.rpc.telemetry.LandedState\"\027\n\025Subscribe"
  "ArmedRequest\"!\n\rArmedResponse\022\020\n\010is_arme"
  "d\030\001 \001(\010\"$\n\"SubscribeAttitudeQuaternionRe"
  "quest\"[\n\032AttitudeQuaternionResponse\022=\n\023a"
  "ttitude_quaternion\030\001 \001(\0132 .mavsdk.rpc.te"
  "lemetry.Quaternion\"\037\n\035SubscribeAttitudeE"
  "ulerRequest\"Q\n\025AttitudeEulerResponse\0228\n\016"
  "attitude_euler\030\001 \001(\0132 .mavsdk.rpc.teleme"
  "try.EulerAngle\"-\n+SubscribeAttitudeAngul"
  "arVelocityBodyRequest\"x\n#AttitudeAngular"
  "VelocityBodyResponse\022Q\n\036attitude_angular"
  "_velocity_body\030\001 \001(\0132).mavsdk.rpc.teleme"
  "try.AngularVelocityBody\"*\n(SubscribeCame"
  "raAttitudeQuaternionRequest\"a\n CameraAtt"
  "itudeQuaternionResponse\022=\n\023attitude_quat"
  "ernion\030\001 \001(\0132 .mavsdk.rpc.telemetry.Quat"
  "ernion\"%\n#SubscribeCameraAttitudeEulerRe"
  "quest\"W\n\033CameraAttitudeEulerResponse\0228\n\016"
  "attitude_euler\030\001 \001(\0132 .mavsdk.rpc.teleme"
  "try.EulerAngle\"\035\n\033SubscribeVelocityNedRe"
  "quest\"N\n\023VelocityNedResponse\0227\n\014velocity"
  "_ned\030\001 \001(\0132!.mavsdk.rpc.telemetry.Veloci"
  "tyNed\"\031\n\027SubscribeGpsInfoRequest\"B\n\017GpsI"
  "nfoResponse\022/\n\010gps_info\030\001 \001(\0132\035.mavsdk.r"
  "pc.telemetry.GpsInfo\"\030\n\026SubscribeRawGpsR"
  "equest\"\?\n\016RawGpsResponse\022-\n\007raw_gps\030\001 \001("
  "\0132\034.mavsdk.rpc.telemetry.RawGps\"\031\n\027Subsc"
  "ribeBatteryRequest\"A\n\017BatteryResponse\022.\n"
  "\007battery\030\001 \001(\0132\035.mavsdk.rpc.telemetry.Ba"
  "ttery\"\034\n\032SubscribeFlightModeRequest\"K\n\022F"
  "lightModeResponse\0225\n\013flight_mode\030\001 \001(\0162 "
  ".mavsdk.rpc.telemetry.FlightMode\"\030\n\026Subs"
  "cribeHealthRequest\">\n\016HealthResponse\022,\n\006"
  "health\030\001 \001(\0132\034.mavsdk.rpc.telemetry.Heal"
  "th\"\032\n\030SubscribeRcStatusRequest\"E\n\020RcStat"
  "usResponse\0221\n\trc_status\030\001 \001(\0132\036.mavsdk.r"
  "pc.telemetry.RcStatus\"\034\n\032SubscribeStatus"
  "TextRequest\"K\n\022StatusTextResponse\0225\n\013sta"
  "tus_text\030\001 \001(\0132 .mavsdk.rpc.telemetry.St"
  "atusText\"\'\n%SubscribeActuatorControlTarg"
  "etRequest\"m\n\035ActuatorControlTargetRespon"
  "se\022L\n\027actuator_control_target\030\001 \001(\0132+.ma"
  "vsdk.rpc.telemetry.ActuatorControlTarget"
  "\"&\n$SubscribeActuatorOutputStatusRequest"
  "\"j\n\034ActuatorOutputStatusResponse\022J\n\026actu"
  "ator_output_status\030\001 \001(\0132*.mavsdk.rpc.te"
  "lemetry.ActuatorOutputStatus\"\032\n\030Subscrib"
  "eOdometryRequest\"D\n\020OdometryResponse\0220\n\010"
  "odometry\030\001 \001(\0132\036.mavsdk.rpc.telemetry.Od"
  "ometry\"%\n#SubscribePositionVelocityNedRe"
  "quest\"g\n\033PositionVelocityNedResponse\022H\n\025"
  "position_velocity_ned\030\001 \001(\0132).mavsdk.rpc"
  ".telemetry.PositionVelocityNed\"\035\n\033Subscr"
  "ibeGroundTruthRequest\"N\n\023GroundTruthResp"
  "onse\0227\n\014ground_truth\030\001 \001(\0132!.mavsdk.rpc."
  "telemetry.GroundTruth\"\"\n SubscribeFixedw"
  "ingMetricsRequest\"]\n\030FixedwingMetricsRes"
  "ponse\022A\n\021fixedwing_metrics\030\001 \001(\0132&.mavsd"
  "k.rpc.telemetry.FixedwingMetrics\"\025\n\023Subs"
  "cribeImuRequest\"5\n\013ImuResponse\022&\n\003imu\030\001 "
  "\001(\0132\031.mavsdk.rpc.telemetry.Imu\"\033\n\031Subscr"
  "ibeScaledImuRequest\";\n\021ScaledImuResponse"
  "\022&\n\003imu\030\001 \001(\0132\031.mavsdk.rpc.telemetry.Imu"
  "\"\030\n\026SubscribeRawImuRequest\"8\n\016RawImuResp"
  "onse\022&\n\003imu\030\001 \001(\0132\031.mavsdk.rpc.telemetry"
  ".Imu\"\035\n\033SubscribeHealthAllOkRequest\"/\n\023H"
  "ealthAllOkResponse\022\030\n\020is_health_all_ok\030\001"
  " \001(\010\"\037\n\035SubscribeUnixEpochTimeRequest\"(\n"
  "\025UnixEpochTimeResponse\022\017\n\007time_us\030\001 \001(\004\""
  " \n\036SubscribeDistanceSensorRequest\"W\n\026Dis"
  "tanceSensorResponse\022=\n\017distance_sensor\030\001"
  " \001(\0132$.mavsdk.rpc.telemetry.DistanceSens"
  "or\" \n\036SubscribeScaledPressureRequest\"W\n\026"
  "ScaledPressureResponse\022=\n\017scaled_pressur"
  "e\030\001 \001(\0132$.mavsdk.rpc.telemetry.ScaledPre"
  "ssure\")\n\026SetRatePositionRequest\022\017\n\007rate_"
  "hz\030\001 \001(\001\"Z\n\027SetRatePositionResponse\022\?\n\020t"
  "elemetry_result\030\001 \001(\0132%.mavsdk.rpc.telem"
  "etry.TelemetryResult\"%\n\022SetRateHomeReque"
  "st\022\017\n\007rate_hz\030\001 \001(\001\"V\n\023SetRateHomeRespon"
  "se\022\?\n\020telemetry_result\030\001 \001(\0132%.mavsdk.rp"
  "c.telemetry.TelemetryResult\"&\n\023SetRateIn"
  "AirRequest\022\017\n\007rate_hz\030\001 \001(\001\"W\n\024SetRateIn"
  "AirResponse\022\?\n\020telemetry_result\030\001 \001(\0132%."
  "mavsdk.rpc.telemetry.TelemetryResult\",\n\031"
  "SetRateLandedStateRequest\022\017\n\007rate_hz\030\001 \001"
  "(\001\"]\n\032SetRateLandedStateResponse\022\?\n\020tele"
  "metry_result\030\001 \001(\0132%.mavsdk.rpc.telemetr"
  "y.TelemetryResult\")\n\026SetRateAttitudeRequ"
  "est\022\017\n\007rate_hz\030\001 \001(\001\"Z\n\027SetRateAttitudeR"
  "esponse\022\?\n\020telemetry_result\030\001 \001(\0132%.mavs"
  "dk.rpc.telemetry.TelemetryResult\"<\n)SetR"
  "ateAttitudeAngularVelocityBodyRequest\022\017\n"
  "\007rate_hz\030\001 \001(\001\"m\n*SetRateAttitudeAngular"
  "VelocityBodyResponse\022\?\n\020telemetry_result"
  "\030\001 \001(\0132%.mavsdk.rpc.telemetry.TelemetryR"
  "esult\"9\n&SetRateCameraAttitudeQuaternion"
  "Request\022\017\n\007rate_hz\030\001 \001(\001\"j\n\'SetRateCamer"
  "aAttitudeQuaternionResponse\022\?\n\020telemetry"
  "_result\030\001 \001(\0132%.mavsdk.rpc.telemetry.Tel"
  "emetryResult\"/\n\034SetRateCameraAttitudeReq"
  "uest\022\017\n\007rate_hz\030\001 \001(\001\"`\n\035SetRateCameraAt"
  "titudeResponse\022\?\n\020telemetry_result\030\001 \001(\013"
  "2%.mavsdk.rpc.telemetry.TelemetryResult\""
  ",\n\031SetRateVelocityNedRequest\022\017\n\007rate_hz\030"
  "\001 \001(\001\"]\n\032SetRateVelocityNedResponse\022\?\n\020t"
  "elemetry_result\030\001 \001(\0132%.mavsdk.rpc.telem"
  "etry.TelemetryResult\"(\n\025SetRateGpsInfoRe"
  "quest\022\017\n\007rate_hz\030\001 \001(\001\"Y\n\026SetRateGpsInfo"
  "Response\022\?\n\020telemetry_result\030\001 \001(\0132%.mav"
  "sdk.rpc.telemetry.TelemetryResult\"\'\n\024Set"
  "RateRawGpsRequest\022\017\n\007rate_hz\030\001 \001(\001\"(\n\025Se"
  "tRateBatteryRequest\022\017\n\007rate_hz\030\001 \001(\001\"Y\n\026"
  "SetRateBatteryResponse\022\?\n\020telemetry_resu"
  "lt\030\001 \001(\0132%.mavsdk.rpc.telemetry.Telemetr"
  "yResult\")\n\026SetRateRcStatusRequest\022\017\n\007rat"
  "e_hz\030\001 \001(\001\"Z\n\027SetRateRcStatusResponse\022\?\n"
  "\020telemetry_result\030\001 \001(\0132%.mavsdk.rpc.tel"
  "emetry.TelemetryResult\"6\n#SetRateActuato"
  "rControlTargetRequest\022\017\n\007rate_hz\030\001 \001(\001\"g"
  "\n$SetRateActuatorControlTargetResponse\022\?"
  "\n\020telemetry_result\030\001 \001(\0132%.mavsdk.rpc.te"
  "lemetry.TelemetryResult\"5\n\"SetRateActuat"
  "orOutputStatusRequest\022\017\n\007rate_hz\030\001 \001(\001\"f"
  "\n#SetRateActuatorOutputStatusResponse\022\?\n"
  "\020telemetry_result\030\001 \001(\0132%.mavsdk.rpc.tel"
  "emetry.TelemetryResult\")\n\026SetRateOdometr"
  "yRequest\022\017\n\007rate_hz\030\001 \001(\001\"Z\n\027SetRateOdom"
  "etryResponse\022\?\n\020telemetry_result\030\001 \001(\0132%"
  ".mavsdk.rpc.telemetry.TelemetryResult\"4\n"
  "!SetRatePositionVelocityNedRequest\022\017\n\007ra"
  "te_hz\030\001 \001(\001\"e\n\"SetRatePositionVelocityNe"
  "dResponse\022\?\n\020telemetry_result\030\001 \001(\0132%.ma"
  "vsdk.rpc.telemetry.TelemetryResult\",\n\031Se"
  "tRateGroundTruthRequest\022\017\n\007rate_hz\030\001 \001(\001"
  "\"]\n\032SetRateGroundTruthResponse\022\?\n\020teleme"
  "try_result\030\001 \001(\0132%.mavsdk.rpc.telemetry."
  "TelemetryResult\"1\n\036SetRateFixedwingMetri"
  "csRequest\022\017\n\007rate_hz\030\001 \001(\001\"b\n\037SetRateFix"
  "edwingMetricsResponse\022\?\n\020telemetry_resul"
  "t\030\001 \001(\0132%.mavsdk.rpc.telemetry.Telemetry"
  "Result\"$\n\021SetRateImuRequest\022\017\n\007rate_hz\030\001"
  " \001(\001\"U\n\022SetRateImuResponse\022\?\n\020telemetry_"
  "result\030\001 \001(\0132%.mavsdk.rpc.telemetry.Tele"
  "metryResult\"*\n\027SetRateScaledImuRequest\022\017"
  "\n\007rate_hz\030\001 \001(\001\"[\n\030SetRateScaledImuRespo"
  "nse\022\?\n\020telemetry_result\030\001 \001(\0132%.mavsdk.r"
  "pc.telemetry.TelemetryResult\"\'\n\024SetRateR"
  "awImuRequest\022\017\n\007rate_hz\030\001 \001(\001\"X\n\025SetRate"
  "RawImuResponse\022\?\n\020telemetry_result\030\001 \001(\013"
  "2%.mavsdk.rpc.telemetry.TelemetryResult\""
  ".\n\033SetRateUnixEpochTimeRequest\022\017\n\007rate_h"
  "z\030\001 \001(\001\"_\n\034SetRateUnixEpochTimeResponse\022"
  "\?\n\020telemetry_result\030\001 \001(\0132%.mavsdk.rpc.t"
  "elemetry.TelemetryResult\"/\n\034SetRateDista"
  "nceSensorRequest\022\017\n\007rate_hz\030\001 \001(\001\"`\n\035Set"
  "RateDistanceSensorResponse\022\?\n\020telemetry_"
  "result\030\001 \001(\0132%.mavsdk.rpc.telemetry.Tele"
  "metryResult\"\033\n\031GetGpsGlobalOriginRequest"
  "\"\237\001\n\032GetGpsGlobalOriginResponse\022\?\n\020telem"
  "etry_result\030\001 \001(\0132%.mavsdk.rpc.telemetry"
  ".TelemetryResult\022@\n\021gps_global_origin\030\002 "
  "\001(\0132%.mavsdk.rpc.telemetry.GpsGlobalOrig"
  "in\"\225\001\n\010Position\022\035\n\014latitude_deg\030\001 \001(\001B\007\202"
  "\265\030\003NaN\022\036\n\rlongitude_deg\030\002 \001(\001B\007\202\265\030\003NaN\022$"
  "\n\023absolute_altitude_m\030\003 \001(\002B\007\202\265\030\003NaN\022$\n\023"
  "relative_altitude_m\030\004 \001(\002B\007\202\265\030\003NaN\"r\n\nQu"
  "aternion\022\022\n\001w\030\001 \001(\002B\007\202\265\030\003NaN\022\022\n\001x\030\002 \001(\002B"
  "\007\202\265\030\003NaN\022\022\n\001y\030\003 \001(\002B\007\202\265\030\003NaN\022\022\n\001z\030\004 \001(\002B"
  "\007\202\265\030\003NaN\022\024\n\014timestamp_us\030\005 \001(\004\"s\n\nEulerA"
  "ngle\022\031\n\010roll_deg\030\001 \001(\002B\007\202\265\030\003NaN\022\032\n\tpitch"
  "_deg\030\002 \001(\002B\007\202\265\030\003NaN\022\030\n\007yaw_deg\030\003 \001(\002B\007\202\265"
  "\030\003NaN\022\024\n\014timestamp_us\030\004 \001(\004\"l\n\023AngularVe"
  "locityBody\022\033\n\nroll_rad_s\030\001 \001(\002B\007\202\265\030\003NaN\022"
  "\034\n\013pitch_rad_s\030\002 \001(\002B\007\202\265\030\003NaN\022\032\n\tyaw_rad"
  "_s\030\003 \001(\002B\007\202\265\030\003NaN\"Y\n\007GpsInfo\022\035\n\016num_sate"
  "llites\030\001 \001(\005B\005\202\265\030\0010\022/\n\010fix_type\030\002 \001(\0162\035."
  "mavsdk.rpc.telemetry.FixType\"\337\002\n\006RawGps\022"
  "\024\n\014timestamp_us\030\001 \001(\004\022\024\n\014latitude_deg\030\002 "
  "\001(\001\022\025\n\rlongitude_deg\030\003 \001(\001\022\033\n\023absolute_a"
  "ltitude_m\030\004 \001(\002\022\014\n\004hdop\030\005 \001(\002\022\014\n\004vdop\030\006 "
  "\001(\002\022\024\n\014velocity_m_s\030\007 \001(\002\022\017\n\007cog_deg\030\010 \001"
  "(\002\022\034\n\024altitude_ellipsoid_m\030\t \001(\002\022 \n\030hori"
  "zontal_uncertainty_m\030\n \001(\002\022\036\n\026vertical_u"
  "ncertainty_m\030\013 \001(\002\022 \n\030velocity_uncertain"
  "ty_m_s\030\014 \001(\002\022\037\n\027heading_uncertainty_deg\030"
  "\r \001(\002\022\017\n\007yaw_deg\030\016 \001(\002\"I\n\007Battery\022\032\n\tvol"
  "tage_v\030\001 \001(\002B\007\202\265\030\003NaN\022\"\n\021remaining_perce"
  "nt\030\002 \001(\002B\007\202\265\030\003NaN\"\306\002\n\006Health\022.\n\033is_gyrom"
  "eter_calibration_ok\030\001 \001(\010B\t\202\265\030\005false\0222\n\037"
  "is_accelerometer_calibration_ok\030\002 \001(\010B\t\202"
  "\265\030\005false\0221\n\036is_magnetometer_calibration_"
  "ok\030\003 \001(\010B\t\202\265\030\005false\022*\n\027is_level_calibrat"
  "ion_ok\030\004 \001(\010B\t\202\265\030\005false\022\'\n\024is_local_posi"
  "tion_ok\030\005 \001(\010B\t\202\265\030\005false\022(\n\025is_global_po"
  "sition_ok\030\006 \001(\010B\t\202\265\030\005false\022&\n\023is_home_po"
  "sition_ok\030\007 \001(\010B\t\202\265\030\005false\"|\n\010RcStatus\022%"
  "\n\022was_available_once\030\001 \001(\010B\t\202\265\030\005false\022\037\n"
  "\014is_available\030\002 \001(\010B\t\202\265\030\005false\022(\n\027signal"
  "_strength_percent\030\003 \001(\002B\007\202\265\030\003NaN\"N\n\nStat"
  "usText\0222\n\004type\030\001 \001(\0162$.mavsdk.rpc.teleme"
  "try.StatusTextType\022\014\n\004text\030\002 \001(\t\"\?\n\025Actu"
  "atorControlTarget\022\024\n\005group\030\001 \001(\005B\005\202\265\030\0010\022"
  "\020\n\010controls\030\002 \003(\002\"\?\n\024ActuatorOutputStatu"
  "s\022\025\n\006active\030\001 \001(\rB\005\202\265\030\0010\022\020\n\010actuator\030\002 \003"
  "(\002\"\'\n\nCovariance\022\031\n\021covariance_matrix\030\001 "
  "\003(\002\";\n\014VelocityBody\022\r\n\005x_m_s\030\001 \001(\002\022\r\n\005y_"
  "m_s\030\002 \001(\002\022\r\n\005z_m_s\030\003 \001(\002\"5\n\014PositionBody"
  "\022\013\n\003x_m\030\001 \001(\002\022\013\n\003y_m\030\002 \001(\002\022\013\n\003z_m\030\003 \001(\002\""
  "\354\004\n\010Odometry\022\021\n\ttime_usec\030\001 \001(\004\0229\n\010frame"
  "_id\030\002 \001(\0162\'.mavsdk.rpc.telemetry.Odometr"
  "y.MavFrame\022\?\n\016child_frame_id\030\003 \001(\0162\'.mav"
  "sdk.rpc.telemetry.Odometry.MavFrame\0229\n\rp"
  "osition_body\030\004 \001(\0132\".mavsdk.rpc.telemetr"
  "y.PositionBody\022+\n\001q\030\005 \001(\0132 .mavsdk.rpc.t"
  "elemetry.Quaternion\0229\n\rvelocity_body\030\006 \001"
  "(\0132\".mavsdk.rpc.telemetry.VelocityBody\022H"
  "\n\025angular_velocity_body\030\007 \001(\0132).mavsdk.r"
  "pc.telemetry.AngularVelocityBody\0229\n\017pose"
  "_covariance\030\010 \001(\0132 .mavsdk.rpc.telemetry"
  ".Covariance\022=\n\023velocity_covariance\030\t \001(\013"
  "2 .mavsdk.rpc.telemetry.Covariance\"j\n\010Ma"
  "vFrame\022\023\n\017MAV_FRAME_UNDEF\020\000\022\026\n\022MAV_FRAME"
  "_BODY_NED\020\010\022\030\n\024MAV_FRAME_VISION_NED\020\020\022\027\n"
  "\023MAV_FRAME_ESTIM_NED\020\022\"\177\n\016DistanceSensor"
  "\022#\n\022minimum_distance_m\030\001 \001(\002B\007\202\265\030\003NaN\022#\n"
  "\022maximum_distance_m\030\002 \001(\002B\007\202\265\030\003NaN\022#\n\022cu"
  "rrent_distance_m\030\003 \001(\002B\007\202\265\030\003NaN\"\260\001\n\016Scal"
  "edPressure\022\024\n\014timestamp_us\030\001 \001(\004\022\035\n\025abso"
  "lute_pressure_hpa\030\002 \001(\002\022!\n\031differential_"
  "pressure_hpa\030\003 \001(\002\022\027\n\017temperature_deg\030\004 "
  "\001(\002\022-\n%differential_pressure_temperature"
  "_deg\030\005 \001(\002\"Y\n\013PositionNed\022\030\n\007north_m\030\001 \001"
  "(\002B\007\202\265\030\003NaN\022\027\n\006east_m\030\002 \001(\002B\007\202\265\030\003NaN\022\027\n\006"
  "down_m\030\003 \001(\002B\007\202\265\030\003NaN\"D\n\013VelocityNed\022\021\n\t"
  "north_m_s\030\001 \001(\002\022\020\n\010east_m_s\030\002 \001(\002\022\020\n\010dow"
  "n_m_s\030\003 \001(\002\"\177\n\023PositionVelocityNed\0223\n\010po"
  "sition\030\001 \001(\0132!.mavsdk.rpc.telemetry.Posi"
  "tionNed\0223\n\010velocity\030\002 \001(\0132!.mavsdk.rpc.t"
  "elemetry.VelocityNed\"r\n\013GroundTruth\022\035\n\014l"
  "atitude_deg\030\001 \001(\001B\007\202\265\030\003NaN\022\036\n\rlongitude_"
  "deg\030\002 \001(\001B\007\202\265\030\003NaN\022$\n\023absolute_altitude_"
  "m\030\003 \001(\002B\007\202\265\030\003NaN\"x\n\020FixedwingMetrics\022\035\n\014"
  "airspeed_m_s\030\001 \001(\002B\007\202\265\030\003NaN\022$\n\023throttle_"
  "percentage\030\002 \001(\002B\007\202\265\030\003NaN\022\037\n\016climb_rate_"
  "m_s\030\003 \001(\002B\007\202\265\030\003NaN\"i\n\017AccelerationFrd\022\035\n"
  "\014forward_m_s2\030\001 \001(\002B\007\202\265\030\003NaN\022\033\n\nright_m_"
  "s2\030\002 \001(\002B\007\202\265\030\003NaN\022\032\n\tdown_m_s2\030\003 \001(\002B\007\202\265"
  "\030\003NaN\"o\n\022AngularVelocityFrd\022\036\n\rforward_r"
  "ad_s\030\001 \001(\002B\007\202\265\030\003NaN\022\034\n\013right_rad_s\030\002 \001(\002"
  "B\007\202\265\030\003NaN\022\033\n\ndown_rad_s\030\003 \001(\002B\007\202\265\030\003NaN\"m"
  "\n\020MagneticFieldFrd\022\036\n\rforward_gauss\030\001 \001("
  "\002B\007\202\265\030\003NaN\022\034\n\013right_gauss\030\002 \001(\002B\007\202\265\030\003NaN"
  "\022\033\n\ndown_gauss\030\003 \001(\002B\007\202\265\030\003NaN\"\213\002\n\003Imu\022\?\n"
  "\020acceleration_frd\030\001 \001(\0132%.mavsdk.rpc.tel"
  "emetry.AccelerationFrd\022F\n\024angular_veloci"
  "ty_frd\030\002 \001(\0132(.mavsdk.rpc.telemetry.Angu"
  "larVelocityFrd\022B\n\022magnetic_field_frd\030\003 \001"
  "(\0132&.mavsdk.rpc.telemetry.MagneticFieldF"
  "rd\022!\n\020temperature_degc\030\004 \001(\002B\007\202\265\030\003NaN\022\024\n"
  "\014timestamp_us\030\005 \001(\004\"m\n\017GpsGlobalOrigin\022\035"
  "\n\014latitude_deg\030\001 \001(\001B\007\202\265\030\003NaN\022\036\n\rlongitu"
  "de_deg\030\002 \001(\001B\007\202\265\030\003NaN\022\033\n\naltitude_m\030\003 \001("
  "\002B\007\202\265\030\003NaN\"\241\002\n\017TelemetryResult\022<\n\006result"
  "\030\001 \001(\0162,.mavsdk.rpc.telemetry.TelemetryR"
  "esult.Result\022\022\n\nresult_str\030\002 \001(\t\"\273\001\n\006Res"
  "ult\022\022\n\016RESULT_UNKNOWN\020\000\022\022\n\016RESULT_SUCCES"
  "S\020\001\022\024\n\020RESULT_NO_SYSTEM\020\002\022\033\n\027RESULT_CONN"
  "ECTION_ERROR\020\003\022\017\n\013RESULT_BUSY\020\004\022\031\n\025RESUL"
  "T_COMMAND_DENIED\020\005\022\022\n\016RESULT_TIMEOUT\020\006\022\026"
  "\n\022RESULT_UNSUPPORTED\020\007*\244\001\n\007FixType\022\023\n\017FI"
  "X_TYPE_NO_GPS\020\000\022\023\n\017FIX_TYPE_NO_FIX\020\001\022\023\n\017"
  "FIX_TYPE_FIX_2D\020\002\022\023\n\017FIX_TYPE_FIX_3D\020\003\022\025"
  "\n\021FIX_TYPE_FIX_DGPS\020\004\022\026\n\022FIX_TYPE_RTK_FL"
  "OAT\020\005\022\026\n\022FIX_TYPE_RTK_FIXED\020\006*\206\003\n\nFlight"
  "Mode\022\027\n\023FLIGHT_MODE_UNKNOWN\020\000\022\025\n\021FLIGHT_"
  "MODE_READY\020\001\022\027\n\023FLIGHT_MODE_TAKEOFF\020\002\022\024\n"
  "\020FLIGHT_MODE_HOLD\020\003\022\027\n\023FLIGHT_MODE_MISSI"
  "ON\020\004\022 \n\034FLIGHT_MODE_RETURN_TO_LAUNCH\020\005\022\024"
  "\n\020FLIGHT_MODE_LAND\020\006\022\030\n\024FLIGHT_MODE_OFFB"
  "OARD\020\007\022\031\n\025FLIGHT_MODE_FOLLOW_ME\020\010\022\026\n\022FLI"
  "GHT_MODE_MANUAL\020\t\022\026\n\022FLIGHT_MODE_ALTCTL\020"
  "\n\022\026\n\022FLIGHT_MODE_POSCTL\020\013\022\024\n\020FLIGHT_MODE"
  "_ACRO\020\014\022\032\n\026FLIGHT_MODE_STABILIZED\020\r\022\031\n\025F"
  "LIGHT_MODE_RATTITUDE\020\016*\371\001\n\016StatusTextTyp"
  "e\022\032\n\026STATUS_TEXT_TYPE_DEBUG\020\000\022\031\n\025STATUS_"
  "TEXT_TYPE_INFO\020\001\022\033\n\027STATUS_TEXT_TYPE_NOT"
  "ICE\020\002\022\034\n\030STATUS_TEXT_TYPE_WARNING\020\003\022\032\n\026S"
  "TATUS_TEXT_TYPE_ERROR\020\004\022\035\n\031STATUS_TEXT_T"
  "YPE_CRITICAL\020\005\022\032\n\026STATUS_TEXT_TYPE_ALERT"
  "\020\006\022\036\n\032STATUS_TEXT_TYPE_EMERGENCY\020\007*\223\001\n\013L"
  "andedState\022\030\n\024LANDED_STATE_UNKNOWN\020\000\022\032\n\026"
  "LANDED_STATE_ON_GROUND\020\001\022\027\n\023LANDED_STATE"
  "_IN_AIR\020\002\022\033\n\027LANDED_STATE_TAKING_OFF\020\003\022\030"
  "\n\024LANDED_STATE_LANDING\020\0042\2473\n\020TelemetrySe"
  "rvice\022o\n\021SubscribePosition\022..mavsdk.rpc."
  "telemetry.SubscribePositionRequest\032&.mav"
  "sdk.rpc.telemetry.PositionResponse\"\0000\001\022c"
  "\n\rSubscribeHome\022*.mavsdk.rpc.telemetry.S"
  "ubscribeHomeRequest\032\".mavsdk.rpc.telemet"
  "ry.HomeResponse\"\0000\001\022f\n\016SubscribeInAir\022+."
  "mavsdk.rpc.telemetry.SubscribeInAirReque"
  "st\032#.mavsdk.rpc.telemetry.InAirResponse\""
  "\0000\001\022x\n\024SubscribeLandedState\0221.mavsdk.rpc"
  ".telemetry.SubscribeLandedStateRequest\032)"
  ".mavsdk.rpc.telemetry.LandedStateRespons"
  "e\"\0000\001\022f\n\016SubscribeArmed\022+.mavsdk.rpc.tel"
  "emetry.SubscribeArmedRequest\032#.mavsdk.rp"
  "c.telemetry.ArmedResponse\"\0000\001\022\215\001\n\033Subscr"
  "ibeAttitudeQuaternion\0228.mavsdk.rpc.telem"
  "etry.SubscribeAttitudeQuaternionRequest\032"
  "0.mavsdk.rpc.telemetry.AttitudeQuaternio"
  "nResponse\"\0000\001\022~\n\026SubscribeAttitudeEuler\022"
  "3.mavsdk.rpc.telemetry.SubscribeAttitude"
  "EulerRequest\032+.mavsdk.rpc.telemetry.Atti"
  "tudeEulerResponse\"\0000\001\022\250\001\n$SubscribeAttit"
  "udeAngularVelocityBody\022A.mavsdk.rpc.tele"
  "metry.SubscribeAttitudeAngularVelocityBo"
  "dyRequest\0329.mavsdk.rpc.telemetry.Attitud"
  "eAngularVelocityBodyResponse\"\0000\001\022\237\001\n!Sub"
  "scribeCameraAttitudeQuaternion\022>.mavsdk."
  "rpc.telemetry.SubscribeCameraAttitudeQua"
  "ternionRequest\0326.mavsdk.rpc.telemetry.Ca"
  "meraAttitudeQuaternionResponse\"\0000\001\022\220\001\n\034S"
  "ubscribeCameraAttitudeEuler\0229.mavsdk.rpc"
  ".telemetry.SubscribeCameraAttitudeEulerR"
  "equest\0321.mavsdk.rpc.telemetry.CameraAtti"
  "tudeEulerResponse\"\0000\001\022x\n\024SubscribeVeloci"
  "tyNed\0221.mavsdk.rpc.telemetry.SubscribeVe"
  "locityNedRequest\032).mavsdk.rpc.telemetry."
  "VelocityNedResponse\"\0000\001\022l\n\020SubscribeGpsI"
  "nfo\022-.mavsdk.rpc.telemetry.SubscribeGpsI"
  "nfoRequest\032%.mavsdk.rpc.telemetry.GpsInf"
  "oResponse\"\0000\001\022i\n\017SubscribeRawGps\022,.mavsd"
  "k.rpc.telemetry.SubscribeRawGpsRequest\032$"
  ".mavsdk.rpc.telemetry.RawGpsResponse\"\0000\001"
  "\022l\n\020SubscribeBattery\022-.mavsdk.rpc.teleme"
  "try.SubscribeBatteryRequest\032%.mavsdk.rpc"
  ".telemetry.BatteryResponse\"\0000\001\022u\n\023Subscr"
  "ibeFlightMode\0220.mavsdk.rpc.telemetry.Sub"
  "scribeFlightModeRequest\032(.mavsdk.rpc.tel"
  "emetry.FlightModeResponse\"\0000\001\022i\n\017Subscri"
  "beHealth\022,.mavsdk.rpc.telemetry.Subscrib"
  "eHealthRequest\032$.mavsdk.rpc.telemetry.He"
  "althResponse\"\0000\001\022o\n\021SubscribeRcStatus\022.."
  "mavsdk.rpc.telemetry.SubscribeRcStatusRe"
  "quest\032&.mavsdk.rpc.telemetry.RcStatusRes"
  "ponse\"\0000\001\022u\n\023SubscribeStatusText\0220.mavsd"
  "k.rpc.telemetry.SubscribeStatusTextReque"
  "st\032(.mavsdk.rpc.telemetry.StatusTextResp"
  "onse\"\0000\001\022\226\001\n\036SubscribeActuatorControlTar"
  "get\022;.mavsdk.rpc.telemetry.SubscribeActu"
  "atorControlTargetRequest\0323.mavsdk.rpc.te"
  "lemetry.ActuatorControlTargetResponse\"\0000"
  "\001\022\223\001\n\035SubscribeActuatorOutputStatus\022:.ma"
  "vsdk.rpc.telemetry.SubscribeActuatorOutp"
  "utStatusRequest\0322.mavsdk.rpc.telemetry.A"
  "ctuatorOutputStatusResponse\"\0000\001\022o\n\021Subsc"
  "ribeOdometry\022..mavsdk.rpc.telemetry.Subs"
  "cribeOdometryRequest\032&.mavsdk.rpc.teleme"
  "try.OdometryResponse\"\0000\001\022\220\001\n\034SubscribePo"
  "sitionVelocityNed\0229.mavsdk.rpc.telemetry"
  ".SubscribePositionVelocityNedRequest\0321.m"
  "avsdk.rpc.telemetry.PositionVelocityNedR"
  "esponse\"\0000\001\022x\n\024SubscribeGroundTruth\0221.ma"
  "vsdk.rpc.telemetry.SubscribeGroundTruthR"
  "equest\032).mavsdk.rpc.telemetry.GroundTrut"
  "hResponse\"\0000\001\022\207\001\n\031SubscribeFixedwingMetr"
  "ics\0226.mavsdk.rpc.telemetry.SubscribeFixe"
  "dwingMetricsRequest\032..mavsdk.rpc.telemet"
  "ry.FixedwingMetricsResponse\"\0000\001\022`\n\014Subsc"
  "ribeImu\022).mavsdk.rpc.telemetry.Subscribe"
  "ImuRequest\032!.mavsdk.rpc.telemetry.ImuRes"
  "ponse\"\0000\001\022r\n\022SubscribeScaledImu\022/.mavsdk"
  ".rpc.telemetry.SubscribeScaledImuRequest"
  "\032\'.mavsdk.rpc.telemetry.ScaledImuRespons"
  "e\"\0000\001\022i\n\017SubscribeRawImu\022,.mavsdk.rpc.te"
  "lemetry.SubscribeRawImuRequest\032$.mavsdk."
  "rpc.telemetry.RawImuResponse\"\0000\001\022x\n\024Subs"
  "cribeHealthAllOk\0221.mavsdk.rpc.telemetry."
  "SubscribeHealthAllOkRequest\032).mavsdk.rpc"
  ".telemetry.HealthAllOkResponse\"\0000\001\022~\n\026Su"
  "bscribeUnixEpochTime\0223.mavsdk.rpc.teleme"
  "try.SubscribeUnixEpochTimeRequest\032+.mavs"
  "dk.rpc.telemetry.UnixEpochTimeResponse\"\000"
  "0\001\022\201\001\n\027SubscribeDistanceSensor\0224.mavsdk."
  "rpc.telemetry.SubscribeDistanceSensorReq"
  "uest\032,.mavsdk.rpc.telemetry.DistanceSens"
  "orResponse\"\0000\001\022\201\001\n\027SubscribeScaledPressu"
  "re\0224.mavsdk.rpc.telemetry.SubscribeScale"
  "dPressureRequest\032,.mavsdk.rpc.telemetry."
  "ScaledPressureResponse\"\0000\001\022p\n\017SetRatePos"
  "ition\022,.mavsdk.rpc.telemetry.SetRatePosi"
  "tionRequest\032-.mavsdk.rpc.telemetry.SetRa"
  "tePositionResponse\"\000\022d\n\013SetRateHome\022(.ma"
  "vsdk.rpc.telemetry.SetRateHomeRequest\032)."
  "mavsdk.rpc.telemetry.SetRateHomeResponse"
  "\"\000\022g\n\014SetRateInAir\022).mavsdk.rpc.telemetr"
  "y.SetRateInAirRequest\032*.mavsdk.rpc.telem"
  "etry.SetRateInAirResponse\"\000\022y\n\022SetRateLa"
  "ndedState\022/.mavsdk.rpc.telemetry.SetRate"
  "LandedStateRequest\0320.mavsdk.rpc.telemetr"
  "y.SetRateLandedStateResponse\"\000\022p\n\017SetRat"
  "eAttitude\022,.mavsdk.rpc.telemetry.SetRate"
  "AttitudeRequest\032-.mavsdk.rpc.telemetry.S"
  "etRateAttitudeResponse\"\000\022\202\001\n\025SetRateCame"
  "raAttitude\0222.mavsdk.rpc.telemetry.SetRat"
  "eCameraAttitudeRequest\0323.mavsdk.rpc.tele"
  "metry.SetRateCameraAttitudeResponse\"\000\022y\n"
  "\022SetRateVelocityNed\022/.mavsdk.rpc.telemet"
  "ry.SetRateVelocityNedRequest\0320.mavsdk.rp"
  "c.telemetry.SetRateVelocityNedResponse\"\000"
  "\022m\n\016SetRateGpsInfo\022+.mavsdk.rpc.telemetr"
  "y.SetRateGpsInfoRequest\032,.mavsdk.rpc.tel"
  "emetry.SetRateGpsInfoResponse\"\000\022m\n\016SetRa"
  "teBattery\022+.mavsdk.rpc.telemetry.SetRate"
  "BatteryRequest\032,.mavsdk.rpc.telemetry.Se"
  "tRateBatteryResponse\"\000\022p\n\017SetRateRcStatu"
  "s\022,.mavsdk.rpc.telemetry.SetRateRcStatus"
  "Request\032-.mavsdk.rpc.telemetry.SetRateRc"
  "StatusResponse\"\000\022\227\001\n\034SetRateActuatorCont"
  "rolTarget\0229.mavsdk.rpc.telemetry.SetRate"
  "ActuatorControlTargetRequest\032:.mavsdk.rp"
  "c.telemetry.SetRateActuatorControlTarget"
  "Response\"\000\022\224\001\n\033SetRateActuatorOutputStat"
  "us\0228.mavsdk.rpc.telemetry.SetRateActuato"
  "rOutputStatusRequest\0329.mavsdk.rpc.teleme"
  "try.SetRateActuatorOutputStatusResponse\""
  "\000\022p\n\017SetRateOdometry\022,.mavsdk.rpc.teleme"
  "try.SetRateOdometryRequest\032-.mavsdk.rpc."
  "telemetry.SetRateOdometryResponse\"\000\022\221\001\n\032"
  "SetRatePositionVelocityNed\0227.mavsdk.rpc."
  "telemetry.SetRatePositionVelocityNedRequ"
  "est\0328.mavsdk.rpc.telemetry.SetRatePositi"
  "onVelocityNedResponse\"\000\022y\n\022SetRateGround"
  "Truth\022/.mavsdk.rpc.telemetry.SetRateGrou"
  "ndTruthRequest\0320.mavsdk.rpc.telemetry.Se"
  "tRateGroundTruthResponse\"\000\022\210\001\n\027SetRateFi"
  "xedwingMetrics\0224.mavsdk.rpc.telemetry.Se"
  "tRateFixedwingMetricsRequest\0325.mavsdk.rp"
  "c.telemetry.SetRateFixedwingMetricsRespo"
  "nse\"\000\022a\n\nSetRateImu\022\'.mavsdk.rpc.telemet"
  "ry.SetRateImuRequest\032(.mavsdk.rpc.teleme"
  "try.SetRateImuResponse\"\000\022s\n\020SetRateScale"
  "dImu\022-.mavsdk.rpc.telemetry.SetRateScale"
  "dImuRequest\032..mavsdk.rpc.telemetry.SetRa"
  "teScaledImuResponse\"\000\022j\n\rSetRateRawImu\022*"
  ".mavsdk.rpc.telemetry.SetRateRawImuReque"
  "st\032+.mavsdk.rpc.telemetry.SetRateRawImuR"
  "esponse\"\000\022\177\n\024SetRateUnixEpochTime\0221.mavs"
  "dk.rpc.telemetry.SetRateUnixEpochTimeReq"
  "uest\0322.mavsdk.rpc.telemetry.SetRateUnixE"
  "pochTimeResponse\"\000\022\202\001\n\025SetRateDistanceSe"
  "nsor\0222.mavsdk.rpc.telemetry.SetRateDista"
  "nceSensorRequest\0323.mavsdk.rpc.telemetry."
  "SetRateDistanceSensorResponse\"\000\022y\n\022GetGp"
  "sGlobalOrigin\022/.mavsdk.rpc.telemetry.Get"
  "GpsGlobalOriginRequest\0320.mavsdk.rpc.tele"
  "metry.GetGpsGlobalOriginResponse\"\000B%\n\023io"
  ".mavsdk.telemetryB\016TelemetryProtob\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_telemetry_2ftelemetry_2eproto_deps[1] = {
  &::descriptor_table_mavsdk_5foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_telemetry_2ftelemetry_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_telemetry_2ftelemetry_2eproto = {
  false, false, 18801, descriptor_table_protodef_telemetry_2ftelemetry_2eproto, "telemetry/telemetry.proto", 
  &descriptor_table_telemetry_2ftelemetry_2eproto_once, descriptor_table_telemetry_2ftelemetry_2eproto_deps, 1, 140,
  schemas, file_default_instances, TableStruct_telemetry_2ftelemetry_2eproto::offsets,
  file_level_metadata_telemetry_2ftelemetry_2eproto, file_level_enum_descriptors_telemetry_2ftelemetry_2eproto, file_level_service_descriptors_telemetry_2ftelemetry_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_telemetry_2ftelemetry_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_telemetry_2ftelemetry_2eproto);
  return descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_telemetry_2ftelemetry_2eproto(&descriptor_table_telemetry_2ftelemetry_2eproto);
namespace mavsdk {
namespace rpc {
namespace telemetry {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Odometry_MavFrame_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_telemetry_2ftelemetry_2eproto);
  return file_level_enum_descriptors_telemetry_2ftelemetry_2eproto[0];
}
bool Odometry_MavFrame_IsValid(int value) {
  switch (value) {
    case 0:
    case 8:
    case 16:
    case 18:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Odometry_MavFrame Odometry::MAV_FRAME_UNDEF;
constexpr Odometry_MavFrame Odometry::MAV_FRAME_BODY_NED;
constexpr Odometry_MavFrame Odometry::MAV_FRAME_VISION_NED;
constexpr Odometry_MavFrame Odometry::MAV_FRAME_ESTIM_NED;
constexpr Odometry_MavFrame Odometry::MavFrame_MIN;
constexpr Odometry_MavFrame Odometry::MavFrame_MAX;
constexpr int Odometry::MavFrame_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TelemetryResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_telemetry_2ftelemetry_2eproto);
  return file_level_enum_descriptors_telemetry_2ftelemetry_2eproto[1];
}
bool TelemetryResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TelemetryResult_Result TelemetryResult::RESULT_UNKNOWN;
constexpr TelemetryResult_Result TelemetryResult::RESULT_SUCCESS;
constexpr TelemetryResult_Result TelemetryResult::RESULT_NO_SYSTEM;
constexpr TelemetryResult_Result TelemetryResult::RESULT_CONNECTION_ERROR;
constexpr TelemetryResult_Result TelemetryResult::RESULT_BUSY;
constexpr TelemetryResult_Result TelemetryResult::RESULT_COMMAND_DENIED;
constexpr TelemetryResult_Result TelemetryResult::RESULT_TIMEOUT;
constexpr TelemetryResult_Result TelemetryResult::RESULT_UNSUPPORTED;
constexpr TelemetryResult_Result TelemetryResult::Result_MIN;
constexpr TelemetryResult_Result TelemetryResult::Result_MAX;
constexpr int TelemetryResult::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FixType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_telemetry_2ftelemetry_2eproto);
  return file_level_enum_descriptors_telemetry_2ftelemetry_2eproto[2];
}
bool FixType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlightMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_telemetry_2ftelemetry_2eproto);
  return file_level_enum_descriptors_telemetry_2ftelemetry_2eproto[3];
}
bool FlightMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusTextType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_telemetry_2ftelemetry_2eproto);
  return file_level_enum_descriptors_telemetry_2ftelemetry_2eproto[4];
}
bool StatusTextType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LandedState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_telemetry_2ftelemetry_2eproto);
  return file_level_enum_descriptors_telemetry_2ftelemetry_2eproto[5];
}
bool LandedState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SubscribePositionRequest::_Internal {
 public:
};

SubscribePositionRequest::SubscribePositionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribePositionRequest)
}
SubscribePositionRequest::SubscribePositionRequest(const SubscribePositionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribePositionRequest)
}

void SubscribePositionRequest::SharedCtor() {
}

SubscribePositionRequest::~SubscribePositionRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribePositionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribePositionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribePositionRequest::ArenaDtor(void* object) {
  SubscribePositionRequest* _this = reinterpret_cast< SubscribePositionRequest* >(object);
  (void)_this;
}
void SubscribePositionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribePositionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribePositionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribePositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribePositionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribePositionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribePositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribePositionRequest)
  return target;
}

size_t SubscribePositionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribePositionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribePositionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribePositionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribePositionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribePositionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribePositionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribePositionRequest)
    MergeFrom(*source);
  }
}

void SubscribePositionRequest::MergeFrom(const SubscribePositionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribePositionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribePositionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribePositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribePositionRequest::CopyFrom(const SubscribePositionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribePositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribePositionRequest::IsInitialized() const {
  return true;
}

void SubscribePositionRequest::InternalSwap(SubscribePositionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribePositionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PositionResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::Position& position(const PositionResponse* msg);
};

const ::mavsdk::rpc::telemetry::Position&
PositionResponse::_Internal::position(const PositionResponse* msg) {
  return *msg->position_;
}
PositionResponse::PositionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.PositionResponse)
}
PositionResponse::PositionResponse(const PositionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::mavsdk::rpc::telemetry::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.PositionResponse)
}

void PositionResponse::SharedCtor() {
position_ = nullptr;
}

PositionResponse::~PositionResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.PositionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PositionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void PositionResponse::ArenaDtor(void* object) {
  PositionResponse* _this = reinterpret_cast< PositionResponse* >(object);
  (void)_this;
}
void PositionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PositionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.PositionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.Position position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.PositionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Position position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.PositionResponse)
  return target;
}

size_t PositionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.PositionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Position position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.PositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.PositionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.PositionResponse)
    MergeFrom(*source);
  }
}

void PositionResponse::MergeFrom(const PositionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.PositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::mavsdk::rpc::telemetry::Position::MergeFrom(from._internal_position());
  }
}

void PositionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.PositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionResponse::CopyFrom(const PositionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.PositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionResponse::IsInitialized() const {
  return true;
}

void PositionResponse::InternalSwap(PositionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(position_, other->position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeHomeRequest::_Internal {
 public:
};

SubscribeHomeRequest::SubscribeHomeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeHomeRequest)
}
SubscribeHomeRequest::SubscribeHomeRequest(const SubscribeHomeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeHomeRequest)
}

void SubscribeHomeRequest::SharedCtor() {
}

SubscribeHomeRequest::~SubscribeHomeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeHomeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeHomeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeHomeRequest::ArenaDtor(void* object) {
  SubscribeHomeRequest* _this = reinterpret_cast< SubscribeHomeRequest* >(object);
  (void)_this;
}
void SubscribeHomeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeHomeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeHomeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeHomeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeHomeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeHomeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeHomeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeHomeRequest)
  return target;
}

size_t SubscribeHomeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeHomeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeHomeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeHomeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeHomeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeHomeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeHomeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeHomeRequest)
    MergeFrom(*source);
  }
}

void SubscribeHomeRequest::MergeFrom(const SubscribeHomeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeHomeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeHomeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeHomeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeHomeRequest::CopyFrom(const SubscribeHomeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeHomeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeHomeRequest::IsInitialized() const {
  return true;
}

void SubscribeHomeRequest::InternalSwap(SubscribeHomeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeHomeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HomeResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::Position& home(const HomeResponse* msg);
};

const ::mavsdk::rpc::telemetry::Position&
HomeResponse::_Internal::home(const HomeResponse* msg) {
  return *msg->home_;
}
HomeResponse::HomeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.HomeResponse)
}
HomeResponse::HomeResponse(const HomeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_home()) {
    home_ = new ::mavsdk::rpc::telemetry::Position(*from.home_);
  } else {
    home_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.HomeResponse)
}

void HomeResponse::SharedCtor() {
home_ = nullptr;
}

HomeResponse::~HomeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.HomeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HomeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete home_;
}

void HomeResponse::ArenaDtor(void* object) {
  HomeResponse* _this = reinterpret_cast< HomeResponse* >(object);
  (void)_this;
}
void HomeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HomeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HomeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.HomeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && home_ != nullptr) {
    delete home_;
  }
  home_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HomeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.Position home = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_home(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HomeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.HomeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Position home = 1;
  if (this->has_home()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::home(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.HomeResponse)
  return target;
}

size_t HomeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.HomeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Position home = 1;
  if (this->has_home()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *home_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HomeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.HomeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HomeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HomeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.HomeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.HomeResponse)
    MergeFrom(*source);
  }
}

void HomeResponse::MergeFrom(const HomeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.HomeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_home()) {
    _internal_mutable_home()->::mavsdk::rpc::telemetry::Position::MergeFrom(from._internal_home());
  }
}

void HomeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.HomeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HomeResponse::CopyFrom(const HomeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.HomeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HomeResponse::IsInitialized() const {
  return true;
}

void HomeResponse::InternalSwap(HomeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(home_, other->home_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HomeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeInAirRequest::_Internal {
 public:
};

SubscribeInAirRequest::SubscribeInAirRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeInAirRequest)
}
SubscribeInAirRequest::SubscribeInAirRequest(const SubscribeInAirRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeInAirRequest)
}

void SubscribeInAirRequest::SharedCtor() {
}

SubscribeInAirRequest::~SubscribeInAirRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeInAirRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeInAirRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeInAirRequest::ArenaDtor(void* object) {
  SubscribeInAirRequest* _this = reinterpret_cast< SubscribeInAirRequest* >(object);
  (void)_this;
}
void SubscribeInAirRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeInAirRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeInAirRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeInAirRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeInAirRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeInAirRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeInAirRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeInAirRequest)
  return target;
}

size_t SubscribeInAirRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeInAirRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeInAirRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeInAirRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeInAirRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeInAirRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeInAirRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeInAirRequest)
    MergeFrom(*source);
  }
}

void SubscribeInAirRequest::MergeFrom(const SubscribeInAirRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeInAirRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeInAirRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeInAirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeInAirRequest::CopyFrom(const SubscribeInAirRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeInAirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeInAirRequest::IsInitialized() const {
  return true;
}

void SubscribeInAirRequest::InternalSwap(SubscribeInAirRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeInAirRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InAirResponse::_Internal {
 public:
};

InAirResponse::InAirResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.InAirResponse)
}
InAirResponse::InAirResponse(const InAirResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_in_air_ = from.is_in_air_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.InAirResponse)
}

void InAirResponse::SharedCtor() {
is_in_air_ = false;
}

InAirResponse::~InAirResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.InAirResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InAirResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InAirResponse::ArenaDtor(void* object) {
  InAirResponse* _this = reinterpret_cast< InAirResponse* >(object);
  (void)_this;
}
void InAirResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InAirResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InAirResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.InAirResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_in_air_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InAirResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_in_air = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_in_air_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InAirResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.InAirResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_in_air = 1;
  if (this->is_in_air() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_in_air(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.InAirResponse)
  return target;
}

size_t InAirResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.InAirResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_in_air = 1;
  if (this->is_in_air() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InAirResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.InAirResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InAirResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InAirResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.InAirResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.InAirResponse)
    MergeFrom(*source);
  }
}

void InAirResponse::MergeFrom(const InAirResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.InAirResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_in_air() != 0) {
    _internal_set_is_in_air(from._internal_is_in_air());
  }
}

void InAirResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.InAirResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InAirResponse::CopyFrom(const InAirResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.InAirResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InAirResponse::IsInitialized() const {
  return true;
}

void InAirResponse::InternalSwap(InAirResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(is_in_air_, other->is_in_air_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InAirResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeLandedStateRequest::_Internal {
 public:
};

SubscribeLandedStateRequest::SubscribeLandedStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeLandedStateRequest)
}
SubscribeLandedStateRequest::SubscribeLandedStateRequest(const SubscribeLandedStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeLandedStateRequest)
}

void SubscribeLandedStateRequest::SharedCtor() {
}

SubscribeLandedStateRequest::~SubscribeLandedStateRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeLandedStateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeLandedStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeLandedStateRequest::ArenaDtor(void* object) {
  SubscribeLandedStateRequest* _this = reinterpret_cast< SubscribeLandedStateRequest* >(object);
  (void)_this;
}
void SubscribeLandedStateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeLandedStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeLandedStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeLandedStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeLandedStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeLandedStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeLandedStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeLandedStateRequest)
  return target;
}

size_t SubscribeLandedStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeLandedStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeLandedStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeLandedStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeLandedStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeLandedStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeLandedStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeLandedStateRequest)
    MergeFrom(*source);
  }
}

void SubscribeLandedStateRequest::MergeFrom(const SubscribeLandedStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeLandedStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeLandedStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeLandedStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeLandedStateRequest::CopyFrom(const SubscribeLandedStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeLandedStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeLandedStateRequest::IsInitialized() const {
  return true;
}

void SubscribeLandedStateRequest::InternalSwap(SubscribeLandedStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeLandedStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LandedStateResponse::_Internal {
 public:
};

LandedStateResponse::LandedStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.LandedStateResponse)
}
LandedStateResponse::LandedStateResponse(const LandedStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  landed_state_ = from.landed_state_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.LandedStateResponse)
}

void LandedStateResponse::SharedCtor() {
landed_state_ = 0;
}

LandedStateResponse::~LandedStateResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.LandedStateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LandedStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LandedStateResponse::ArenaDtor(void* object) {
  LandedStateResponse* _this = reinterpret_cast< LandedStateResponse* >(object);
  (void)_this;
}
void LandedStateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LandedStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LandedStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.LandedStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landed_state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LandedStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.LandedState landed_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_landed_state(static_cast<::mavsdk::rpc::telemetry::LandedState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LandedStateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.LandedStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.LandedState landed_state = 1;
  if (this->landed_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_landed_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.LandedStateResponse)
  return target;
}

size_t LandedStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.LandedStateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.LandedState landed_state = 1;
  if (this->landed_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_landed_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LandedStateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.LandedStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LandedStateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LandedStateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.LandedStateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.LandedStateResponse)
    MergeFrom(*source);
  }
}

void LandedStateResponse::MergeFrom(const LandedStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.LandedStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.landed_state() != 0) {
    _internal_set_landed_state(from._internal_landed_state());
  }
}

void LandedStateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.LandedStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandedStateResponse::CopyFrom(const LandedStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.LandedStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandedStateResponse::IsInitialized() const {
  return true;
}

void LandedStateResponse::InternalSwap(LandedStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(landed_state_, other->landed_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LandedStateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeArmedRequest::_Internal {
 public:
};

SubscribeArmedRequest::SubscribeArmedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeArmedRequest)
}
SubscribeArmedRequest::SubscribeArmedRequest(const SubscribeArmedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeArmedRequest)
}

void SubscribeArmedRequest::SharedCtor() {
}

SubscribeArmedRequest::~SubscribeArmedRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeArmedRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeArmedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeArmedRequest::ArenaDtor(void* object) {
  SubscribeArmedRequest* _this = reinterpret_cast< SubscribeArmedRequest* >(object);
  (void)_this;
}
void SubscribeArmedRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeArmedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeArmedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeArmedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeArmedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeArmedRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeArmedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeArmedRequest)
  return target;
}

size_t SubscribeArmedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeArmedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeArmedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeArmedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeArmedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeArmedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeArmedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeArmedRequest)
    MergeFrom(*source);
  }
}

void SubscribeArmedRequest::MergeFrom(const SubscribeArmedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeArmedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeArmedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeArmedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeArmedRequest::CopyFrom(const SubscribeArmedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeArmedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeArmedRequest::IsInitialized() const {
  return true;
}

void SubscribeArmedRequest::InternalSwap(SubscribeArmedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeArmedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ArmedResponse::_Internal {
 public:
};

ArmedResponse::ArmedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.ArmedResponse)
}
ArmedResponse::ArmedResponse(const ArmedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_armed_ = from.is_armed_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.ArmedResponse)
}

void ArmedResponse::SharedCtor() {
is_armed_ = false;
}

ArmedResponse::~ArmedResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.ArmedResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArmedResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ArmedResponse::ArenaDtor(void* object) {
  ArmedResponse* _this = reinterpret_cast< ArmedResponse* >(object);
  (void)_this;
}
void ArmedResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArmedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ArmedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.ArmedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_armed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArmedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_armed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_armed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArmedResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.ArmedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_armed = 1;
  if (this->is_armed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_armed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.ArmedResponse)
  return target;
}

size_t ArmedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.ArmedResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_armed = 1;
  if (this->is_armed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArmedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.ArmedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ArmedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArmedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.ArmedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.ArmedResponse)
    MergeFrom(*source);
  }
}

void ArmedResponse::MergeFrom(const ArmedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.ArmedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_armed() != 0) {
    _internal_set_is_armed(from._internal_is_armed());
  }
}

void ArmedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.ArmedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArmedResponse::CopyFrom(const ArmedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.ArmedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArmedResponse::IsInitialized() const {
  return true;
}

void ArmedResponse::InternalSwap(ArmedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(is_armed_, other->is_armed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArmedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeAttitudeQuaternionRequest::_Internal {
 public:
};

SubscribeAttitudeQuaternionRequest::SubscribeAttitudeQuaternionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest)
}
SubscribeAttitudeQuaternionRequest::SubscribeAttitudeQuaternionRequest(const SubscribeAttitudeQuaternionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest)
}

void SubscribeAttitudeQuaternionRequest::SharedCtor() {
}

SubscribeAttitudeQuaternionRequest::~SubscribeAttitudeQuaternionRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeAttitudeQuaternionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeAttitudeQuaternionRequest::ArenaDtor(void* object) {
  SubscribeAttitudeQuaternionRequest* _this = reinterpret_cast< SubscribeAttitudeQuaternionRequest* >(object);
  (void)_this;
}
void SubscribeAttitudeQuaternionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeAttitudeQuaternionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeAttitudeQuaternionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeAttitudeQuaternionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeAttitudeQuaternionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest)
  return target;
}

size_t SubscribeAttitudeQuaternionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeAttitudeQuaternionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeAttitudeQuaternionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeAttitudeQuaternionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest)
    MergeFrom(*source);
  }
}

void SubscribeAttitudeQuaternionRequest::MergeFrom(const SubscribeAttitudeQuaternionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeAttitudeQuaternionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeAttitudeQuaternionRequest::CopyFrom(const SubscribeAttitudeQuaternionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeAttitudeQuaternionRequest::IsInitialized() const {
  return true;
}

void SubscribeAttitudeQuaternionRequest::InternalSwap(SubscribeAttitudeQuaternionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeAttitudeQuaternionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AttitudeQuaternionResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::Quaternion& attitude_quaternion(const AttitudeQuaternionResponse* msg);
};

const ::mavsdk::rpc::telemetry::Quaternion&
AttitudeQuaternionResponse::_Internal::attitude_quaternion(const AttitudeQuaternionResponse* msg) {
  return *msg->attitude_quaternion_;
}
AttitudeQuaternionResponse::AttitudeQuaternionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
}
AttitudeQuaternionResponse::AttitudeQuaternionResponse(const AttitudeQuaternionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attitude_quaternion()) {
    attitude_quaternion_ = new ::mavsdk::rpc::telemetry::Quaternion(*from.attitude_quaternion_);
  } else {
    attitude_quaternion_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
}

void AttitudeQuaternionResponse::SharedCtor() {
attitude_quaternion_ = nullptr;
}

AttitudeQuaternionResponse::~AttitudeQuaternionResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AttitudeQuaternionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete attitude_quaternion_;
}

void AttitudeQuaternionResponse::ArenaDtor(void* object) {
  AttitudeQuaternionResponse* _this = reinterpret_cast< AttitudeQuaternionResponse* >(object);
  (void)_this;
}
void AttitudeQuaternionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AttitudeQuaternionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AttitudeQuaternionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && attitude_quaternion_ != nullptr) {
    delete attitude_quaternion_;
  }
  attitude_quaternion_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttitudeQuaternionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.Quaternion attitude_quaternion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_attitude_quaternion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AttitudeQuaternionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Quaternion attitude_quaternion = 1;
  if (this->has_attitude_quaternion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::attitude_quaternion(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
  return target;
}

size_t AttitudeQuaternionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Quaternion attitude_quaternion = 1;
  if (this->has_attitude_quaternion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attitude_quaternion_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttitudeQuaternionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AttitudeQuaternionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AttitudeQuaternionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
    MergeFrom(*source);
  }
}

void AttitudeQuaternionResponse::MergeFrom(const AttitudeQuaternionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_attitude_quaternion()) {
    _internal_mutable_attitude_quaternion()->::mavsdk::rpc::telemetry::Quaternion::MergeFrom(from._internal_attitude_quaternion());
  }
}

void AttitudeQuaternionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttitudeQuaternionResponse::CopyFrom(const AttitudeQuaternionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttitudeQuaternionResponse::IsInitialized() const {
  return true;
}

void AttitudeQuaternionResponse::InternalSwap(AttitudeQuaternionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(attitude_quaternion_, other->attitude_quaternion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttitudeQuaternionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeAttitudeEulerRequest::_Internal {
 public:
};

SubscribeAttitudeEulerRequest::SubscribeAttitudeEulerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest)
}
SubscribeAttitudeEulerRequest::SubscribeAttitudeEulerRequest(const SubscribeAttitudeEulerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest)
}

void SubscribeAttitudeEulerRequest::SharedCtor() {
}

SubscribeAttitudeEulerRequest::~SubscribeAttitudeEulerRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeAttitudeEulerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeAttitudeEulerRequest::ArenaDtor(void* object) {
  SubscribeAttitudeEulerRequest* _this = reinterpret_cast< SubscribeAttitudeEulerRequest* >(object);
  (void)_this;
}
void SubscribeAttitudeEulerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeAttitudeEulerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeAttitudeEulerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeAttitudeEulerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeAttitudeEulerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest)
  return target;
}

size_t SubscribeAttitudeEulerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeAttitudeEulerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeAttitudeEulerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeAttitudeEulerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest)
    MergeFrom(*source);
  }
}

void SubscribeAttitudeEulerRequest::MergeFrom(const SubscribeAttitudeEulerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeAttitudeEulerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeAttitudeEulerRequest::CopyFrom(const SubscribeAttitudeEulerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeAttitudeEulerRequest::IsInitialized() const {
  return true;
}

void SubscribeAttitudeEulerRequest::InternalSwap(SubscribeAttitudeEulerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeAttitudeEulerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AttitudeEulerResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::EulerAngle& attitude_euler(const AttitudeEulerResponse* msg);
};

const ::mavsdk::rpc::telemetry::EulerAngle&
AttitudeEulerResponse::_Internal::attitude_euler(const AttitudeEulerResponse* msg) {
  return *msg->attitude_euler_;
}
AttitudeEulerResponse::AttitudeEulerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.AttitudeEulerResponse)
}
AttitudeEulerResponse::AttitudeEulerResponse(const AttitudeEulerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attitude_euler()) {
    attitude_euler_ = new ::mavsdk::rpc::telemetry::EulerAngle(*from.attitude_euler_);
  } else {
    attitude_euler_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.AttitudeEulerResponse)
}

void AttitudeEulerResponse::SharedCtor() {
attitude_euler_ = nullptr;
}

AttitudeEulerResponse::~AttitudeEulerResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.AttitudeEulerResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AttitudeEulerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete attitude_euler_;
}

void AttitudeEulerResponse::ArenaDtor(void* object) {
  AttitudeEulerResponse* _this = reinterpret_cast< AttitudeEulerResponse* >(object);
  (void)_this;
}
void AttitudeEulerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AttitudeEulerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AttitudeEulerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.AttitudeEulerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && attitude_euler_ != nullptr) {
    delete attitude_euler_;
  }
  attitude_euler_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttitudeEulerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.EulerAngle attitude_euler = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_attitude_euler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AttitudeEulerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.AttitudeEulerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.EulerAngle attitude_euler = 1;
  if (this->has_attitude_euler()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::attitude_euler(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.AttitudeEulerResponse)
  return target;
}

size_t AttitudeEulerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.AttitudeEulerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.EulerAngle attitude_euler = 1;
  if (this->has_attitude_euler()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attitude_euler_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttitudeEulerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.AttitudeEulerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AttitudeEulerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AttitudeEulerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.AttitudeEulerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.AttitudeEulerResponse)
    MergeFrom(*source);
  }
}

void AttitudeEulerResponse::MergeFrom(const AttitudeEulerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.AttitudeEulerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_attitude_euler()) {
    _internal_mutable_attitude_euler()->::mavsdk::rpc::telemetry::EulerAngle::MergeFrom(from._internal_attitude_euler());
  }
}

void AttitudeEulerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.AttitudeEulerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttitudeEulerResponse::CopyFrom(const AttitudeEulerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.AttitudeEulerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttitudeEulerResponse::IsInitialized() const {
  return true;
}

void AttitudeEulerResponse::InternalSwap(AttitudeEulerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(attitude_euler_, other->attitude_euler_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttitudeEulerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeAttitudeAngularVelocityBodyRequest::_Internal {
 public:
};

SubscribeAttitudeAngularVelocityBodyRequest::SubscribeAttitudeAngularVelocityBodyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest)
}
SubscribeAttitudeAngularVelocityBodyRequest::SubscribeAttitudeAngularVelocityBodyRequest(const SubscribeAttitudeAngularVelocityBodyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest)
}

void SubscribeAttitudeAngularVelocityBodyRequest::SharedCtor() {
}

SubscribeAttitudeAngularVelocityBodyRequest::~SubscribeAttitudeAngularVelocityBodyRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeAttitudeAngularVelocityBodyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeAttitudeAngularVelocityBodyRequest::ArenaDtor(void* object) {
  SubscribeAttitudeAngularVelocityBodyRequest* _this = reinterpret_cast< SubscribeAttitudeAngularVelocityBodyRequest* >(object);
  (void)_this;
}
void SubscribeAttitudeAngularVelocityBodyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeAttitudeAngularVelocityBodyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeAttitudeAngularVelocityBodyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeAttitudeAngularVelocityBodyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeAttitudeAngularVelocityBodyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest)
  return target;
}

size_t SubscribeAttitudeAngularVelocityBodyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeAttitudeAngularVelocityBodyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeAttitudeAngularVelocityBodyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeAttitudeAngularVelocityBodyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest)
    MergeFrom(*source);
  }
}

void SubscribeAttitudeAngularVelocityBodyRequest::MergeFrom(const SubscribeAttitudeAngularVelocityBodyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeAttitudeAngularVelocityBodyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeAttitudeAngularVelocityBodyRequest::CopyFrom(const SubscribeAttitudeAngularVelocityBodyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeAttitudeAngularVelocityBodyRequest::IsInitialized() const {
  return true;
}

void SubscribeAttitudeAngularVelocityBodyRequest::InternalSwap(SubscribeAttitudeAngularVelocityBodyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeAttitudeAngularVelocityBodyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AttitudeAngularVelocityBodyResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::AngularVelocityBody& attitude_angular_velocity_body(const AttitudeAngularVelocityBodyResponse* msg);
};

const ::mavsdk::rpc::telemetry::AngularVelocityBody&
AttitudeAngularVelocityBodyResponse::_Internal::attitude_angular_velocity_body(const AttitudeAngularVelocityBodyResponse* msg) {
  return *msg->attitude_angular_velocity_body_;
}
AttitudeAngularVelocityBodyResponse::AttitudeAngularVelocityBodyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
}
AttitudeAngularVelocityBodyResponse::AttitudeAngularVelocityBodyResponse(const AttitudeAngularVelocityBodyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attitude_angular_velocity_body()) {
    attitude_angular_velocity_body_ = new ::mavsdk::rpc::telemetry::AngularVelocityBody(*from.attitude_angular_velocity_body_);
  } else {
    attitude_angular_velocity_body_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
}

void AttitudeAngularVelocityBodyResponse::SharedCtor() {
attitude_angular_velocity_body_ = nullptr;
}

AttitudeAngularVelocityBodyResponse::~AttitudeAngularVelocityBodyResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AttitudeAngularVelocityBodyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete attitude_angular_velocity_body_;
}

void AttitudeAngularVelocityBodyResponse::ArenaDtor(void* object) {
  AttitudeAngularVelocityBodyResponse* _this = reinterpret_cast< AttitudeAngularVelocityBodyResponse* >(object);
  (void)_this;
}
void AttitudeAngularVelocityBodyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AttitudeAngularVelocityBodyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AttitudeAngularVelocityBodyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && attitude_angular_velocity_body_ != nullptr) {
    delete attitude_angular_velocity_body_;
  }
  attitude_angular_velocity_body_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttitudeAngularVelocityBodyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.AngularVelocityBody attitude_angular_velocity_body = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_attitude_angular_velocity_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AttitudeAngularVelocityBodyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.AngularVelocityBody attitude_angular_velocity_body = 1;
  if (this->has_attitude_angular_velocity_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::attitude_angular_velocity_body(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
  return target;
}

size_t AttitudeAngularVelocityBodyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.AngularVelocityBody attitude_angular_velocity_body = 1;
  if (this->has_attitude_angular_velocity_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attitude_angular_velocity_body_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttitudeAngularVelocityBodyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AttitudeAngularVelocityBodyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AttitudeAngularVelocityBodyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
    MergeFrom(*source);
  }
}

void AttitudeAngularVelocityBodyResponse::MergeFrom(const AttitudeAngularVelocityBodyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_attitude_angular_velocity_body()) {
    _internal_mutable_attitude_angular_velocity_body()->::mavsdk::rpc::telemetry::AngularVelocityBody::MergeFrom(from._internal_attitude_angular_velocity_body());
  }
}

void AttitudeAngularVelocityBodyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttitudeAngularVelocityBodyResponse::CopyFrom(const AttitudeAngularVelocityBodyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttitudeAngularVelocityBodyResponse::IsInitialized() const {
  return true;
}

void AttitudeAngularVelocityBodyResponse::InternalSwap(AttitudeAngularVelocityBodyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(attitude_angular_velocity_body_, other->attitude_angular_velocity_body_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttitudeAngularVelocityBodyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeCameraAttitudeQuaternionRequest::_Internal {
 public:
};

SubscribeCameraAttitudeQuaternionRequest::SubscribeCameraAttitudeQuaternionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest)
}
SubscribeCameraAttitudeQuaternionRequest::SubscribeCameraAttitudeQuaternionRequest(const SubscribeCameraAttitudeQuaternionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest)
}

void SubscribeCameraAttitudeQuaternionRequest::SharedCtor() {
}

SubscribeCameraAttitudeQuaternionRequest::~SubscribeCameraAttitudeQuaternionRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeCameraAttitudeQuaternionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeCameraAttitudeQuaternionRequest::ArenaDtor(void* object) {
  SubscribeCameraAttitudeQuaternionRequest* _this = reinterpret_cast< SubscribeCameraAttitudeQuaternionRequest* >(object);
  (void)_this;
}
void SubscribeCameraAttitudeQuaternionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeCameraAttitudeQuaternionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeCameraAttitudeQuaternionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeCameraAttitudeQuaternionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeCameraAttitudeQuaternionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest)
  return target;
}

size_t SubscribeCameraAttitudeQuaternionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeCameraAttitudeQuaternionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeCameraAttitudeQuaternionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeCameraAttitudeQuaternionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest)
    MergeFrom(*source);
  }
}

void SubscribeCameraAttitudeQuaternionRequest::MergeFrom(const SubscribeCameraAttitudeQuaternionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeCameraAttitudeQuaternionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeCameraAttitudeQuaternionRequest::CopyFrom(const SubscribeCameraAttitudeQuaternionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeCameraAttitudeQuaternionRequest::IsInitialized() const {
  return true;
}

void SubscribeCameraAttitudeQuaternionRequest::InternalSwap(SubscribeCameraAttitudeQuaternionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeCameraAttitudeQuaternionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CameraAttitudeQuaternionResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::Quaternion& attitude_quaternion(const CameraAttitudeQuaternionResponse* msg);
};

const ::mavsdk::rpc::telemetry::Quaternion&
CameraAttitudeQuaternionResponse::_Internal::attitude_quaternion(const CameraAttitudeQuaternionResponse* msg) {
  return *msg->attitude_quaternion_;
}
CameraAttitudeQuaternionResponse::CameraAttitudeQuaternionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
}
CameraAttitudeQuaternionResponse::CameraAttitudeQuaternionResponse(const CameraAttitudeQuaternionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attitude_quaternion()) {
    attitude_quaternion_ = new ::mavsdk::rpc::telemetry::Quaternion(*from.attitude_quaternion_);
  } else {
    attitude_quaternion_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
}

void CameraAttitudeQuaternionResponse::SharedCtor() {
attitude_quaternion_ = nullptr;
}

CameraAttitudeQuaternionResponse::~CameraAttitudeQuaternionResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraAttitudeQuaternionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete attitude_quaternion_;
}

void CameraAttitudeQuaternionResponse::ArenaDtor(void* object) {
  CameraAttitudeQuaternionResponse* _this = reinterpret_cast< CameraAttitudeQuaternionResponse* >(object);
  (void)_this;
}
void CameraAttitudeQuaternionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraAttitudeQuaternionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CameraAttitudeQuaternionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && attitude_quaternion_ != nullptr) {
    delete attitude_quaternion_;
  }
  attitude_quaternion_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraAttitudeQuaternionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.Quaternion attitude_quaternion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_attitude_quaternion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraAttitudeQuaternionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Quaternion attitude_quaternion = 1;
  if (this->has_attitude_quaternion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::attitude_quaternion(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
  return target;
}

size_t CameraAttitudeQuaternionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Quaternion attitude_quaternion = 1;
  if (this->has_attitude_quaternion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attitude_quaternion_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraAttitudeQuaternionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraAttitudeQuaternionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraAttitudeQuaternionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
    MergeFrom(*source);
  }
}

void CameraAttitudeQuaternionResponse::MergeFrom(const CameraAttitudeQuaternionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_attitude_quaternion()) {
    _internal_mutable_attitude_quaternion()->::mavsdk::rpc::telemetry::Quaternion::MergeFrom(from._internal_attitude_quaternion());
  }
}

void CameraAttitudeQuaternionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraAttitudeQuaternionResponse::CopyFrom(const CameraAttitudeQuaternionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraAttitudeQuaternionResponse::IsInitialized() const {
  return true;
}

void CameraAttitudeQuaternionResponse::InternalSwap(CameraAttitudeQuaternionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(attitude_quaternion_, other->attitude_quaternion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraAttitudeQuaternionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeCameraAttitudeEulerRequest::_Internal {
 public:
};

SubscribeCameraAttitudeEulerRequest::SubscribeCameraAttitudeEulerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest)
}
SubscribeCameraAttitudeEulerRequest::SubscribeCameraAttitudeEulerRequest(const SubscribeCameraAttitudeEulerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest)
}

void SubscribeCameraAttitudeEulerRequest::SharedCtor() {
}

SubscribeCameraAttitudeEulerRequest::~SubscribeCameraAttitudeEulerRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeCameraAttitudeEulerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeCameraAttitudeEulerRequest::ArenaDtor(void* object) {
  SubscribeCameraAttitudeEulerRequest* _this = reinterpret_cast< SubscribeCameraAttitudeEulerRequest* >(object);
  (void)_this;
}
void SubscribeCameraAttitudeEulerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeCameraAttitudeEulerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeCameraAttitudeEulerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeCameraAttitudeEulerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeCameraAttitudeEulerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest)
  return target;
}

size_t SubscribeCameraAttitudeEulerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeCameraAttitudeEulerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeCameraAttitudeEulerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeCameraAttitudeEulerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest)
    MergeFrom(*source);
  }
}

void SubscribeCameraAttitudeEulerRequest::MergeFrom(const SubscribeCameraAttitudeEulerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeCameraAttitudeEulerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeCameraAttitudeEulerRequest::CopyFrom(const SubscribeCameraAttitudeEulerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeCameraAttitudeEulerRequest::IsInitialized() const {
  return true;
}

void SubscribeCameraAttitudeEulerRequest::InternalSwap(SubscribeCameraAttitudeEulerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeCameraAttitudeEulerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CameraAttitudeEulerResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::EulerAngle& attitude_euler(const CameraAttitudeEulerResponse* msg);
};

const ::mavsdk::rpc::telemetry::EulerAngle&
CameraAttitudeEulerResponse::_Internal::attitude_euler(const CameraAttitudeEulerResponse* msg) {
  return *msg->attitude_euler_;
}
CameraAttitudeEulerResponse::CameraAttitudeEulerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
}
CameraAttitudeEulerResponse::CameraAttitudeEulerResponse(const CameraAttitudeEulerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attitude_euler()) {
    attitude_euler_ = new ::mavsdk::rpc::telemetry::EulerAngle(*from.attitude_euler_);
  } else {
    attitude_euler_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
}

void CameraAttitudeEulerResponse::SharedCtor() {
attitude_euler_ = nullptr;
}

CameraAttitudeEulerResponse::~CameraAttitudeEulerResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraAttitudeEulerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete attitude_euler_;
}

void CameraAttitudeEulerResponse::ArenaDtor(void* object) {
  CameraAttitudeEulerResponse* _this = reinterpret_cast< CameraAttitudeEulerResponse* >(object);
  (void)_this;
}
void CameraAttitudeEulerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraAttitudeEulerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CameraAttitudeEulerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && attitude_euler_ != nullptr) {
    delete attitude_euler_;
  }
  attitude_euler_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraAttitudeEulerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.EulerAngle attitude_euler = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_attitude_euler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraAttitudeEulerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.EulerAngle attitude_euler = 1;
  if (this->has_attitude_euler()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::attitude_euler(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
  return target;
}

size_t CameraAttitudeEulerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.EulerAngle attitude_euler = 1;
  if (this->has_attitude_euler()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attitude_euler_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraAttitudeEulerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraAttitudeEulerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraAttitudeEulerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
    MergeFrom(*source);
  }
}

void CameraAttitudeEulerResponse::MergeFrom(const CameraAttitudeEulerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_attitude_euler()) {
    _internal_mutable_attitude_euler()->::mavsdk::rpc::telemetry::EulerAngle::MergeFrom(from._internal_attitude_euler());
  }
}

void CameraAttitudeEulerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraAttitudeEulerResponse::CopyFrom(const CameraAttitudeEulerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraAttitudeEulerResponse::IsInitialized() const {
  return true;
}

void CameraAttitudeEulerResponse::InternalSwap(CameraAttitudeEulerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(attitude_euler_, other->attitude_euler_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraAttitudeEulerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeVelocityNedRequest::_Internal {
 public:
};

SubscribeVelocityNedRequest::SubscribeVelocityNedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeVelocityNedRequest)
}
SubscribeVelocityNedRequest::SubscribeVelocityNedRequest(const SubscribeVelocityNedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeVelocityNedRequest)
}

void SubscribeVelocityNedRequest::SharedCtor() {
}

SubscribeVelocityNedRequest::~SubscribeVelocityNedRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeVelocityNedRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeVelocityNedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeVelocityNedRequest::ArenaDtor(void* object) {
  SubscribeVelocityNedRequest* _this = reinterpret_cast< SubscribeVelocityNedRequest* >(object);
  (void)_this;
}
void SubscribeVelocityNedRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeVelocityNedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeVelocityNedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeVelocityNedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeVelocityNedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeVelocityNedRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeVelocityNedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeVelocityNedRequest)
  return target;
}

size_t SubscribeVelocityNedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeVelocityNedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeVelocityNedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeVelocityNedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeVelocityNedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeVelocityNedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeVelocityNedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeVelocityNedRequest)
    MergeFrom(*source);
  }
}

void SubscribeVelocityNedRequest::MergeFrom(const SubscribeVelocityNedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeVelocityNedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeVelocityNedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeVelocityNedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeVelocityNedRequest::CopyFrom(const SubscribeVelocityNedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeVelocityNedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeVelocityNedRequest::IsInitialized() const {
  return true;
}

void SubscribeVelocityNedRequest::InternalSwap(SubscribeVelocityNedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeVelocityNedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VelocityNedResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::VelocityNed& velocity_ned(const VelocityNedResponse* msg);
};

const ::mavsdk::rpc::telemetry::VelocityNed&
VelocityNedResponse::_Internal::velocity_ned(const VelocityNedResponse* msg) {
  return *msg->velocity_ned_;
}
VelocityNedResponse::VelocityNedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.VelocityNedResponse)
}
VelocityNedResponse::VelocityNedResponse(const VelocityNedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_velocity_ned()) {
    velocity_ned_ = new ::mavsdk::rpc::telemetry::VelocityNed(*from.velocity_ned_);
  } else {
    velocity_ned_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.VelocityNedResponse)
}

void VelocityNedResponse::SharedCtor() {
velocity_ned_ = nullptr;
}

VelocityNedResponse::~VelocityNedResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.VelocityNedResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VelocityNedResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete velocity_ned_;
}

void VelocityNedResponse::ArenaDtor(void* object) {
  VelocityNedResponse* _this = reinterpret_cast< VelocityNedResponse* >(object);
  (void)_this;
}
void VelocityNedResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VelocityNedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VelocityNedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.VelocityNedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && velocity_ned_ != nullptr) {
    delete velocity_ned_;
  }
  velocity_ned_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VelocityNedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.VelocityNed velocity_ned = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity_ned(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VelocityNedResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.VelocityNedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.VelocityNed velocity_ned = 1;
  if (this->has_velocity_ned()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::velocity_ned(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.VelocityNedResponse)
  return target;
}

size_t VelocityNedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.VelocityNedResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.VelocityNed velocity_ned = 1;
  if (this->has_velocity_ned()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_ned_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VelocityNedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.VelocityNedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VelocityNedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VelocityNedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.VelocityNedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.VelocityNedResponse)
    MergeFrom(*source);
  }
}

void VelocityNedResponse::MergeFrom(const VelocityNedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.VelocityNedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_velocity_ned()) {
    _internal_mutable_velocity_ned()->::mavsdk::rpc::telemetry::VelocityNed::MergeFrom(from._internal_velocity_ned());
  }
}

void VelocityNedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.VelocityNedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VelocityNedResponse::CopyFrom(const VelocityNedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.VelocityNedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VelocityNedResponse::IsInitialized() const {
  return true;
}

void VelocityNedResponse::InternalSwap(VelocityNedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(velocity_ned_, other->velocity_ned_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VelocityNedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeGpsInfoRequest::_Internal {
 public:
};

SubscribeGpsInfoRequest::SubscribeGpsInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest)
}
SubscribeGpsInfoRequest::SubscribeGpsInfoRequest(const SubscribeGpsInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest)
}

void SubscribeGpsInfoRequest::SharedCtor() {
}

SubscribeGpsInfoRequest::~SubscribeGpsInfoRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeGpsInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeGpsInfoRequest::ArenaDtor(void* object) {
  SubscribeGpsInfoRequest* _this = reinterpret_cast< SubscribeGpsInfoRequest* >(object);
  (void)_this;
}
void SubscribeGpsInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeGpsInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeGpsInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeGpsInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeGpsInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest)
  return target;
}

size_t SubscribeGpsInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeGpsInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeGpsInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeGpsInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest)
    MergeFrom(*source);
  }
}

void SubscribeGpsInfoRequest::MergeFrom(const SubscribeGpsInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeGpsInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeGpsInfoRequest::CopyFrom(const SubscribeGpsInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeGpsInfoRequest::IsInitialized() const {
  return true;
}

void SubscribeGpsInfoRequest::InternalSwap(SubscribeGpsInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeGpsInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GpsInfoResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::GpsInfo& gps_info(const GpsInfoResponse* msg);
};

const ::mavsdk::rpc::telemetry::GpsInfo&
GpsInfoResponse::_Internal::gps_info(const GpsInfoResponse* msg) {
  return *msg->gps_info_;
}
GpsInfoResponse::GpsInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.GpsInfoResponse)
}
GpsInfoResponse::GpsInfoResponse(const GpsInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gps_info()) {
    gps_info_ = new ::mavsdk::rpc::telemetry::GpsInfo(*from.gps_info_);
  } else {
    gps_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.GpsInfoResponse)
}

void GpsInfoResponse::SharedCtor() {
gps_info_ = nullptr;
}

GpsInfoResponse::~GpsInfoResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.GpsInfoResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GpsInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gps_info_;
}

void GpsInfoResponse::ArenaDtor(void* object) {
  GpsInfoResponse* _this = reinterpret_cast< GpsInfoResponse* >(object);
  (void)_this;
}
void GpsInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GpsInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GpsInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.GpsInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && gps_info_ != nullptr) {
    delete gps_info_;
  }
  gps_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpsInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.GpsInfo gps_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gps_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GpsInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.GpsInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.GpsInfo gps_info = 1;
  if (this->has_gps_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::gps_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.GpsInfoResponse)
  return target;
}

size_t GpsInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.GpsInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.GpsInfo gps_info = 1;
  if (this->has_gps_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gps_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpsInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.GpsInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GpsInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GpsInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.GpsInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.GpsInfoResponse)
    MergeFrom(*source);
  }
}

void GpsInfoResponse::MergeFrom(const GpsInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.GpsInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gps_info()) {
    _internal_mutable_gps_info()->::mavsdk::rpc::telemetry::GpsInfo::MergeFrom(from._internal_gps_info());
  }
}

void GpsInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.GpsInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpsInfoResponse::CopyFrom(const GpsInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.GpsInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpsInfoResponse::IsInitialized() const {
  return true;
}

void GpsInfoResponse::InternalSwap(GpsInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(gps_info_, other->gps_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GpsInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeRawGpsRequest::_Internal {
 public:
};

SubscribeRawGpsRequest::SubscribeRawGpsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeRawGpsRequest)
}
SubscribeRawGpsRequest::SubscribeRawGpsRequest(const SubscribeRawGpsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeRawGpsRequest)
}

void SubscribeRawGpsRequest::SharedCtor() {
}

SubscribeRawGpsRequest::~SubscribeRawGpsRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeRawGpsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeRawGpsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeRawGpsRequest::ArenaDtor(void* object) {
  SubscribeRawGpsRequest* _this = reinterpret_cast< SubscribeRawGpsRequest* >(object);
  (void)_this;
}
void SubscribeRawGpsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeRawGpsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeRawGpsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeRawGpsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeRawGpsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeRawGpsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeRawGpsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeRawGpsRequest)
  return target;
}

size_t SubscribeRawGpsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeRawGpsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeRawGpsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeRawGpsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeRawGpsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeRawGpsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeRawGpsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeRawGpsRequest)
    MergeFrom(*source);
  }
}

void SubscribeRawGpsRequest::MergeFrom(const SubscribeRawGpsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeRawGpsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeRawGpsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeRawGpsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeRawGpsRequest::CopyFrom(const SubscribeRawGpsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeRawGpsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRawGpsRequest::IsInitialized() const {
  return true;
}

void SubscribeRawGpsRequest::InternalSwap(SubscribeRawGpsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeRawGpsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RawGpsResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::RawGps& raw_gps(const RawGpsResponse* msg);
};

const ::mavsdk::rpc::telemetry::RawGps&
RawGpsResponse::_Internal::raw_gps(const RawGpsResponse* msg) {
  return *msg->raw_gps_;
}
RawGpsResponse::RawGpsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.RawGpsResponse)
}
RawGpsResponse::RawGpsResponse(const RawGpsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_raw_gps()) {
    raw_gps_ = new ::mavsdk::rpc::telemetry::RawGps(*from.raw_gps_);
  } else {
    raw_gps_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.RawGpsResponse)
}

void RawGpsResponse::SharedCtor() {
raw_gps_ = nullptr;
}

RawGpsResponse::~RawGpsResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.RawGpsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RawGpsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete raw_gps_;
}

void RawGpsResponse::ArenaDtor(void* object) {
  RawGpsResponse* _this = reinterpret_cast< RawGpsResponse* >(object);
  (void)_this;
}
void RawGpsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RawGpsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RawGpsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.RawGpsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && raw_gps_ != nullptr) {
    delete raw_gps_;
  }
  raw_gps_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawGpsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.RawGps raw_gps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw_gps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawGpsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.RawGpsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.RawGps raw_gps = 1;
  if (this->has_raw_gps()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::raw_gps(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.RawGpsResponse)
  return target;
}

size_t RawGpsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.RawGpsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.RawGps raw_gps = 1;
  if (this->has_raw_gps()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *raw_gps_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawGpsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.RawGpsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RawGpsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawGpsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.RawGpsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.RawGpsResponse)
    MergeFrom(*source);
  }
}

void RawGpsResponse::MergeFrom(const RawGpsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.RawGpsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_raw_gps()) {
    _internal_mutable_raw_gps()->::mavsdk::rpc::telemetry::RawGps::MergeFrom(from._internal_raw_gps());
  }
}

void RawGpsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.RawGpsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawGpsResponse::CopyFrom(const RawGpsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.RawGpsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawGpsResponse::IsInitialized() const {
  return true;
}

void RawGpsResponse::InternalSwap(RawGpsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(raw_gps_, other->raw_gps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawGpsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeBatteryRequest::_Internal {
 public:
};

SubscribeBatteryRequest::SubscribeBatteryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeBatteryRequest)
}
SubscribeBatteryRequest::SubscribeBatteryRequest(const SubscribeBatteryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeBatteryRequest)
}

void SubscribeBatteryRequest::SharedCtor() {
}

SubscribeBatteryRequest::~SubscribeBatteryRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeBatteryRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeBatteryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeBatteryRequest::ArenaDtor(void* object) {
  SubscribeBatteryRequest* _this = reinterpret_cast< SubscribeBatteryRequest* >(object);
  (void)_this;
}
void SubscribeBatteryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeBatteryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeBatteryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeBatteryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeBatteryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeBatteryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeBatteryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeBatteryRequest)
  return target;
}

size_t SubscribeBatteryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeBatteryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeBatteryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeBatteryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeBatteryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeBatteryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeBatteryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeBatteryRequest)
    MergeFrom(*source);
  }
}

void SubscribeBatteryRequest::MergeFrom(const SubscribeBatteryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeBatteryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeBatteryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeBatteryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeBatteryRequest::CopyFrom(const SubscribeBatteryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeBatteryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeBatteryRequest::IsInitialized() const {
  return true;
}

void SubscribeBatteryRequest::InternalSwap(SubscribeBatteryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeBatteryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BatteryResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::Battery& battery(const BatteryResponse* msg);
};

const ::mavsdk::rpc::telemetry::Battery&
BatteryResponse::_Internal::battery(const BatteryResponse* msg) {
  return *msg->battery_;
}
BatteryResponse::BatteryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.BatteryResponse)
}
BatteryResponse::BatteryResponse(const BatteryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_battery()) {
    battery_ = new ::mavsdk::rpc::telemetry::Battery(*from.battery_);
  } else {
    battery_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.BatteryResponse)
}

void BatteryResponse::SharedCtor() {
battery_ = nullptr;
}

BatteryResponse::~BatteryResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.BatteryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BatteryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete battery_;
}

void BatteryResponse::ArenaDtor(void* object) {
  BatteryResponse* _this = reinterpret_cast< BatteryResponse* >(object);
  (void)_this;
}
void BatteryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatteryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatteryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.BatteryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && battery_ != nullptr) {
    delete battery_;
  }
  battery_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatteryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.Battery battery = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_battery(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatteryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.BatteryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Battery battery = 1;
  if (this->has_battery()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::battery(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.BatteryResponse)
  return target;
}

size_t BatteryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.BatteryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Battery battery = 1;
  if (this->has_battery()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *battery_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatteryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.BatteryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BatteryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatteryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.BatteryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.BatteryResponse)
    MergeFrom(*source);
  }
}

void BatteryResponse::MergeFrom(const BatteryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.BatteryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_battery()) {
    _internal_mutable_battery()->::mavsdk::rpc::telemetry::Battery::MergeFrom(from._internal_battery());
  }
}

void BatteryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.BatteryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatteryResponse::CopyFrom(const BatteryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.BatteryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatteryResponse::IsInitialized() const {
  return true;
}

void BatteryResponse::InternalSwap(BatteryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(battery_, other->battery_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatteryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeFlightModeRequest::_Internal {
 public:
};

SubscribeFlightModeRequest::SubscribeFlightModeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeFlightModeRequest)
}
SubscribeFlightModeRequest::SubscribeFlightModeRequest(const SubscribeFlightModeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeFlightModeRequest)
}

void SubscribeFlightModeRequest::SharedCtor() {
}

SubscribeFlightModeRequest::~SubscribeFlightModeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeFlightModeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeFlightModeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeFlightModeRequest::ArenaDtor(void* object) {
  SubscribeFlightModeRequest* _this = reinterpret_cast< SubscribeFlightModeRequest* >(object);
  (void)_this;
}
void SubscribeFlightModeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeFlightModeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeFlightModeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeFlightModeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeFlightModeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeFlightModeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeFlightModeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeFlightModeRequest)
  return target;
}

size_t SubscribeFlightModeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeFlightModeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeFlightModeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeFlightModeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeFlightModeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeFlightModeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeFlightModeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeFlightModeRequest)
    MergeFrom(*source);
  }
}

void SubscribeFlightModeRequest::MergeFrom(const SubscribeFlightModeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeFlightModeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeFlightModeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeFlightModeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeFlightModeRequest::CopyFrom(const SubscribeFlightModeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeFlightModeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeFlightModeRequest::IsInitialized() const {
  return true;
}

void SubscribeFlightModeRequest::InternalSwap(SubscribeFlightModeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeFlightModeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FlightModeResponse::_Internal {
 public:
};

FlightModeResponse::FlightModeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.FlightModeResponse)
}
FlightModeResponse::FlightModeResponse(const FlightModeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flight_mode_ = from.flight_mode_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.FlightModeResponse)
}

void FlightModeResponse::SharedCtor() {
flight_mode_ = 0;
}

FlightModeResponse::~FlightModeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.FlightModeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlightModeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FlightModeResponse::ArenaDtor(void* object) {
  FlightModeResponse* _this = reinterpret_cast< FlightModeResponse* >(object);
  (void)_this;
}
void FlightModeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlightModeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FlightModeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.FlightModeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flight_mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlightModeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.FlightMode flight_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_flight_mode(static_cast<::mavsdk::rpc::telemetry::FlightMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlightModeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.FlightModeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.FlightMode flight_mode = 1;
  if (this->flight_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_flight_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.FlightModeResponse)
  return target;
}

size_t FlightModeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.FlightModeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.FlightMode flight_mode = 1;
  if (this->flight_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_flight_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlightModeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.FlightModeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FlightModeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlightModeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.FlightModeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.FlightModeResponse)
    MergeFrom(*source);
  }
}

void FlightModeResponse::MergeFrom(const FlightModeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.FlightModeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.flight_mode() != 0) {
    _internal_set_flight_mode(from._internal_flight_mode());
  }
}

void FlightModeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.FlightModeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlightModeResponse::CopyFrom(const FlightModeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.FlightModeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlightModeResponse::IsInitialized() const {
  return true;
}

void FlightModeResponse::InternalSwap(FlightModeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(flight_mode_, other->flight_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlightModeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeHealthRequest::_Internal {
 public:
};

SubscribeHealthRequest::SubscribeHealthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeHealthRequest)
}
SubscribeHealthRequest::SubscribeHealthRequest(const SubscribeHealthRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeHealthRequest)
}

void SubscribeHealthRequest::SharedCtor() {
}

SubscribeHealthRequest::~SubscribeHealthRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeHealthRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeHealthRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeHealthRequest::ArenaDtor(void* object) {
  SubscribeHealthRequest* _this = reinterpret_cast< SubscribeHealthRequest* >(object);
  (void)_this;
}
void SubscribeHealthRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeHealthRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeHealthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeHealthRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeHealthRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeHealthRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeHealthRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeHealthRequest)
  return target;
}

size_t SubscribeHealthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeHealthRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeHealthRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeHealthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeHealthRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeHealthRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeHealthRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeHealthRequest)
    MergeFrom(*source);
  }
}

void SubscribeHealthRequest::MergeFrom(const SubscribeHealthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeHealthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeHealthRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeHealthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeHealthRequest::CopyFrom(const SubscribeHealthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeHealthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeHealthRequest::IsInitialized() const {
  return true;
}

void SubscribeHealthRequest::InternalSwap(SubscribeHealthRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeHealthRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HealthResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::Health& health(const HealthResponse* msg);
};

const ::mavsdk::rpc::telemetry::Health&
HealthResponse::_Internal::health(const HealthResponse* msg) {
  return *msg->health_;
}
HealthResponse::HealthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.HealthResponse)
}
HealthResponse::HealthResponse(const HealthResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_health()) {
    health_ = new ::mavsdk::rpc::telemetry::Health(*from.health_);
  } else {
    health_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.HealthResponse)
}

void HealthResponse::SharedCtor() {
health_ = nullptr;
}

HealthResponse::~HealthResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.HealthResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HealthResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete health_;
}

void HealthResponse::ArenaDtor(void* object) {
  HealthResponse* _this = reinterpret_cast< HealthResponse* >(object);
  (void)_this;
}
void HealthResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HealthResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HealthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.HealthResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && health_ != nullptr) {
    delete health_;
  }
  health_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.Health health = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_health(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HealthResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.HealthResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Health health = 1;
  if (this->has_health()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::health(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.HealthResponse)
  return target;
}

size_t HealthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.HealthResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Health health = 1;
  if (this->has_health()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *health_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HealthResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.HealthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HealthResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.HealthResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.HealthResponse)
    MergeFrom(*source);
  }
}

void HealthResponse::MergeFrom(const HealthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.HealthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_health()) {
    _internal_mutable_health()->::mavsdk::rpc::telemetry::Health::MergeFrom(from._internal_health());
  }
}

void HealthResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.HealthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthResponse::CopyFrom(const HealthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.HealthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthResponse::IsInitialized() const {
  return true;
}

void HealthResponse::InternalSwap(HealthResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(health_, other->health_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeRcStatusRequest::_Internal {
 public:
};

SubscribeRcStatusRequest::SubscribeRcStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeRcStatusRequest)
}
SubscribeRcStatusRequest::SubscribeRcStatusRequest(const SubscribeRcStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeRcStatusRequest)
}

void SubscribeRcStatusRequest::SharedCtor() {
}

SubscribeRcStatusRequest::~SubscribeRcStatusRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeRcStatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeRcStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeRcStatusRequest::ArenaDtor(void* object) {
  SubscribeRcStatusRequest* _this = reinterpret_cast< SubscribeRcStatusRequest* >(object);
  (void)_this;
}
void SubscribeRcStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeRcStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeRcStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeRcStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeRcStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeRcStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeRcStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeRcStatusRequest)
  return target;
}

size_t SubscribeRcStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeRcStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeRcStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeRcStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeRcStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeRcStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeRcStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeRcStatusRequest)
    MergeFrom(*source);
  }
}

void SubscribeRcStatusRequest::MergeFrom(const SubscribeRcStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeRcStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeRcStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeRcStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeRcStatusRequest::CopyFrom(const SubscribeRcStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeRcStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRcStatusRequest::IsInitialized() const {
  return true;
}

void SubscribeRcStatusRequest::InternalSwap(SubscribeRcStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeRcStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RcStatusResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::RcStatus& rc_status(const RcStatusResponse* msg);
};

const ::mavsdk::rpc::telemetry::RcStatus&
RcStatusResponse::_Internal::rc_status(const RcStatusResponse* msg) {
  return *msg->rc_status_;
}
RcStatusResponse::RcStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.RcStatusResponse)
}
RcStatusResponse::RcStatusResponse(const RcStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rc_status()) {
    rc_status_ = new ::mavsdk::rpc::telemetry::RcStatus(*from.rc_status_);
  } else {
    rc_status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.RcStatusResponse)
}

void RcStatusResponse::SharedCtor() {
rc_status_ = nullptr;
}

RcStatusResponse::~RcStatusResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.RcStatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RcStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rc_status_;
}

void RcStatusResponse::ArenaDtor(void* object) {
  RcStatusResponse* _this = reinterpret_cast< RcStatusResponse* >(object);
  (void)_this;
}
void RcStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RcStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RcStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.RcStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && rc_status_ != nullptr) {
    delete rc_status_;
  }
  rc_status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RcStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.RcStatus rc_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rc_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RcStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.RcStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.RcStatus rc_status = 1;
  if (this->has_rc_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rc_status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.RcStatusResponse)
  return target;
}

size_t RcStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.RcStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.RcStatus rc_status = 1;
  if (this->has_rc_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rc_status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RcStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.RcStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RcStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RcStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.RcStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.RcStatusResponse)
    MergeFrom(*source);
  }
}

void RcStatusResponse::MergeFrom(const RcStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.RcStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rc_status()) {
    _internal_mutable_rc_status()->::mavsdk::rpc::telemetry::RcStatus::MergeFrom(from._internal_rc_status());
  }
}

void RcStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.RcStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RcStatusResponse::CopyFrom(const RcStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.RcStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RcStatusResponse::IsInitialized() const {
  return true;
}

void RcStatusResponse::InternalSwap(RcStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rc_status_, other->rc_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RcStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeStatusTextRequest::_Internal {
 public:
};

SubscribeStatusTextRequest::SubscribeStatusTextRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeStatusTextRequest)
}
SubscribeStatusTextRequest::SubscribeStatusTextRequest(const SubscribeStatusTextRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeStatusTextRequest)
}

void SubscribeStatusTextRequest::SharedCtor() {
}

SubscribeStatusTextRequest::~SubscribeStatusTextRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeStatusTextRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeStatusTextRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeStatusTextRequest::ArenaDtor(void* object) {
  SubscribeStatusTextRequest* _this = reinterpret_cast< SubscribeStatusTextRequest* >(object);
  (void)_this;
}
void SubscribeStatusTextRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeStatusTextRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeStatusTextRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeStatusTextRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeStatusTextRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeStatusTextRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeStatusTextRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeStatusTextRequest)
  return target;
}

size_t SubscribeStatusTextRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeStatusTextRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeStatusTextRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeStatusTextRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeStatusTextRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeStatusTextRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeStatusTextRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeStatusTextRequest)
    MergeFrom(*source);
  }
}

void SubscribeStatusTextRequest::MergeFrom(const SubscribeStatusTextRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeStatusTextRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeStatusTextRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeStatusTextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeStatusTextRequest::CopyFrom(const SubscribeStatusTextRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeStatusTextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeStatusTextRequest::IsInitialized() const {
  return true;
}

void SubscribeStatusTextRequest::InternalSwap(SubscribeStatusTextRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeStatusTextRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StatusTextResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::StatusText& status_text(const StatusTextResponse* msg);
};

const ::mavsdk::rpc::telemetry::StatusText&
StatusTextResponse::_Internal::status_text(const StatusTextResponse* msg) {
  return *msg->status_text_;
}
StatusTextResponse::StatusTextResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.StatusTextResponse)
}
StatusTextResponse::StatusTextResponse(const StatusTextResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status_text()) {
    status_text_ = new ::mavsdk::rpc::telemetry::StatusText(*from.status_text_);
  } else {
    status_text_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.StatusTextResponse)
}

void StatusTextResponse::SharedCtor() {
status_text_ = nullptr;
}

StatusTextResponse::~StatusTextResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.StatusTextResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusTextResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_text_;
}

void StatusTextResponse::ArenaDtor(void* object) {
  StatusTextResponse* _this = reinterpret_cast< StatusTextResponse* >(object);
  (void)_this;
}
void StatusTextResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusTextResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatusTextResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.StatusTextResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_text_ != nullptr) {
    delete status_text_;
  }
  status_text_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusTextResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.StatusText status_text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status_text(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusTextResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.StatusTextResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.StatusText status_text = 1;
  if (this->has_status_text()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status_text(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.StatusTextResponse)
  return target;
}

size_t StatusTextResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.StatusTextResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.StatusText status_text = 1;
  if (this->has_status_text()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_text_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusTextResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.StatusTextResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusTextResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusTextResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.StatusTextResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.StatusTextResponse)
    MergeFrom(*source);
  }
}

void StatusTextResponse::MergeFrom(const StatusTextResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.StatusTextResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status_text()) {
    _internal_mutable_status_text()->::mavsdk::rpc::telemetry::StatusText::MergeFrom(from._internal_status_text());
  }
}

void StatusTextResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.StatusTextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusTextResponse::CopyFrom(const StatusTextResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.StatusTextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusTextResponse::IsInitialized() const {
  return true;
}

void StatusTextResponse::InternalSwap(StatusTextResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(status_text_, other->status_text_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusTextResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeActuatorControlTargetRequest::_Internal {
 public:
};

SubscribeActuatorControlTargetRequest::SubscribeActuatorControlTargetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest)
}
SubscribeActuatorControlTargetRequest::SubscribeActuatorControlTargetRequest(const SubscribeActuatorControlTargetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest)
}

void SubscribeActuatorControlTargetRequest::SharedCtor() {
}

SubscribeActuatorControlTargetRequest::~SubscribeActuatorControlTargetRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeActuatorControlTargetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeActuatorControlTargetRequest::ArenaDtor(void* object) {
  SubscribeActuatorControlTargetRequest* _this = reinterpret_cast< SubscribeActuatorControlTargetRequest* >(object);
  (void)_this;
}
void SubscribeActuatorControlTargetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeActuatorControlTargetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeActuatorControlTargetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeActuatorControlTargetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeActuatorControlTargetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest)
  return target;
}

size_t SubscribeActuatorControlTargetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeActuatorControlTargetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeActuatorControlTargetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeActuatorControlTargetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest)
    MergeFrom(*source);
  }
}

void SubscribeActuatorControlTargetRequest::MergeFrom(const SubscribeActuatorControlTargetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeActuatorControlTargetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeActuatorControlTargetRequest::CopyFrom(const SubscribeActuatorControlTargetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeActuatorControlTargetRequest::IsInitialized() const {
  return true;
}

void SubscribeActuatorControlTargetRequest::InternalSwap(SubscribeActuatorControlTargetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeActuatorControlTargetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ActuatorControlTargetResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::ActuatorControlTarget& actuator_control_target(const ActuatorControlTargetResponse* msg);
};

const ::mavsdk::rpc::telemetry::ActuatorControlTarget&
ActuatorControlTargetResponse::_Internal::actuator_control_target(const ActuatorControlTargetResponse* msg) {
  return *msg->actuator_control_target_;
}
ActuatorControlTargetResponse::ActuatorControlTargetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
}
ActuatorControlTargetResponse::ActuatorControlTargetResponse(const ActuatorControlTargetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_actuator_control_target()) {
    actuator_control_target_ = new ::mavsdk::rpc::telemetry::ActuatorControlTarget(*from.actuator_control_target_);
  } else {
    actuator_control_target_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
}

void ActuatorControlTargetResponse::SharedCtor() {
actuator_control_target_ = nullptr;
}

ActuatorControlTargetResponse::~ActuatorControlTargetResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActuatorControlTargetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete actuator_control_target_;
}

void ActuatorControlTargetResponse::ArenaDtor(void* object) {
  ActuatorControlTargetResponse* _this = reinterpret_cast< ActuatorControlTargetResponse* >(object);
  (void)_this;
}
void ActuatorControlTargetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActuatorControlTargetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActuatorControlTargetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && actuator_control_target_ != nullptr) {
    delete actuator_control_target_;
  }
  actuator_control_target_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActuatorControlTargetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.ActuatorControlTarget actuator_control_target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_actuator_control_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActuatorControlTargetResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.ActuatorControlTarget actuator_control_target = 1;
  if (this->has_actuator_control_target()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::actuator_control_target(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
  return target;
}

size_t ActuatorControlTargetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.ActuatorControlTarget actuator_control_target = 1;
  if (this->has_actuator_control_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actuator_control_target_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActuatorControlTargetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ActuatorControlTargetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActuatorControlTargetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
    MergeFrom(*source);
  }
}

void ActuatorControlTargetResponse::MergeFrom(const ActuatorControlTargetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_actuator_control_target()) {
    _internal_mutable_actuator_control_target()->::mavsdk::rpc::telemetry::ActuatorControlTarget::MergeFrom(from._internal_actuator_control_target());
  }
}

void ActuatorControlTargetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActuatorControlTargetResponse::CopyFrom(const ActuatorControlTargetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActuatorControlTargetResponse::IsInitialized() const {
  return true;
}

void ActuatorControlTargetResponse::InternalSwap(ActuatorControlTargetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(actuator_control_target_, other->actuator_control_target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActuatorControlTargetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeActuatorOutputStatusRequest::_Internal {
 public:
};

SubscribeActuatorOutputStatusRequest::SubscribeActuatorOutputStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest)
}
SubscribeActuatorOutputStatusRequest::SubscribeActuatorOutputStatusRequest(const SubscribeActuatorOutputStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest)
}

void SubscribeActuatorOutputStatusRequest::SharedCtor() {
}

SubscribeActuatorOutputStatusRequest::~SubscribeActuatorOutputStatusRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeActuatorOutputStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeActuatorOutputStatusRequest::ArenaDtor(void* object) {
  SubscribeActuatorOutputStatusRequest* _this = reinterpret_cast< SubscribeActuatorOutputStatusRequest* >(object);
  (void)_this;
}
void SubscribeActuatorOutputStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeActuatorOutputStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeActuatorOutputStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeActuatorOutputStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeActuatorOutputStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest)
  return target;
}

size_t SubscribeActuatorOutputStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeActuatorOutputStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeActuatorOutputStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeActuatorOutputStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest)
    MergeFrom(*source);
  }
}

void SubscribeActuatorOutputStatusRequest::MergeFrom(const SubscribeActuatorOutputStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeActuatorOutputStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeActuatorOutputStatusRequest::CopyFrom(const SubscribeActuatorOutputStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeActuatorOutputStatusRequest::IsInitialized() const {
  return true;
}

void SubscribeActuatorOutputStatusRequest::InternalSwap(SubscribeActuatorOutputStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeActuatorOutputStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ActuatorOutputStatusResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::ActuatorOutputStatus& actuator_output_status(const ActuatorOutputStatusResponse* msg);
};

const ::mavsdk::rpc::telemetry::ActuatorOutputStatus&
ActuatorOutputStatusResponse::_Internal::actuator_output_status(const ActuatorOutputStatusResponse* msg) {
  return *msg->actuator_output_status_;
}
ActuatorOutputStatusResponse::ActuatorOutputStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
}
ActuatorOutputStatusResponse::ActuatorOutputStatusResponse(const ActuatorOutputStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_actuator_output_status()) {
    actuator_output_status_ = new ::mavsdk::rpc::telemetry::ActuatorOutputStatus(*from.actuator_output_status_);
  } else {
    actuator_output_status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
}

void ActuatorOutputStatusResponse::SharedCtor() {
actuator_output_status_ = nullptr;
}

ActuatorOutputStatusResponse::~ActuatorOutputStatusResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActuatorOutputStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete actuator_output_status_;
}

void ActuatorOutputStatusResponse::ArenaDtor(void* object) {
  ActuatorOutputStatusResponse* _this = reinterpret_cast< ActuatorOutputStatusResponse* >(object);
  (void)_this;
}
void ActuatorOutputStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActuatorOutputStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActuatorOutputStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && actuator_output_status_ != nullptr) {
    delete actuator_output_status_;
  }
  actuator_output_status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActuatorOutputStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.ActuatorOutputStatus actuator_output_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_actuator_output_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActuatorOutputStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.ActuatorOutputStatus actuator_output_status = 1;
  if (this->has_actuator_output_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::actuator_output_status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
  return target;
}

size_t ActuatorOutputStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.ActuatorOutputStatus actuator_output_status = 1;
  if (this->has_actuator_output_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actuator_output_status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActuatorOutputStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ActuatorOutputStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActuatorOutputStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
    MergeFrom(*source);
  }
}

void ActuatorOutputStatusResponse::MergeFrom(const ActuatorOutputStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_actuator_output_status()) {
    _internal_mutable_actuator_output_status()->::mavsdk::rpc::telemetry::ActuatorOutputStatus::MergeFrom(from._internal_actuator_output_status());
  }
}

void ActuatorOutputStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActuatorOutputStatusResponse::CopyFrom(const ActuatorOutputStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActuatorOutputStatusResponse::IsInitialized() const {
  return true;
}

void ActuatorOutputStatusResponse::InternalSwap(ActuatorOutputStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(actuator_output_status_, other->actuator_output_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActuatorOutputStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeOdometryRequest::_Internal {
 public:
};

SubscribeOdometryRequest::SubscribeOdometryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeOdometryRequest)
}
SubscribeOdometryRequest::SubscribeOdometryRequest(const SubscribeOdometryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeOdometryRequest)
}

void SubscribeOdometryRequest::SharedCtor() {
}

SubscribeOdometryRequest::~SubscribeOdometryRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeOdometryRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeOdometryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeOdometryRequest::ArenaDtor(void* object) {
  SubscribeOdometryRequest* _this = reinterpret_cast< SubscribeOdometryRequest* >(object);
  (void)_this;
}
void SubscribeOdometryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeOdometryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeOdometryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeOdometryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeOdometryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeOdometryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeOdometryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeOdometryRequest)
  return target;
}

size_t SubscribeOdometryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeOdometryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeOdometryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeOdometryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeOdometryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeOdometryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeOdometryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeOdometryRequest)
    MergeFrom(*source);
  }
}

void SubscribeOdometryRequest::MergeFrom(const SubscribeOdometryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeOdometryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeOdometryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeOdometryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeOdometryRequest::CopyFrom(const SubscribeOdometryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeOdometryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeOdometryRequest::IsInitialized() const {
  return true;
}

void SubscribeOdometryRequest::InternalSwap(SubscribeOdometryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeOdometryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OdometryResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::Odometry& odometry(const OdometryResponse* msg);
};

const ::mavsdk::rpc::telemetry::Odometry&
OdometryResponse::_Internal::odometry(const OdometryResponse* msg) {
  return *msg->odometry_;
}
OdometryResponse::OdometryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.OdometryResponse)
}
OdometryResponse::OdometryResponse(const OdometryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_odometry()) {
    odometry_ = new ::mavsdk::rpc::telemetry::Odometry(*from.odometry_);
  } else {
    odometry_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.OdometryResponse)
}

void OdometryResponse::SharedCtor() {
odometry_ = nullptr;
}

OdometryResponse::~OdometryResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.OdometryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OdometryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete odometry_;
}

void OdometryResponse::ArenaDtor(void* object) {
  OdometryResponse* _this = reinterpret_cast< OdometryResponse* >(object);
  (void)_this;
}
void OdometryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OdometryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OdometryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.OdometryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && odometry_ != nullptr) {
    delete odometry_;
  }
  odometry_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OdometryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.Odometry odometry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_odometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OdometryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.OdometryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Odometry odometry = 1;
  if (this->has_odometry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::odometry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.OdometryResponse)
  return target;
}

size_t OdometryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.OdometryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Odometry odometry = 1;
  if (this->has_odometry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *odometry_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OdometryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.OdometryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OdometryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OdometryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.OdometryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.OdometryResponse)
    MergeFrom(*source);
  }
}

void OdometryResponse::MergeFrom(const OdometryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.OdometryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_odometry()) {
    _internal_mutable_odometry()->::mavsdk::rpc::telemetry::Odometry::MergeFrom(from._internal_odometry());
  }
}

void OdometryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.OdometryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OdometryResponse::CopyFrom(const OdometryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.OdometryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OdometryResponse::IsInitialized() const {
  return true;
}

void OdometryResponse::InternalSwap(OdometryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(odometry_, other->odometry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OdometryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribePositionVelocityNedRequest::_Internal {
 public:
};

SubscribePositionVelocityNedRequest::SubscribePositionVelocityNedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest)
}
SubscribePositionVelocityNedRequest::SubscribePositionVelocityNedRequest(const SubscribePositionVelocityNedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest)
}

void SubscribePositionVelocityNedRequest::SharedCtor() {
}

SubscribePositionVelocityNedRequest::~SubscribePositionVelocityNedRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribePositionVelocityNedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribePositionVelocityNedRequest::ArenaDtor(void* object) {
  SubscribePositionVelocityNedRequest* _this = reinterpret_cast< SubscribePositionVelocityNedRequest* >(object);
  (void)_this;
}
void SubscribePositionVelocityNedRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribePositionVelocityNedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribePositionVelocityNedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribePositionVelocityNedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribePositionVelocityNedRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest)
  return target;
}

size_t SubscribePositionVelocityNedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribePositionVelocityNedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribePositionVelocityNedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribePositionVelocityNedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest)
    MergeFrom(*source);
  }
}

void SubscribePositionVelocityNedRequest::MergeFrom(const SubscribePositionVelocityNedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribePositionVelocityNedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribePositionVelocityNedRequest::CopyFrom(const SubscribePositionVelocityNedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribePositionVelocityNedRequest::IsInitialized() const {
  return true;
}

void SubscribePositionVelocityNedRequest::InternalSwap(SubscribePositionVelocityNedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribePositionVelocityNedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PositionVelocityNedResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::PositionVelocityNed& position_velocity_ned(const PositionVelocityNedResponse* msg);
};

const ::mavsdk::rpc::telemetry::PositionVelocityNed&
PositionVelocityNedResponse::_Internal::position_velocity_ned(const PositionVelocityNedResponse* msg) {
  return *msg->position_velocity_ned_;
}
PositionVelocityNedResponse::PositionVelocityNedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
}
PositionVelocityNedResponse::PositionVelocityNedResponse(const PositionVelocityNedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position_velocity_ned()) {
    position_velocity_ned_ = new ::mavsdk::rpc::telemetry::PositionVelocityNed(*from.position_velocity_ned_);
  } else {
    position_velocity_ned_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
}

void PositionVelocityNedResponse::SharedCtor() {
position_velocity_ned_ = nullptr;
}

PositionVelocityNedResponse::~PositionVelocityNedResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PositionVelocityNedResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_velocity_ned_;
}

void PositionVelocityNedResponse::ArenaDtor(void* object) {
  PositionVelocityNedResponse* _this = reinterpret_cast< PositionVelocityNedResponse* >(object);
  (void)_this;
}
void PositionVelocityNedResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionVelocityNedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PositionVelocityNedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_velocity_ned_ != nullptr) {
    delete position_velocity_ned_;
  }
  position_velocity_ned_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionVelocityNedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.PositionVelocityNed position_velocity_ned = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_velocity_ned(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionVelocityNedResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.PositionVelocityNed position_velocity_ned = 1;
  if (this->has_position_velocity_ned()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position_velocity_ned(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
  return target;
}

size_t PositionVelocityNedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.PositionVelocityNed position_velocity_ned = 1;
  if (this->has_position_velocity_ned()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_velocity_ned_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionVelocityNedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionVelocityNedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionVelocityNedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
    MergeFrom(*source);
  }
}

void PositionVelocityNedResponse::MergeFrom(const PositionVelocityNedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position_velocity_ned()) {
    _internal_mutable_position_velocity_ned()->::mavsdk::rpc::telemetry::PositionVelocityNed::MergeFrom(from._internal_position_velocity_ned());
  }
}

void PositionVelocityNedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionVelocityNedResponse::CopyFrom(const PositionVelocityNedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionVelocityNedResponse::IsInitialized() const {
  return true;
}

void PositionVelocityNedResponse::InternalSwap(PositionVelocityNedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(position_velocity_ned_, other->position_velocity_ned_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionVelocityNedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeGroundTruthRequest::_Internal {
 public:
};

SubscribeGroundTruthRequest::SubscribeGroundTruthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeGroundTruthRequest)
}
SubscribeGroundTruthRequest::SubscribeGroundTruthRequest(const SubscribeGroundTruthRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeGroundTruthRequest)
}

void SubscribeGroundTruthRequest::SharedCtor() {
}

SubscribeGroundTruthRequest::~SubscribeGroundTruthRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeGroundTruthRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeGroundTruthRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeGroundTruthRequest::ArenaDtor(void* object) {
  SubscribeGroundTruthRequest* _this = reinterpret_cast< SubscribeGroundTruthRequest* >(object);
  (void)_this;
}
void SubscribeGroundTruthRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeGroundTruthRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeGroundTruthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeGroundTruthRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeGroundTruthRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeGroundTruthRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeGroundTruthRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeGroundTruthRequest)
  return target;
}

size_t SubscribeGroundTruthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeGroundTruthRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeGroundTruthRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeGroundTruthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeGroundTruthRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeGroundTruthRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeGroundTruthRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeGroundTruthRequest)
    MergeFrom(*source);
  }
}

void SubscribeGroundTruthRequest::MergeFrom(const SubscribeGroundTruthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeGroundTruthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeGroundTruthRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeGroundTruthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeGroundTruthRequest::CopyFrom(const SubscribeGroundTruthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeGroundTruthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeGroundTruthRequest::IsInitialized() const {
  return true;
}

void SubscribeGroundTruthRequest::InternalSwap(SubscribeGroundTruthRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeGroundTruthRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GroundTruthResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::GroundTruth& ground_truth(const GroundTruthResponse* msg);
};

const ::mavsdk::rpc::telemetry::GroundTruth&
GroundTruthResponse::_Internal::ground_truth(const GroundTruthResponse* msg) {
  return *msg->ground_truth_;
}
GroundTruthResponse::GroundTruthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.GroundTruthResponse)
}
GroundTruthResponse::GroundTruthResponse(const GroundTruthResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ground_truth()) {
    ground_truth_ = new ::mavsdk::rpc::telemetry::GroundTruth(*from.ground_truth_);
  } else {
    ground_truth_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.GroundTruthResponse)
}

void GroundTruthResponse::SharedCtor() {
ground_truth_ = nullptr;
}

GroundTruthResponse::~GroundTruthResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.GroundTruthResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroundTruthResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ground_truth_;
}

void GroundTruthResponse::ArenaDtor(void* object) {
  GroundTruthResponse* _this = reinterpret_cast< GroundTruthResponse* >(object);
  (void)_this;
}
void GroundTruthResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroundTruthResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GroundTruthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.GroundTruthResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ground_truth_ != nullptr) {
    delete ground_truth_;
  }
  ground_truth_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroundTruthResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.GroundTruth ground_truth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ground_truth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroundTruthResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.GroundTruthResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.GroundTruth ground_truth = 1;
  if (this->has_ground_truth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ground_truth(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.GroundTruthResponse)
  return target;
}

size_t GroundTruthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.GroundTruthResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.GroundTruth ground_truth = 1;
  if (this->has_ground_truth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ground_truth_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroundTruthResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.GroundTruthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GroundTruthResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroundTruthResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.GroundTruthResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.GroundTruthResponse)
    MergeFrom(*source);
  }
}

void GroundTruthResponse::MergeFrom(const GroundTruthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.GroundTruthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ground_truth()) {
    _internal_mutable_ground_truth()->::mavsdk::rpc::telemetry::GroundTruth::MergeFrom(from._internal_ground_truth());
  }
}

void GroundTruthResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.GroundTruthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroundTruthResponse::CopyFrom(const GroundTruthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.GroundTruthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroundTruthResponse::IsInitialized() const {
  return true;
}

void GroundTruthResponse::InternalSwap(GroundTruthResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ground_truth_, other->ground_truth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroundTruthResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeFixedwingMetricsRequest::_Internal {
 public:
};

SubscribeFixedwingMetricsRequest::SubscribeFixedwingMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest)
}
SubscribeFixedwingMetricsRequest::SubscribeFixedwingMetricsRequest(const SubscribeFixedwingMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest)
}

void SubscribeFixedwingMetricsRequest::SharedCtor() {
}

SubscribeFixedwingMetricsRequest::~SubscribeFixedwingMetricsRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeFixedwingMetricsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeFixedwingMetricsRequest::ArenaDtor(void* object) {
  SubscribeFixedwingMetricsRequest* _this = reinterpret_cast< SubscribeFixedwingMetricsRequest* >(object);
  (void)_this;
}
void SubscribeFixedwingMetricsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeFixedwingMetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeFixedwingMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeFixedwingMetricsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeFixedwingMetricsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest)
  return target;
}

size_t SubscribeFixedwingMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeFixedwingMetricsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeFixedwingMetricsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeFixedwingMetricsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest)
    MergeFrom(*source);
  }
}

void SubscribeFixedwingMetricsRequest::MergeFrom(const SubscribeFixedwingMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeFixedwingMetricsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeFixedwingMetricsRequest::CopyFrom(const SubscribeFixedwingMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeFixedwingMetricsRequest::IsInitialized() const {
  return true;
}

void SubscribeFixedwingMetricsRequest::InternalSwap(SubscribeFixedwingMetricsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeFixedwingMetricsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FixedwingMetricsResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::FixedwingMetrics& fixedwing_metrics(const FixedwingMetricsResponse* msg);
};

const ::mavsdk::rpc::telemetry::FixedwingMetrics&
FixedwingMetricsResponse::_Internal::fixedwing_metrics(const FixedwingMetricsResponse* msg) {
  return *msg->fixedwing_metrics_;
}
FixedwingMetricsResponse::FixedwingMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
}
FixedwingMetricsResponse::FixedwingMetricsResponse(const FixedwingMetricsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fixedwing_metrics()) {
    fixedwing_metrics_ = new ::mavsdk::rpc::telemetry::FixedwingMetrics(*from.fixedwing_metrics_);
  } else {
    fixedwing_metrics_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
}

void FixedwingMetricsResponse::SharedCtor() {
fixedwing_metrics_ = nullptr;
}

FixedwingMetricsResponse::~FixedwingMetricsResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FixedwingMetricsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fixedwing_metrics_;
}

void FixedwingMetricsResponse::ArenaDtor(void* object) {
  FixedwingMetricsResponse* _this = reinterpret_cast< FixedwingMetricsResponse* >(object);
  (void)_this;
}
void FixedwingMetricsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FixedwingMetricsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FixedwingMetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && fixedwing_metrics_ != nullptr) {
    delete fixedwing_metrics_;
  }
  fixedwing_metrics_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FixedwingMetricsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.FixedwingMetrics fixedwing_metrics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixedwing_metrics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FixedwingMetricsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.FixedwingMetrics fixedwing_metrics = 1;
  if (this->has_fixedwing_metrics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fixedwing_metrics(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
  return target;
}

size_t FixedwingMetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.FixedwingMetrics fixedwing_metrics = 1;
  if (this->has_fixedwing_metrics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fixedwing_metrics_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FixedwingMetricsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FixedwingMetricsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FixedwingMetricsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
    MergeFrom(*source);
  }
}

void FixedwingMetricsResponse::MergeFrom(const FixedwingMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fixedwing_metrics()) {
    _internal_mutable_fixedwing_metrics()->::mavsdk::rpc::telemetry::FixedwingMetrics::MergeFrom(from._internal_fixedwing_metrics());
  }
}

void FixedwingMetricsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedwingMetricsResponse::CopyFrom(const FixedwingMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedwingMetricsResponse::IsInitialized() const {
  return true;
}

void FixedwingMetricsResponse::InternalSwap(FixedwingMetricsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(fixedwing_metrics_, other->fixedwing_metrics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FixedwingMetricsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeImuRequest::_Internal {
 public:
};

SubscribeImuRequest::SubscribeImuRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeImuRequest)
}
SubscribeImuRequest::SubscribeImuRequest(const SubscribeImuRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeImuRequest)
}

void SubscribeImuRequest::SharedCtor() {
}

SubscribeImuRequest::~SubscribeImuRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeImuRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeImuRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeImuRequest::ArenaDtor(void* object) {
  SubscribeImuRequest* _this = reinterpret_cast< SubscribeImuRequest* >(object);
  (void)_this;
}
void SubscribeImuRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeImuRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeImuRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeImuRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeImuRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeImuRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeImuRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeImuRequest)
  return target;
}

size_t SubscribeImuRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeImuRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeImuRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeImuRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeImuRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeImuRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeImuRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeImuRequest)
    MergeFrom(*source);
  }
}

void SubscribeImuRequest::MergeFrom(const SubscribeImuRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeImuRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeImuRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeImuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeImuRequest::CopyFrom(const SubscribeImuRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeImuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeImuRequest::IsInitialized() const {
  return true;
}

void SubscribeImuRequest::InternalSwap(SubscribeImuRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeImuRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ImuResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::Imu& imu(const ImuResponse* msg);
};

const ::mavsdk::rpc::telemetry::Imu&
ImuResponse::_Internal::imu(const ImuResponse* msg) {
  return *msg->imu_;
}
ImuResponse::ImuResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.ImuResponse)
}
ImuResponse::ImuResponse(const ImuResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_imu()) {
    imu_ = new ::mavsdk::rpc::telemetry::Imu(*from.imu_);
  } else {
    imu_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.ImuResponse)
}

void ImuResponse::SharedCtor() {
imu_ = nullptr;
}

ImuResponse::~ImuResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.ImuResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImuResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete imu_;
}

void ImuResponse::ArenaDtor(void* object) {
  ImuResponse* _this = reinterpret_cast< ImuResponse* >(object);
  (void)_this;
}
void ImuResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImuResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImuResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.ImuResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && imu_ != nullptr) {
    delete imu_;
  }
  imu_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImuResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.Imu imu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_imu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImuResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.ImuResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Imu imu = 1;
  if (this->has_imu()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::imu(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.ImuResponse)
  return target;
}

size_t ImuResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.ImuResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Imu imu = 1;
  if (this->has_imu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *imu_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImuResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.ImuResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ImuResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImuResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.ImuResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.ImuResponse)
    MergeFrom(*source);
  }
}

void ImuResponse::MergeFrom(const ImuResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.ImuResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_imu()) {
    _internal_mutable_imu()->::mavsdk::rpc::telemetry::Imu::MergeFrom(from._internal_imu());
  }
}

void ImuResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.ImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuResponse::CopyFrom(const ImuResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.ImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuResponse::IsInitialized() const {
  return true;
}

void ImuResponse::InternalSwap(ImuResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(imu_, other->imu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImuResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeScaledImuRequest::_Internal {
 public:
};

SubscribeScaledImuRequest::SubscribeScaledImuRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeScaledImuRequest)
}
SubscribeScaledImuRequest::SubscribeScaledImuRequest(const SubscribeScaledImuRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeScaledImuRequest)
}

void SubscribeScaledImuRequest::SharedCtor() {
}

SubscribeScaledImuRequest::~SubscribeScaledImuRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeScaledImuRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeScaledImuRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeScaledImuRequest::ArenaDtor(void* object) {
  SubscribeScaledImuRequest* _this = reinterpret_cast< SubscribeScaledImuRequest* >(object);
  (void)_this;
}
void SubscribeScaledImuRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeScaledImuRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeScaledImuRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeScaledImuRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeScaledImuRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeScaledImuRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeScaledImuRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeScaledImuRequest)
  return target;
}

size_t SubscribeScaledImuRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeScaledImuRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeScaledImuRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeScaledImuRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeScaledImuRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeScaledImuRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeScaledImuRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeScaledImuRequest)
    MergeFrom(*source);
  }
}

void SubscribeScaledImuRequest::MergeFrom(const SubscribeScaledImuRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeScaledImuRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeScaledImuRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeScaledImuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeScaledImuRequest::CopyFrom(const SubscribeScaledImuRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeScaledImuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeScaledImuRequest::IsInitialized() const {
  return true;
}

void SubscribeScaledImuRequest::InternalSwap(SubscribeScaledImuRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeScaledImuRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScaledImuResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::Imu& imu(const ScaledImuResponse* msg);
};

const ::mavsdk::rpc::telemetry::Imu&
ScaledImuResponse::_Internal::imu(const ScaledImuResponse* msg) {
  return *msg->imu_;
}
ScaledImuResponse::ScaledImuResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.ScaledImuResponse)
}
ScaledImuResponse::ScaledImuResponse(const ScaledImuResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_imu()) {
    imu_ = new ::mavsdk::rpc::telemetry::Imu(*from.imu_);
  } else {
    imu_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.ScaledImuResponse)
}

void ScaledImuResponse::SharedCtor() {
imu_ = nullptr;
}

ScaledImuResponse::~ScaledImuResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.ScaledImuResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScaledImuResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete imu_;
}

void ScaledImuResponse::ArenaDtor(void* object) {
  ScaledImuResponse* _this = reinterpret_cast< ScaledImuResponse* >(object);
  (void)_this;
}
void ScaledImuResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScaledImuResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScaledImuResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.ScaledImuResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && imu_ != nullptr) {
    delete imu_;
  }
  imu_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScaledImuResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.Imu imu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_imu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScaledImuResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.ScaledImuResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Imu imu = 1;
  if (this->has_imu()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::imu(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.ScaledImuResponse)
  return target;
}

size_t ScaledImuResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.ScaledImuResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Imu imu = 1;
  if (this->has_imu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *imu_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScaledImuResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.ScaledImuResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ScaledImuResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScaledImuResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.ScaledImuResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.ScaledImuResponse)
    MergeFrom(*source);
  }
}

void ScaledImuResponse::MergeFrom(const ScaledImuResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.ScaledImuResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_imu()) {
    _internal_mutable_imu()->::mavsdk::rpc::telemetry::Imu::MergeFrom(from._internal_imu());
  }
}

void ScaledImuResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.ScaledImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScaledImuResponse::CopyFrom(const ScaledImuResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.ScaledImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScaledImuResponse::IsInitialized() const {
  return true;
}

void ScaledImuResponse::InternalSwap(ScaledImuResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(imu_, other->imu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScaledImuResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeRawImuRequest::_Internal {
 public:
};

SubscribeRawImuRequest::SubscribeRawImuRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeRawImuRequest)
}
SubscribeRawImuRequest::SubscribeRawImuRequest(const SubscribeRawImuRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeRawImuRequest)
}

void SubscribeRawImuRequest::SharedCtor() {
}

SubscribeRawImuRequest::~SubscribeRawImuRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeRawImuRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeRawImuRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeRawImuRequest::ArenaDtor(void* object) {
  SubscribeRawImuRequest* _this = reinterpret_cast< SubscribeRawImuRequest* >(object);
  (void)_this;
}
void SubscribeRawImuRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeRawImuRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeRawImuRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeRawImuRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeRawImuRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeRawImuRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeRawImuRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeRawImuRequest)
  return target;
}

size_t SubscribeRawImuRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeRawImuRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeRawImuRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeRawImuRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeRawImuRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeRawImuRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeRawImuRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeRawImuRequest)
    MergeFrom(*source);
  }
}

void SubscribeRawImuRequest::MergeFrom(const SubscribeRawImuRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeRawImuRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeRawImuRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeRawImuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeRawImuRequest::CopyFrom(const SubscribeRawImuRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeRawImuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRawImuRequest::IsInitialized() const {
  return true;
}

void SubscribeRawImuRequest::InternalSwap(SubscribeRawImuRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeRawImuRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RawImuResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::Imu& imu(const RawImuResponse* msg);
};

const ::mavsdk::rpc::telemetry::Imu&
RawImuResponse::_Internal::imu(const RawImuResponse* msg) {
  return *msg->imu_;
}
RawImuResponse::RawImuResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.RawImuResponse)
}
RawImuResponse::RawImuResponse(const RawImuResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_imu()) {
    imu_ = new ::mavsdk::rpc::telemetry::Imu(*from.imu_);
  } else {
    imu_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.RawImuResponse)
}

void RawImuResponse::SharedCtor() {
imu_ = nullptr;
}

RawImuResponse::~RawImuResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.RawImuResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RawImuResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete imu_;
}

void RawImuResponse::ArenaDtor(void* object) {
  RawImuResponse* _this = reinterpret_cast< RawImuResponse* >(object);
  (void)_this;
}
void RawImuResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RawImuResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RawImuResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.RawImuResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && imu_ != nullptr) {
    delete imu_;
  }
  imu_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawImuResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.Imu imu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_imu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawImuResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.RawImuResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Imu imu = 1;
  if (this->has_imu()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::imu(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.RawImuResponse)
  return target;
}

size_t RawImuResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.RawImuResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Imu imu = 1;
  if (this->has_imu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *imu_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawImuResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.RawImuResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RawImuResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawImuResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.RawImuResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.RawImuResponse)
    MergeFrom(*source);
  }
}

void RawImuResponse::MergeFrom(const RawImuResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.RawImuResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_imu()) {
    _internal_mutable_imu()->::mavsdk::rpc::telemetry::Imu::MergeFrom(from._internal_imu());
  }
}

void RawImuResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.RawImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawImuResponse::CopyFrom(const RawImuResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.RawImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawImuResponse::IsInitialized() const {
  return true;
}

void RawImuResponse::InternalSwap(RawImuResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(imu_, other->imu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawImuResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeHealthAllOkRequest::_Internal {
 public:
};

SubscribeHealthAllOkRequest::SubscribeHealthAllOkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest)
}
SubscribeHealthAllOkRequest::SubscribeHealthAllOkRequest(const SubscribeHealthAllOkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest)
}

void SubscribeHealthAllOkRequest::SharedCtor() {
}

SubscribeHealthAllOkRequest::~SubscribeHealthAllOkRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeHealthAllOkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeHealthAllOkRequest::ArenaDtor(void* object) {
  SubscribeHealthAllOkRequest* _this = reinterpret_cast< SubscribeHealthAllOkRequest* >(object);
  (void)_this;
}
void SubscribeHealthAllOkRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeHealthAllOkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeHealthAllOkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeHealthAllOkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeHealthAllOkRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest)
  return target;
}

size_t SubscribeHealthAllOkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeHealthAllOkRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeHealthAllOkRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeHealthAllOkRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest)
    MergeFrom(*source);
  }
}

void SubscribeHealthAllOkRequest::MergeFrom(const SubscribeHealthAllOkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeHealthAllOkRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeHealthAllOkRequest::CopyFrom(const SubscribeHealthAllOkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeHealthAllOkRequest::IsInitialized() const {
  return true;
}

void SubscribeHealthAllOkRequest::InternalSwap(SubscribeHealthAllOkRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeHealthAllOkRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HealthAllOkResponse::_Internal {
 public:
};

HealthAllOkResponse::HealthAllOkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.HealthAllOkResponse)
}
HealthAllOkResponse::HealthAllOkResponse(const HealthAllOkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_health_all_ok_ = from.is_health_all_ok_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.HealthAllOkResponse)
}

void HealthAllOkResponse::SharedCtor() {
is_health_all_ok_ = false;
}

HealthAllOkResponse::~HealthAllOkResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.HealthAllOkResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HealthAllOkResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HealthAllOkResponse::ArenaDtor(void* object) {
  HealthAllOkResponse* _this = reinterpret_cast< HealthAllOkResponse* >(object);
  (void)_this;
}
void HealthAllOkResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HealthAllOkResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HealthAllOkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.HealthAllOkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_health_all_ok_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthAllOkResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_health_all_ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_health_all_ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HealthAllOkResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.HealthAllOkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_health_all_ok = 1;
  if (this->is_health_all_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_health_all_ok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.HealthAllOkResponse)
  return target;
}

size_t HealthAllOkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.HealthAllOkResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_health_all_ok = 1;
  if (this->is_health_all_ok() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HealthAllOkResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.HealthAllOkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthAllOkResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HealthAllOkResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.HealthAllOkResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.HealthAllOkResponse)
    MergeFrom(*source);
  }
}

void HealthAllOkResponse::MergeFrom(const HealthAllOkResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.HealthAllOkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_health_all_ok() != 0) {
    _internal_set_is_health_all_ok(from._internal_is_health_all_ok());
  }
}

void HealthAllOkResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.HealthAllOkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthAllOkResponse::CopyFrom(const HealthAllOkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.HealthAllOkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthAllOkResponse::IsInitialized() const {
  return true;
}

void HealthAllOkResponse::InternalSwap(HealthAllOkResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(is_health_all_ok_, other->is_health_all_ok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthAllOkResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeUnixEpochTimeRequest::_Internal {
 public:
};

SubscribeUnixEpochTimeRequest::SubscribeUnixEpochTimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest)
}
SubscribeUnixEpochTimeRequest::SubscribeUnixEpochTimeRequest(const SubscribeUnixEpochTimeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest)
}

void SubscribeUnixEpochTimeRequest::SharedCtor() {
}

SubscribeUnixEpochTimeRequest::~SubscribeUnixEpochTimeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeUnixEpochTimeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeUnixEpochTimeRequest::ArenaDtor(void* object) {
  SubscribeUnixEpochTimeRequest* _this = reinterpret_cast< SubscribeUnixEpochTimeRequest* >(object);
  (void)_this;
}
void SubscribeUnixEpochTimeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeUnixEpochTimeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeUnixEpochTimeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeUnixEpochTimeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeUnixEpochTimeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest)
  return target;
}

size_t SubscribeUnixEpochTimeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeUnixEpochTimeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeUnixEpochTimeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeUnixEpochTimeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest)
    MergeFrom(*source);
  }
}

void SubscribeUnixEpochTimeRequest::MergeFrom(const SubscribeUnixEpochTimeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeUnixEpochTimeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeUnixEpochTimeRequest::CopyFrom(const SubscribeUnixEpochTimeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeUnixEpochTimeRequest::IsInitialized() const {
  return true;
}

void SubscribeUnixEpochTimeRequest::InternalSwap(SubscribeUnixEpochTimeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeUnixEpochTimeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UnixEpochTimeResponse::_Internal {
 public:
};

UnixEpochTimeResponse::UnixEpochTimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
}
UnixEpochTimeResponse::UnixEpochTimeResponse(const UnixEpochTimeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_us_ = from.time_us_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
}

void UnixEpochTimeResponse::SharedCtor() {
time_us_ = PROTOBUF_ULONGLONG(0);
}

UnixEpochTimeResponse::~UnixEpochTimeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnixEpochTimeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnixEpochTimeResponse::ArenaDtor(void* object) {
  UnixEpochTimeResponse* _this = reinterpret_cast< UnixEpochTimeResponse* >(object);
  (void)_this;
}
void UnixEpochTimeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnixEpochTimeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnixEpochTimeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_us_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnixEpochTimeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 time_us = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnixEpochTimeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time_us = 1;
  if (this->time_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_time_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
  return target;
}

size_t UnixEpochTimeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 time_us = 1;
  if (this->time_us() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_time_us());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnixEpochTimeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UnixEpochTimeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnixEpochTimeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
    MergeFrom(*source);
  }
}

void UnixEpochTimeResponse::MergeFrom(const UnixEpochTimeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time_us() != 0) {
    _internal_set_time_us(from._internal_time_us());
  }
}

void UnixEpochTimeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnixEpochTimeResponse::CopyFrom(const UnixEpochTimeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnixEpochTimeResponse::IsInitialized() const {
  return true;
}

void UnixEpochTimeResponse::InternalSwap(UnixEpochTimeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(time_us_, other->time_us_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnixEpochTimeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeDistanceSensorRequest::_Internal {
 public:
};

SubscribeDistanceSensorRequest::SubscribeDistanceSensorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeDistanceSensorRequest)
}
SubscribeDistanceSensorRequest::SubscribeDistanceSensorRequest(const SubscribeDistanceSensorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeDistanceSensorRequest)
}

void SubscribeDistanceSensorRequest::SharedCtor() {
}

SubscribeDistanceSensorRequest::~SubscribeDistanceSensorRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeDistanceSensorRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeDistanceSensorRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeDistanceSensorRequest::ArenaDtor(void* object) {
  SubscribeDistanceSensorRequest* _this = reinterpret_cast< SubscribeDistanceSensorRequest* >(object);
  (void)_this;
}
void SubscribeDistanceSensorRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeDistanceSensorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeDistanceSensorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeDistanceSensorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeDistanceSensorRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeDistanceSensorRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeDistanceSensorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeDistanceSensorRequest)
  return target;
}

size_t SubscribeDistanceSensorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeDistanceSensorRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeDistanceSensorRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeDistanceSensorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeDistanceSensorRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeDistanceSensorRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeDistanceSensorRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeDistanceSensorRequest)
    MergeFrom(*source);
  }
}

void SubscribeDistanceSensorRequest::MergeFrom(const SubscribeDistanceSensorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeDistanceSensorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeDistanceSensorRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeDistanceSensorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeDistanceSensorRequest::CopyFrom(const SubscribeDistanceSensorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeDistanceSensorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeDistanceSensorRequest::IsInitialized() const {
  return true;
}

void SubscribeDistanceSensorRequest::InternalSwap(SubscribeDistanceSensorRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeDistanceSensorRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DistanceSensorResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::DistanceSensor& distance_sensor(const DistanceSensorResponse* msg);
};

const ::mavsdk::rpc::telemetry::DistanceSensor&
DistanceSensorResponse::_Internal::distance_sensor(const DistanceSensorResponse* msg) {
  return *msg->distance_sensor_;
}
DistanceSensorResponse::DistanceSensorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.DistanceSensorResponse)
}
DistanceSensorResponse::DistanceSensorResponse(const DistanceSensorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_distance_sensor()) {
    distance_sensor_ = new ::mavsdk::rpc::telemetry::DistanceSensor(*from.distance_sensor_);
  } else {
    distance_sensor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.DistanceSensorResponse)
}

void DistanceSensorResponse::SharedCtor() {
distance_sensor_ = nullptr;
}

DistanceSensorResponse::~DistanceSensorResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.DistanceSensorResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DistanceSensorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete distance_sensor_;
}

void DistanceSensorResponse::ArenaDtor(void* object) {
  DistanceSensorResponse* _this = reinterpret_cast< DistanceSensorResponse* >(object);
  (void)_this;
}
void DistanceSensorResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DistanceSensorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DistanceSensorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.DistanceSensorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && distance_sensor_ != nullptr) {
    delete distance_sensor_;
  }
  distance_sensor_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DistanceSensorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.DistanceSensor distance_sensor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_distance_sensor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DistanceSensorResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.DistanceSensorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.DistanceSensor distance_sensor = 1;
  if (this->has_distance_sensor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::distance_sensor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.DistanceSensorResponse)
  return target;
}

size_t DistanceSensorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.DistanceSensorResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.DistanceSensor distance_sensor = 1;
  if (this->has_distance_sensor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *distance_sensor_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistanceSensorResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.DistanceSensorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DistanceSensorResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DistanceSensorResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.DistanceSensorResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.DistanceSensorResponse)
    MergeFrom(*source);
  }
}

void DistanceSensorResponse::MergeFrom(const DistanceSensorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.DistanceSensorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_distance_sensor()) {
    _internal_mutable_distance_sensor()->::mavsdk::rpc::telemetry::DistanceSensor::MergeFrom(from._internal_distance_sensor());
  }
}

void DistanceSensorResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.DistanceSensorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistanceSensorResponse::CopyFrom(const DistanceSensorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.DistanceSensorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistanceSensorResponse::IsInitialized() const {
  return true;
}

void DistanceSensorResponse::InternalSwap(DistanceSensorResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(distance_sensor_, other->distance_sensor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DistanceSensorResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeScaledPressureRequest::_Internal {
 public:
};

SubscribeScaledPressureRequest::SubscribeScaledPressureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SubscribeScaledPressureRequest)
}
SubscribeScaledPressureRequest::SubscribeScaledPressureRequest(const SubscribeScaledPressureRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeScaledPressureRequest)
}

void SubscribeScaledPressureRequest::SharedCtor() {
}

SubscribeScaledPressureRequest::~SubscribeScaledPressureRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeScaledPressureRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeScaledPressureRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubscribeScaledPressureRequest::ArenaDtor(void* object) {
  SubscribeScaledPressureRequest* _this = reinterpret_cast< SubscribeScaledPressureRequest* >(object);
  (void)_this;
}
void SubscribeScaledPressureRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeScaledPressureRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeScaledPressureRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeScaledPressureRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeScaledPressureRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeScaledPressureRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeScaledPressureRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeScaledPressureRequest)
  return target;
}

size_t SubscribeScaledPressureRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeScaledPressureRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeScaledPressureRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeScaledPressureRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeScaledPressureRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeScaledPressureRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeScaledPressureRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeScaledPressureRequest)
    MergeFrom(*source);
  }
}

void SubscribeScaledPressureRequest::MergeFrom(const SubscribeScaledPressureRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeScaledPressureRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeScaledPressureRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeScaledPressureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeScaledPressureRequest::CopyFrom(const SubscribeScaledPressureRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeScaledPressureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeScaledPressureRequest::IsInitialized() const {
  return true;
}

void SubscribeScaledPressureRequest::InternalSwap(SubscribeScaledPressureRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeScaledPressureRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScaledPressureResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::ScaledPressure& scaled_pressure(const ScaledPressureResponse* msg);
};

const ::mavsdk::rpc::telemetry::ScaledPressure&
ScaledPressureResponse::_Internal::scaled_pressure(const ScaledPressureResponse* msg) {
  return *msg->scaled_pressure_;
}
ScaledPressureResponse::ScaledPressureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.ScaledPressureResponse)
}
ScaledPressureResponse::ScaledPressureResponse(const ScaledPressureResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scaled_pressure()) {
    scaled_pressure_ = new ::mavsdk::rpc::telemetry::ScaledPressure(*from.scaled_pressure_);
  } else {
    scaled_pressure_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.ScaledPressureResponse)
}

void ScaledPressureResponse::SharedCtor() {
scaled_pressure_ = nullptr;
}

ScaledPressureResponse::~ScaledPressureResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.ScaledPressureResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScaledPressureResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scaled_pressure_;
}

void ScaledPressureResponse::ArenaDtor(void* object) {
  ScaledPressureResponse* _this = reinterpret_cast< ScaledPressureResponse* >(object);
  (void)_this;
}
void ScaledPressureResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScaledPressureResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScaledPressureResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.ScaledPressureResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scaled_pressure_ != nullptr) {
    delete scaled_pressure_;
  }
  scaled_pressure_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScaledPressureResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.ScaledPressure scaled_pressure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scaled_pressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScaledPressureResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.ScaledPressureResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.ScaledPressure scaled_pressure = 1;
  if (this->has_scaled_pressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scaled_pressure(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.ScaledPressureResponse)
  return target;
}

size_t ScaledPressureResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.ScaledPressureResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.ScaledPressure scaled_pressure = 1;
  if (this->has_scaled_pressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scaled_pressure_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScaledPressureResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.ScaledPressureResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ScaledPressureResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScaledPressureResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.ScaledPressureResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.ScaledPressureResponse)
    MergeFrom(*source);
  }
}

void ScaledPressureResponse::MergeFrom(const ScaledPressureResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.ScaledPressureResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scaled_pressure()) {
    _internal_mutable_scaled_pressure()->::mavsdk::rpc::telemetry::ScaledPressure::MergeFrom(from._internal_scaled_pressure());
  }
}

void ScaledPressureResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.ScaledPressureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScaledPressureResponse::CopyFrom(const ScaledPressureResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.ScaledPressureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScaledPressureResponse::IsInitialized() const {
  return true;
}

void ScaledPressureResponse::InternalSwap(ScaledPressureResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scaled_pressure_, other->scaled_pressure_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScaledPressureResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRatePositionRequest::_Internal {
 public:
};

SetRatePositionRequest::SetRatePositionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRatePositionRequest)
}
SetRatePositionRequest::SetRatePositionRequest(const SetRatePositionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRatePositionRequest)
}

void SetRatePositionRequest::SharedCtor() {
rate_hz_ = 0;
}

SetRatePositionRequest::~SetRatePositionRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRatePositionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRatePositionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetRatePositionRequest::ArenaDtor(void* object) {
  SetRatePositionRequest* _this = reinterpret_cast< SetRatePositionRequest* >(object);
  (void)_this;
}
void SetRatePositionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRatePositionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRatePositionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRatePositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRatePositionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRatePositionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRatePositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRatePositionRequest)
  return target;
}

size_t SetRatePositionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRatePositionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRatePositionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRatePositionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRatePositionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRatePositionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRatePositionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRatePositionRequest)
    MergeFrom(*source);
  }
}

void SetRatePositionRequest::MergeFrom(const SetRatePositionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRatePositionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRatePositionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRatePositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRatePositionRequest::CopyFrom(const SetRatePositionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRatePositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRatePositionRequest::IsInitialized() const {
  return true;
}

void SetRatePositionRequest::InternalSwap(SetRatePositionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRatePositionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRatePositionResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRatePositionResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRatePositionResponse::_Internal::telemetry_result(const SetRatePositionResponse* msg) {
  return *msg->telemetry_result_;
}
SetRatePositionResponse::SetRatePositionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRatePositionResponse)
}
SetRatePositionResponse::SetRatePositionResponse(const SetRatePositionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRatePositionResponse)
}

void SetRatePositionResponse::SharedCtor() {
telemetry_result_ = nullptr;
}

SetRatePositionResponse::~SetRatePositionResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRatePositionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRatePositionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRatePositionResponse::ArenaDtor(void* object) {
  SetRatePositionResponse* _this = reinterpret_cast< SetRatePositionResponse* >(object);
  (void)_this;
}
void SetRatePositionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRatePositionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRatePositionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRatePositionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRatePositionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRatePositionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRatePositionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRatePositionResponse)
  return target;
}

size_t SetRatePositionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRatePositionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRatePositionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRatePositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRatePositionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRatePositionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRatePositionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRatePositionResponse)
    MergeFrom(*source);
  }
}

void SetRatePositionResponse::MergeFrom(const SetRatePositionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRatePositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRatePositionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRatePositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRatePositionResponse::CopyFrom(const SetRatePositionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRatePositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRatePositionResponse::IsInitialized() const {
  return true;
}

void SetRatePositionResponse::InternalSwap(SetRatePositionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRatePositionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateHomeRequest::_Internal {
 public:
};

SetRateHomeRequest::SetRateHomeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateHomeRequest)
}
SetRateHomeRequest::SetRateHomeRequest(const SetRateHomeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateHomeRequest)
}

void SetRateHomeRequest::SharedCtor() {
rate_hz_ = 0;
}

SetRateHomeRequest::~SetRateHomeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateHomeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateHomeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetRateHomeRequest::ArenaDtor(void* object) {
  SetRateHomeRequest* _this = reinterpret_cast< SetRateHomeRequest* >(object);
  (void)_this;
}
void SetRateHomeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateHomeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateHomeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateHomeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateHomeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateHomeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateHomeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateHomeRequest)
  return target;
}

size_t SetRateHomeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateHomeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateHomeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateHomeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateHomeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateHomeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateHomeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateHomeRequest)
    MergeFrom(*source);
  }
}

void SetRateHomeRequest::MergeFrom(const SetRateHomeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateHomeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateHomeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateHomeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateHomeRequest::CopyFrom(const SetRateHomeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateHomeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateHomeRequest::IsInitialized() const {
  return true;
}

void SetRateHomeRequest::InternalSwap(SetRateHomeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateHomeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateHomeResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateHomeResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateHomeResponse::_Internal::telemetry_result(const SetRateHomeResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateHomeResponse::SetRateHomeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateHomeResponse)
}
SetRateHomeResponse::SetRateHomeResponse(const SetRateHomeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateHomeResponse)
}

void SetRateHomeResponse::SharedCtor() {
telemetry_result_ = nullptr;
}

SetRateHomeResponse::~SetRateHomeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateHomeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateHomeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateHomeResponse::ArenaDtor(void* object) {
  SetRateHomeResponse* _this = reinterpret_cast< SetRateHomeResponse* >(object);
  (void)_this;
}
void SetRateHomeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateHomeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateHomeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateHomeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateHomeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateHomeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateHomeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateHomeResponse)
  return target;
}

size_t SetRateHomeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateHomeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateHomeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateHomeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateHomeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateHomeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateHomeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateHomeResponse)
    MergeFrom(*source);
  }
}

void SetRateHomeResponse::MergeFrom(const SetRateHomeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateHomeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateHomeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateHomeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateHomeResponse::CopyFrom(const SetRateHomeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateHomeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateHomeResponse::IsInitialized() const {
  return true;
}

void SetRateHomeResponse::InternalSwap(SetRateHomeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateHomeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateInAirRequest::_Internal {
 public:
};

SetRateInAirRequest::SetRateInAirRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateInAirRequest)
}
SetRateInAirRequest::SetRateInAirRequest(const SetRateInAirRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateInAirRequest)
}

void SetRateInAirRequest::SharedCtor() {
rate_hz_ = 0;
}

SetRateInAirRequest::~SetRateInAirRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateInAirRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateInAirRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetRateInAirRequest::ArenaDtor(void* object) {
  SetRateInAirRequest* _this = reinterpret_cast< SetRateInAirRequest* >(object);
  (void)_this;
}
void SetRateInAirRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateInAirRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateInAirRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateInAirRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateInAirRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateInAirRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateInAirRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateInAirRequest)
  return target;
}

size_t SetRateInAirRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateInAirRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateInAirRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateInAirRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateInAirRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateInAirRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateInAirRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateInAirRequest)
    MergeFrom(*source);
  }
}

void SetRateInAirRequest::MergeFrom(const SetRateInAirRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateInAirRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateInAirRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateInAirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateInAirRequest::CopyFrom(const SetRateInAirRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateInAirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateInAirRequest::IsInitialized() const {
  return true;
}

void SetRateInAirRequest::InternalSwap(SetRateInAirRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateInAirRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateInAirResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateInAirResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateInAirResponse::_Internal::telemetry_result(const SetRateInAirResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateInAirResponse::SetRateInAirResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateInAirResponse)
}
SetRateInAirResponse::SetRateInAirResponse(const SetRateInAirResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateInAirResponse)
}

void SetRateInAirResponse::SharedCtor() {
telemetry_result_ = nullptr;
}

SetRateInAirResponse::~SetRateInAirResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateInAirResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateInAirResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateInAirResponse::ArenaDtor(void* object) {
  SetRateInAirResponse* _this = reinterpret_cast< SetRateInAirResponse* >(object);
  (void)_this;
}
void SetRateInAirResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateInAirResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateInAirResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateInAirResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateInAirResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateInAirResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateInAirResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateInAirResponse)
  return target;
}

size_t SetRateInAirResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateInAirResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateInAirResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateInAirResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateInAirResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateInAirResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateInAirResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateInAirResponse)
    MergeFrom(*source);
  }
}

void SetRateInAirResponse::MergeFrom(const SetRateInAirResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateInAirResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateInAirResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateInAirResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateInAirResponse::CopyFrom(const SetRateInAirResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateInAirResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateInAirResponse::IsInitialized() const {
  return true;
}

void SetRateInAirResponse::InternalSwap(SetRateInAirResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateInAirResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateLandedStateRequest::_Internal {
 public:
};

SetRateLandedStateRequest::SetRateLandedStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
}
SetRateLandedStateRequest::SetRateLandedStateRequest(const SetRateLandedStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
}

void SetRateLandedStateRequest::SharedCtor() {
rate_hz_ = 0;
}

SetRateLandedStateRequest::~SetRateLandedStateRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateLandedStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetRateLandedStateRequest::ArenaDtor(void* object) {
  SetRateLandedStateRequest* _this = reinterpret_cast< SetRateLandedStateRequest* >(object);
  (void)_this;
}
void SetRateLandedStateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateLandedStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateLandedStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateLandedStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateLandedStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
  return target;
}

size_t SetRateLandedStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateLandedStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateLandedStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateLandedStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
    MergeFrom(*source);
  }
}

void SetRateLandedStateRequest::MergeFrom(const SetRateLandedStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateLandedStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateLandedStateRequest::CopyFrom(const SetRateLandedStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateLandedStateRequest::IsInitialized() const {
  return true;
}

void SetRateLandedStateRequest::InternalSwap(SetRateLandedStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateLandedStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateLandedStateResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateLandedStateResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateLandedStateResponse::_Internal::telemetry_result(const SetRateLandedStateResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateLandedStateResponse::SetRateLandedStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
}
SetRateLandedStateResponse::SetRateLandedStateResponse(const SetRateLandedStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
}

void SetRateLandedStateResponse::SharedCtor() {
telemetry_result_ = nullptr;
}

SetRateLandedStateResponse::~SetRateLandedStateResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateLandedStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateLandedStateResponse::ArenaDtor(void* object) {
  SetRateLandedStateResponse* _this = reinterpret_cast< SetRateLandedStateResponse* >(object);
  (void)_this;
}
void SetRateLandedStateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateLandedStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateLandedStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateLandedStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateLandedStateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
  return target;
}

size_t SetRateLandedStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateLandedStateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateLandedStateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateLandedStateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
    MergeFrom(*source);
  }
}

void SetRateLandedStateResponse::MergeFrom(const SetRateLandedStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateLandedStateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateLandedStateResponse::CopyFrom(const SetRateLandedStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateLandedStateResponse::IsInitialized() const {
  return true;
}

void SetRateLandedStateResponse::InternalSwap(SetRateLandedStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateLandedStateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateAttitudeRequest::_Internal {
 public:
};

SetRateAttitudeRequest::SetRateAttitudeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateAttitudeRequest)
}
SetRateAttitudeRequest::SetRateAttitudeRequest(const SetRateAttitudeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateAttitudeRequest)
}

void SetRateAttitudeRequest::SharedCtor() {
rate_hz_ = 0;
}

SetRateAttitudeRequest::~SetRateAttitudeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateAttitudeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateAttitudeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetRateAttitudeRequest::ArenaDtor(void* object) {
  SetRateAttitudeRequest* _this = reinterpret_cast< SetRateAttitudeRequest* >(object);
  (void)_this;
}
void SetRateAttitudeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateAttitudeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateAttitudeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateAttitudeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateAttitudeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateAttitudeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateAttitudeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateAttitudeRequest)
  return target;
}

size_t SetRateAttitudeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateAttitudeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateAttitudeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateAttitudeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateAttitudeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateAttitudeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateAttitudeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateAttitudeRequest)
    MergeFrom(*source);
  }
}

void SetRateAttitudeRequest::MergeFrom(const SetRateAttitudeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateAttitudeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateAttitudeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateAttitudeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateAttitudeRequest::CopyFrom(const SetRateAttitudeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateAttitudeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateAttitudeRequest::IsInitialized() const {
  return true;
}

void SetRateAttitudeRequest::InternalSwap(SetRateAttitudeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateAttitudeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateAttitudeResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateAttitudeResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateAttitudeResponse::_Internal::telemetry_result(const SetRateAttitudeResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateAttitudeResponse::SetRateAttitudeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateAttitudeResponse)
}
SetRateAttitudeResponse::SetRateAttitudeResponse(const SetRateAttitudeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateAttitudeResponse)
}

void SetRateAttitudeResponse::SharedCtor() {
telemetry_result_ = nullptr;
}

SetRateAttitudeResponse::~SetRateAttitudeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateAttitudeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateAttitudeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateAttitudeResponse::ArenaDtor(void* object) {
  SetRateAttitudeResponse* _this = reinterpret_cast< SetRateAttitudeResponse* >(object);
  (void)_this;
}
void SetRateAttitudeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateAttitudeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateAttitudeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateAttitudeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateAttitudeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateAttitudeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateAttitudeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateAttitudeResponse)
  return target;
}

size_t SetRateAttitudeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateAttitudeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateAttitudeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateAttitudeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateAttitudeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateAttitudeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateAttitudeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateAttitudeResponse)
    MergeFrom(*source);
  }
}

void SetRateAttitudeResponse::MergeFrom(const SetRateAttitudeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateAttitudeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateAttitudeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateAttitudeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateAttitudeResponse::CopyFrom(const SetRateAttitudeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateAttitudeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateAttitudeResponse::IsInitialized() const {
  return true;
}

void SetRateAttitudeResponse::InternalSwap(SetRateAttitudeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateAttitudeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateAttitudeAngularVelocityBodyRequest::_Internal {
 public:
};

SetRateAttitudeAngularVelocityBodyRequest::SetRateAttitudeAngularVelocityBodyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
}
SetRateAttitudeAngularVelocityBodyRequest::SetRateAttitudeAngularVelocityBodyRequest(const SetRateAttitudeAngularVelocityBodyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
}

void SetRateAttitudeAngularVelocityBodyRequest::SharedCtor() {
rate_hz_ = 0;
}

SetRateAttitudeAngularVelocityBodyRequest::~SetRateAttitudeAngularVelocityBodyRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateAttitudeAngularVelocityBodyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetRateAttitudeAngularVelocityBodyRequest::ArenaDtor(void* object) {
  SetRateAttitudeAngularVelocityBodyRequest* _this = reinterpret_cast< SetRateAttitudeAngularVelocityBodyRequest* >(object);
  (void)_this;
}
void SetRateAttitudeAngularVelocityBodyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateAttitudeAngularVelocityBodyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateAttitudeAngularVelocityBodyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateAttitudeAngularVelocityBodyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateAttitudeAngularVelocityBodyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
  return target;
}

size_t SetRateAttitudeAngularVelocityBodyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateAttitudeAngularVelocityBodyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateAttitudeAngularVelocityBodyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateAttitudeAngularVelocityBodyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
    MergeFrom(*source);
  }
}

void SetRateAttitudeAngularVelocityBodyRequest::MergeFrom(const SetRateAttitudeAngularVelocityBodyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateAttitudeAngularVelocityBodyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateAttitudeAngularVelocityBodyRequest::CopyFrom(const SetRateAttitudeAngularVelocityBodyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateAttitudeAngularVelocityBodyRequest::IsInitialized() const {
  return true;
}

void SetRateAttitudeAngularVelocityBodyRequest::InternalSwap(SetRateAttitudeAngularVelocityBodyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateAttitudeAngularVelocityBodyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateAttitudeAngularVelocityBodyResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateAttitudeAngularVelocityBodyResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateAttitudeAngularVelocityBodyResponse::_Internal::telemetry_result(const SetRateAttitudeAngularVelocityBodyResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateAttitudeAngularVelocityBodyResponse::SetRateAttitudeAngularVelocityBodyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
}
SetRateAttitudeAngularVelocityBodyResponse::SetRateAttitudeAngularVelocityBodyResponse(const SetRateAttitudeAngularVelocityBodyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
}

void SetRateAttitudeAngularVelocityBodyResponse::SharedCtor() {
telemetry_result_ = nullptr;
}

SetRateAttitudeAngularVelocityBodyResponse::~SetRateAttitudeAngularVelocityBodyResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateAttitudeAngularVelocityBodyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateAttitudeAngularVelocityBodyResponse::ArenaDtor(void* object) {
  SetRateAttitudeAngularVelocityBodyResponse* _this = reinterpret_cast< SetRateAttitudeAngularVelocityBodyResponse* >(object);
  (void)_this;
}
void SetRateAttitudeAngularVelocityBodyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateAttitudeAngularVelocityBodyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateAttitudeAngularVelocityBodyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateAttitudeAngularVelocityBodyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateAttitudeAngularVelocityBodyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
  return target;
}

size_t SetRateAttitudeAngularVelocityBodyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateAttitudeAngularVelocityBodyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateAttitudeAngularVelocityBodyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateAttitudeAngularVelocityBodyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
    MergeFrom(*source);
  }
}

void SetRateAttitudeAngularVelocityBodyResponse::MergeFrom(const SetRateAttitudeAngularVelocityBodyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateAttitudeAngularVelocityBodyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateAttitudeAngularVelocityBodyResponse::CopyFrom(const SetRateAttitudeAngularVelocityBodyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateAttitudeAngularVelocityBodyResponse::IsInitialized() const {
  return true;
}

void SetRateAttitudeAngularVelocityBodyResponse::InternalSwap(SetRateAttitudeAngularVelocityBodyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateAttitudeAngularVelocityBodyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateCameraAttitudeQuaternionRequest::_Internal {
 public:
};

SetRateCameraAttitudeQuaternionRequest::SetRateCameraAttitudeQuaternionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
}
SetRateCameraAttitudeQuaternionRequest::SetRateCameraAttitudeQuaternionRequest(const SetRateCameraAttitudeQuaternionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
}

void SetRateCameraAttitudeQuaternionRequest::SharedCtor() {
rate_hz_ = 0;
}

SetRateCameraAttitudeQuaternionRequest::~SetRateCameraAttitudeQuaternionRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateCameraAttitudeQuaternionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetRateCameraAttitudeQuaternionRequest::ArenaDtor(void* object) {
  SetRateCameraAttitudeQuaternionRequest* _this = reinterpret_cast< SetRateCameraAttitudeQuaternionRequest* >(object);
  (void)_this;
}
void SetRateCameraAttitudeQuaternionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateCameraAttitudeQuaternionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateCameraAttitudeQuaternionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateCameraAttitudeQuaternionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateCameraAttitudeQuaternionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
  return target;
}

size_t SetRateCameraAttitudeQuaternionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateCameraAttitudeQuaternionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateCameraAttitudeQuaternionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateCameraAttitudeQuaternionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
    MergeFrom(*source);
  }
}

void SetRateCameraAttitudeQuaternionRequest::MergeFrom(const SetRateCameraAttitudeQuaternionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateCameraAttitudeQuaternionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateCameraAttitudeQuaternionRequest::CopyFrom(const SetRateCameraAttitudeQuaternionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateCameraAttitudeQuaternionRequest::IsInitialized() const {
  return true;
}

void SetRateCameraAttitudeQuaternionRequest::InternalSwap(SetRateCameraAttitudeQuaternionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateCameraAttitudeQuaternionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateCameraAttitudeQuaternionResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateCameraAttitudeQuaternionResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateCameraAttitudeQuaternionResponse::_Internal::telemetry_result(const SetRateCameraAttitudeQuaternionResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateCameraAttitudeQuaternionResponse::SetRateCameraAttitudeQuaternionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
}
SetRateCameraAttitudeQuaternionResponse::SetRateCameraAttitudeQuaternionResponse(const SetRateCameraAttitudeQuaternionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
}

void SetRateCameraAttitudeQuaternionResponse::SharedCtor() {
telemetry_result_ = nullptr;
}

SetRateCameraAttitudeQuaternionResponse::~SetRateCameraAttitudeQuaternionResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateCameraAttitudeQuaternionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateCameraAttitudeQuaternionResponse::ArenaDtor(void* object) {
  SetRateCameraAttitudeQuaternionResponse* _this = reinterpret_cast< SetRateCameraAttitudeQuaternionResponse* >(object);
  (void)_this;
}
void SetRateCameraAttitudeQuaternionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateCameraAttitudeQuaternionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateCameraAttitudeQuaternionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateCameraAttitudeQuaternionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateCameraAttitudeQuaternionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
  return target;
}

size_t SetRateCameraAttitudeQuaternionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateCameraAttitudeQuaternionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateCameraAttitudeQuaternionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateCameraAttitudeQuaternionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
    MergeFrom(*source);
  }
}

void SetRateCameraAttitudeQuaternionResponse::MergeFrom(const SetRateCameraAttitudeQuaternionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateCameraAttitudeQuaternionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateCameraAttitudeQuaternionResponse::CopyFrom(const SetRateCameraAttitudeQuaternionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateCameraAttitudeQuaternionResponse::IsInitialized() const {
  return true;
}

void SetRateCameraAttitudeQuaternionResponse::InternalSwap(SetRateCameraAttitudeQuaternionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateCameraAttitudeQuaternionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateCameraAttitudeRequest::_Internal {
 public:
};

SetRateCameraAttitudeRequest::SetRateCameraAttitudeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
}
SetRateCameraAttitudeRequest::SetRateCameraAttitudeRequest(const SetRateCameraAttitudeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
}

void SetRateCameraAttitudeRequest::SharedCtor() {
rate_hz_ = 0;
}

SetRateCameraAttitudeRequest::~SetRateCameraAttitudeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateCameraAttitudeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetRateCameraAttitudeRequest::ArenaDtor(void* object) {
  SetRateCameraAttitudeRequest* _this = reinterpret_cast< SetRateCameraAttitudeRequest* >(object);
  (void)_this;
}
void SetRateCameraAttitudeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateCameraAttitudeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateCameraAttitudeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateCameraAttitudeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateCameraAttitudeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
  return target;
}

size_t SetRateCameraAttitudeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateCameraAttitudeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateCameraAttitudeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateCameraAttitudeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
    MergeFrom(*source);
  }
}

void SetRateCameraAttitudeRequest::MergeFrom(const SetRateCameraAttitudeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateCameraAttitudeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateCameraAttitudeRequest::CopyFrom(const SetRateCameraAttitudeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateCameraAttitudeRequest::IsInitialized() const {
  return true;
}

void SetRateCameraAttitudeRequest::InternalSwap(SetRateCameraAttitudeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateCameraAttitudeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateCameraAttitudeResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateCameraAttitudeResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateCameraAttitudeResponse::_Internal::telemetry_result(const SetRateCameraAttitudeResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateCameraAttitudeResponse::SetRateCameraAttitudeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
}
SetRateCameraAttitudeResponse::SetRateCameraAttitudeResponse(const SetRateCameraAttitudeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
}

void SetRateCameraAttitudeResponse::SharedCtor() {
telemetry_result_ = nullptr;
}

SetRateCameraAttitudeResponse::~SetRateCameraAttitudeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateCameraAttitudeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateCameraAttitudeResponse::ArenaDtor(void* object) {
  SetRateCameraAttitudeResponse* _this = reinterpret_cast< SetRateCameraAttitudeResponse* >(object);
  (void)_this;
}
void SetRateCameraAttitudeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateCameraAttitudeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateCameraAttitudeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateCameraAttitudeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateCameraAttitudeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
  return target;
}

size_t SetRateCameraAttitudeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateCameraAttitudeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateCameraAttitudeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateCameraAttitudeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
    MergeFrom(*source);
  }
}

void SetRateCameraAttitudeResponse::MergeFrom(const SetRateCameraAttitudeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateCameraAttitudeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateCameraAttitudeResponse::CopyFrom(const SetRateCameraAttitudeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateCameraAttitudeResponse::IsInitialized() const {
  return true;
}

void SetRateCameraAttitudeResponse::InternalSwap(SetRateCameraAttitudeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateCameraAttitudeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateVelocityNedRequest::_Internal {
 public:
};

SetRateVelocityNedRequest::SetRateVelocityNedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateVelocityNedRequest)
}
SetRateVelocityNedRequest::SetRateVelocityNedRequest(const SetRateVelocityNedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateVelocityNedRequest)
}

void SetRateVelocityNedRequest::SharedCtor() {
rate_hz_ = 0;
}

SetRateVelocityNedRequest::~SetRateVelocityNedRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateVelocityNedRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateVelocityNedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetRateVelocityNedRequest::ArenaDtor(void* object) {
  SetRateVelocityNedRequest* _this = reinterpret_cast< SetRateVelocityNedRequest* >(object);
  (void)_this;
}
void SetRateVelocityNedRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateVelocityNedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateVelocityNedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateVelocityNedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateVelocityNedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateVelocityNedRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateVelocityNedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateVelocityNedRequest)
  return target;
}

size_t SetRateVelocityNedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateVelocityNedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateVelocityNedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateVelocityNedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateVelocityNedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateVelocityNedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateVelocityNedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateVelocityNedRequest)
    MergeFrom(*source);
  }
}

void SetRateVelocityNedRequest::MergeFrom(const SetRateVelocityNedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateVelocityNedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateVelocityNedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateVelocityNedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateVelocityNedRequest::CopyFrom(const SetRateVelocityNedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateVelocityNedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateVelocityNedRequest::IsInitialized() const {
  return true;
}

void SetRateVelocityNedRequest::InternalSwap(SetRateVelocityNedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateVelocityNedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateVelocityNedResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateVelocityNedResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateVelocityNedResponse::_Internal::telemetry_result(const SetRateVelocityNedResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateVelocityNedResponse::SetRateVelocityNedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateVelocityNedResponse)
}
SetRateVelocityNedResponse::SetRateVelocityNedResponse(const SetRateVelocityNedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateVelocityNedResponse)
}

void SetRateVelocityNedResponse::SharedCtor() {
telemetry_result_ = nullptr;
}

SetRateVelocityNedResponse::~SetRateVelocityNedResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateVelocityNedResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateVelocityNedResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateVelocityNedResponse::ArenaDtor(void* object) {
  SetRateVelocityNedResponse* _this = reinterpret_cast< SetRateVelocityNedResponse* >(object);
  (void)_this;
}
void SetRateVelocityNedResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateVelocityNedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateVelocityNedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateVelocityNedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateVelocityNedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateVelocityNedResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateVelocityNedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateVelocityNedResponse)
  return target;
}

size_t SetRateVelocityNedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateVelocityNedResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateVelocityNedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateVelocityNedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateVelocityNedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateVelocityNedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateVelocityNedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateVelocityNedResponse)
    MergeFrom(*source);
  }
}

void SetRateVelocityNedResponse::MergeFrom(const SetRateVelocityNedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateVelocityNedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateVelocityNedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateVelocityNedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateVelocityNedResponse::CopyFrom(const SetRateVelocityNedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateVelocityNedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateVelocityNedResponse::IsInitialized() const {
  return true;
}

void SetRateVelocityNedResponse::InternalSwap(SetRateVelocityNedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateVelocityNedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateGpsInfoRequest::_Internal {
 public:
};

SetRateGpsInfoRequest::SetRateGpsInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
}
SetRateGpsInfoRequest::SetRateGpsInfoRequest(const SetRateGpsInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
}

void SetRateGpsInfoRequest::SharedCtor() {
rate_hz_ = 0;
}

SetRateGpsInfoRequest::~SetRateGpsInfoRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateGpsInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetRateGpsInfoRequest::ArenaDtor(void* object) {
  SetRateGpsInfoRequest* _this = reinterpret_cast< SetRateGpsInfoRequest* >(object);
  (void)_this;
}
void SetRateGpsInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateGpsInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateGpsInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateGpsInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateGpsInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
  return target;
}

size_t SetRateGpsInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateGpsInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateGpsInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateGpsInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
    MergeFrom(*source);
  }
}

void SetRateGpsInfoRequest::MergeFrom(const SetRateGpsInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateGpsInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateGpsInfoRequest::CopyFrom(const SetRateGpsInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateGpsInfoRequest::IsInitialized() const {
  return true;
}

void SetRateGpsInfoRequest::InternalSwap(SetRateGpsInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateGpsInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateGpsInfoResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateGpsInfoResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateGpsInfoResponse::_Internal::telemetry_result(const SetRateGpsInfoResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateGpsInfoResponse::SetRateGpsInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
}
SetRateGpsInfoResponse::SetRateGpsInfoResponse(const SetRateGpsInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
}

void SetRateGpsInfoResponse::SharedCtor() {
telemetry_result_ = nullptr;
}

SetRateGpsInfoResponse::~SetRateGpsInfoResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateGpsInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateGpsInfoResponse::ArenaDtor(void* object) {
  SetRateGpsInfoResponse* _this = reinterpret_cast< SetRateGpsInfoResponse* >(object);
  (void)_this;
}
void SetRateGpsInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateGpsInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateGpsInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateGpsInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateGpsInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
  return target;
}

size_t SetRateGpsInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateGpsInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateGpsInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateGpsInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
    MergeFrom(*source);
  }
}

void SetRateGpsInfoResponse::MergeFrom(const SetRateGpsInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateGpsInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateGpsInfoResponse::CopyFrom(const SetRateGpsInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateGpsInfoResponse::IsInitialized() const {
  return true;
}

void SetRateGpsInfoResponse::InternalSwap(SetRateGpsInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateGpsInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateRawGpsRequest::_Internal {
 public:
};

SetRateRawGpsRequest::SetRateRawGpsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateRawGpsRequest)
}
SetRateRawGpsRequest::SetRateRawGpsRequest(const SetRateRawGpsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateRawGpsRequest)
}

void SetRateRawGpsRequest::SharedCtor() {
rate_hz_ = 0;
}

SetRateRawGpsRequest::~SetRateRawGpsRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateRawGpsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateRawGpsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetRateRawGpsRequest::ArenaDtor(void* object) {
  SetRateRawGpsRequest* _this = reinterpret_cast< SetRateRawGpsRequest* >(object);
  (void)_this;
}
void SetRateRawGpsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateRawGpsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateRawGpsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateRawGpsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateRawGpsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateRawGpsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateRawGpsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateRawGpsRequest)
  return target;
}

size_t SetRateRawGpsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateRawGpsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateRawGpsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateRawGpsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateRawGpsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateRawGpsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateRawGpsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateRawGpsRequest)
    MergeFrom(*source);
  }
}

void SetRateRawGpsRequest::MergeFrom(const SetRateRawGpsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateRawGpsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateRawGpsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateRawGpsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateRawGpsRequest::CopyFrom(const SetRateRawGpsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateRawGpsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateRawGpsRequest::IsInitialized() const {
  return true;
}

void SetRateRawGpsRequest::InternalSwap(SetRateRawGpsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateRawGpsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateBatteryRequest::_Internal {
 public:
};

SetRateBatteryRequest::SetRateBatteryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateBatteryRequest)
}
SetRateBatteryRequest::SetRateBatteryRequest(const SetRateBatteryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateBatteryRequest)
}

void SetRateBatteryRequest::SharedCtor() {
rate_hz_ = 0;
}

SetRateBatteryRequest::~SetRateBatteryRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateBatteryRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateBatteryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetRateBatteryRequest::ArenaDtor(void* object) {
  SetRateBatteryRequest* _this = reinterpret_cast< SetRateBatteryRequest* >(object);
  (void)_this;
}
void SetRateBatteryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateBatteryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateBatteryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateBatteryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateBatteryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateBatteryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateBatteryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateBatteryRequest)
  return target;
}

size_t SetRateBatteryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateBatteryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateBatteryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateBatteryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateBatteryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateBatteryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateBatteryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateBatteryRequest)
    MergeFrom(*source);
  }
}

void SetRateBatteryRequest::MergeFrom(const SetRateBatteryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateBatteryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateBatteryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateBatteryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateBatteryRequest::CopyFrom(const SetRateBatteryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateBatteryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateBatteryRequest::IsInitialized() const {
  return true;
}

void SetRateBatteryRequest::InternalSwap(SetRateBatteryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateBatteryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateBatteryResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateBatteryResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateBatteryResponse::_Internal::telemetry_result(const SetRateBatteryResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateBatteryResponse::SetRateBatteryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateBatteryResponse)
}
SetRateBatteryResponse::SetRateBatteryResponse(const SetRateBatteryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateBatteryResponse)
}

void SetRateBatteryResponse::SharedCtor() {
telemetry_result_ = nullptr;
}

SetRateBatteryResponse::~SetRateBatteryResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateBatteryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateBatteryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateBatteryResponse::ArenaDtor(void* object) {
  SetRateBatteryResponse* _this = reinterpret_cast< SetRateBatteryResponse* >(object);
  (void)_this;
}
void SetRateBatteryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateBatteryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateBatteryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateBatteryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateBatteryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateBatteryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateBatteryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateBatteryResponse)
  return target;
}

size_t SetRateBatteryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateBatteryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateBatteryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateBatteryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateBatteryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateBatteryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateBatteryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateBatteryResponse)
    MergeFrom(*source);
  }
}

void SetRateBatteryResponse::MergeFrom(const SetRateBatteryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateBatteryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateBatteryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateBatteryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateBatteryResponse::CopyFrom(const SetRateBatteryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateBatteryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateBatteryResponse::IsInitialized() const {
  return true;
}

void SetRateBatteryResponse::InternalSwap(SetRateBatteryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateBatteryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateRcStatusRequest::_Internal {
 public:
};

SetRateRcStatusRequest::SetRateRcStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
}
SetRateRcStatusRequest::SetRateRcStatusRequest(const SetRateRcStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
}

void SetRateRcStatusRequest::SharedCtor() {
rate_hz_ = 0;
}

SetRateRcStatusRequest::~SetRateRcStatusRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateRcStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetRateRcStatusRequest::ArenaDtor(void* object) {
  SetRateRcStatusRequest* _this = reinterpret_cast< SetRateRcStatusRequest* >(object);
  (void)_this;
}
void SetRateRcStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateRcStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateRcStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateRcStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateRcStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
  return target;
}

size_t SetRateRcStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateRcStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateRcStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateRcStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
    MergeFrom(*source);
  }
}

void SetRateRcStatusRequest::MergeFrom(const SetRateRcStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateRcStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateRcStatusRequest::CopyFrom(const SetRateRcStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateRcStatusRequest::IsInitialized() const {
  return true;
}

void SetRateRcStatusRequest::InternalSwap(SetRateRcStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateRcStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateRcStatusResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateRcStatusResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateRcStatusResponse::_Internal::telemetry_result(const SetRateRcStatusResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateRcStatusResponse::SetRateRcStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
}
SetRateRcStatusResponse::SetRateRcStatusResponse(const SetRateRcStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
}

void SetRateRcStatusResponse::SharedCtor() {
telemetry_result_ = nullptr;
}

SetRateRcStatusResponse::~SetRateRcStatusResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateRcStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateRcStatusResponse::ArenaDtor(void* object) {
  SetRateRcStatusResponse* _this = reinterpret_cast< SetRateRcStatusResponse* >(object);
  (void)_this;
}
void SetRateRcStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateRcStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateRcStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateRcStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateRcStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
  return target;
}

size_t SetRateRcStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateRcStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateRcStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateRcStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
    MergeFrom(*source);
  }
}

void SetRateRcStatusResponse::MergeFrom(const SetRateRcStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateRcStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateRcStatusResponse::CopyFrom(const SetRateRcStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateRcStatusResponse::IsInitialized() const {
  return true;
}

void SetRateRcStatusResponse::InternalSwap(SetRateRcStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateRcStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateActuatorControlTargetRequest::_Internal {
 public:
};

SetRateActuatorControlTargetRequest::SetRateActuatorControlTargetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
}
SetRateActuatorControlTargetRequest::SetRateActuatorControlTargetRequest(const SetRateActuatorControlTargetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
}

void SetRateActuatorControlTargetRequest::SharedCtor() {
rate_hz_ = 0;
}

SetRateActuatorControlTargetRequest::~SetRateActuatorControlTargetRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateActuatorControlTargetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetRateActuatorControlTargetRequest::ArenaDtor(void* object) {
  SetRateActuatorControlTargetRequest* _this = reinterpret_cast< SetRateActuatorControlTargetRequest* >(object);
  (void)_this;
}
void SetRateActuatorControlTargetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateActuatorControlTargetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateActuatorControlTargetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateActuatorControlTargetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateActuatorControlTargetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
  return target;
}

size_t SetRateActuatorControlTargetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateActuatorControlTargetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateActuatorControlTargetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateActuatorControlTargetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
    MergeFrom(*source);
  }
}

void SetRateActuatorControlTargetRequest::MergeFrom(const SetRateActuatorControlTargetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateActuatorControlTargetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateActuatorControlTargetRequest::CopyFrom(const SetRateActuatorControlTargetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateActuatorControlTargetRequest::IsInitialized() const {
  return true;
}

void SetRateActuatorControlTargetRequest::InternalSwap(SetRateActuatorControlTargetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateActuatorControlTargetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateActuatorControlTargetResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateActuatorControlTargetResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateActuatorControlTargetResponse::_Internal::telemetry_result(const SetRateActuatorControlTargetResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateActuatorControlTargetResponse::SetRateActuatorControlTargetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
}
SetRateActuatorControlTargetResponse::SetRateActuatorControlTargetResponse(const SetRateActuatorControlTargetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
}

void SetRateActuatorControlTargetResponse::SharedCtor() {
telemetry_result_ = nullptr;
}

SetRateActuatorControlTargetResponse::~SetRateActuatorControlTargetResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateActuatorControlTargetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateActuatorControlTargetResponse::ArenaDtor(void* object) {
  SetRateActuatorControlTargetResponse* _this = reinterpret_cast< SetRateActuatorControlTargetResponse* >(object);
  (void)_this;
}
void SetRateActuatorControlTargetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateActuatorControlTargetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateActuatorControlTargetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateActuatorControlTargetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateActuatorControlTargetResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
  return target;
}

size_t SetRateActuatorControlTargetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateActuatorControlTargetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateActuatorControlTargetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateActuatorControlTargetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
    MergeFrom(*source);
  }
}

void SetRateActuatorControlTargetResponse::MergeFrom(const SetRateActuatorControlTargetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateActuatorControlTargetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateActuatorControlTargetResponse::CopyFrom(const SetRateActuatorControlTargetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateActuatorControlTargetResponse::IsInitialized() const {
  return true;
}

void SetRateActuatorControlTargetResponse::InternalSwap(SetRateActuatorControlTargetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateActuatorControlTargetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateActuatorOutputStatusRequest::_Internal {
 public:
};

SetRateActuatorOutputStatusRequest::SetRateActuatorOutputStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
}
SetRateActuatorOutputStatusRequest::SetRateActuatorOutputStatusRequest(const SetRateActuatorOutputStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
}

void SetRateActuatorOutputStatusRequest::SharedCtor() {
rate_hz_ = 0;
}

SetRateActuatorOutputStatusRequest::~SetRateActuatorOutputStatusRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateActuatorOutputStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetRateActuatorOutputStatusRequest::ArenaDtor(void* object) {
  SetRateActuatorOutputStatusRequest* _this = reinterpret_cast< SetRateActuatorOutputStatusRequest* >(object);
  (void)_this;
}
void SetRateActuatorOutputStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateActuatorOutputStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateActuatorOutputStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateActuatorOutputStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateActuatorOutputStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
  return target;
}

size_t SetRateActuatorOutputStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateActuatorOutputStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateActuatorOutputStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateActuatorOutputStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
    MergeFrom(*source);
  }
}

void SetRateActuatorOutputStatusRequest::MergeFrom(const SetRateActuatorOutputStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateActuatorOutputStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateActuatorOutputStatusRequest::CopyFrom(const SetRateActuatorOutputStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateActuatorOutputStatusRequest::IsInitialized() const {
  return true;
}

void SetRateActuatorOutputStatusRequest::InternalSwap(SetRateActuatorOutputStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateActuatorOutputStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateActuatorOutputStatusResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateActuatorOutputStatusResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateActuatorOutputStatusResponse::_Internal::telemetry_result(const SetRateActuatorOutputStatusResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateActuatorOutputStatusResponse::SetRateActuatorOutputStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
}
SetRateActuatorOutputStatusResponse::SetRateActuatorOutputStatusResponse(const SetRateActuatorOutputStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
}

void SetRateActuatorOutputStatusResponse::SharedCtor() {
telemetry_result_ = nullptr;
}

SetRateActuatorOutputStatusResponse::~SetRateActuatorOutputStatusResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateActuatorOutputStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateActuatorOutputStatusResponse::ArenaDtor(void* object) {
  SetRateActuatorOutputStatusResponse* _this = reinterpret_cast< SetRateActuatorOutputStatusResponse* >(object);
  (void)_this;
}
void SetRateActuatorOutputStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateActuatorOutputStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateActuatorOutputStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateActuatorOutputStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateActuatorOutputStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
  return target;
}

size_t SetRateActuatorOutputStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateActuatorOutputStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateActuatorOutputStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateActuatorOutputStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
    MergeFrom(*source);
  }
}

void SetRateActuatorOutputStatusResponse::MergeFrom(const SetRateActuatorOutputStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateActuatorOutputStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateActuatorOutputStatusResponse::CopyFrom(const SetRateActuatorOutputStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateActuatorOutputStatusResponse::IsInitialized() const {
  return true;
}

void SetRateActuatorOutputStatusResponse::InternalSwap(SetRateActuatorOutputStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateActuatorOutputStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateOdometryRequest::_Internal {
 public:
};

SetRateOdometryRequest::SetRateOdometryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateOdometryRequest)
}
SetRateOdometryRequest::SetRateOdometryRequest(const SetRateOdometryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateOdometryRequest)
}

void SetRateOdometryRequest::SharedCtor() {
rate_hz_ = 0;
}

SetRateOdometryRequest::~SetRateOdometryRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateOdometryRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateOdometryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetRateOdometryRequest::ArenaDtor(void* object) {
  SetRateOdometryRequest* _this = reinterpret_cast< SetRateOdometryRequest* >(object);
  (void)_this;
}
void SetRateOdometryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateOdometryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateOdometryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateOdometryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateOdometryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateOdometryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateOdometryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateOdometryRequest)
  return target;
}

size_t SetRateOdometryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateOdometryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateOdometryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateOdometryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateOdometryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateOdometryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateOdometryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateOdometryRequest)
    MergeFrom(*source);
  }
}

void SetRateOdometryRequest::MergeFrom(const SetRateOdometryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateOdometryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateOdometryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateOdometryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateOdometryRequest::CopyFrom(const SetRateOdometryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateOdometryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateOdometryRequest::IsInitialized() const {
  return true;
}

void SetRateOdometryRequest::InternalSwap(SetRateOdometryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateOdometryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateOdometryResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateOdometryResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateOdometryResponse::_Internal::telemetry_result(const SetRateOdometryResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateOdometryResponse::SetRateOdometryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateOdometryResponse)
}
SetRateOdometryResponse::SetRateOdometryResponse(const SetRateOdometryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateOdometryResponse)
}

void SetRateOdometryResponse::SharedCtor() {
telemetry_result_ = nullptr;
}

SetRateOdometryResponse::~SetRateOdometryResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateOdometryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateOdometryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateOdometryResponse::ArenaDtor(void* object) {
  SetRateOdometryResponse* _this = reinterpret_cast< SetRateOdometryResponse* >(object);
  (void)_this;
}
void SetRateOdometryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateOdometryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateOdometryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateOdometryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateOdometryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateOdometryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateOdometryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateOdometryResponse)
  return target;
}

size_t SetRateOdometryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateOdometryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateOdometryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateOdometryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateOdometryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateOdometryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateOdometryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateOdometryResponse)
    MergeFrom(*source);
  }
}

void SetRateOdometryResponse::MergeFrom(const SetRateOdometryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateOdometryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateOdometryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateOdometryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateOdometryResponse::CopyFrom(const SetRateOdometryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateOdometryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateOdometryResponse::IsInitialized() const {
  return true;
}

void SetRateOdometryResponse::InternalSwap(SetRateOdometryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateOdometryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRatePositionVelocityNedRequest::_Internal {
 public:
};

SetRatePositionVelocityNedRequest::SetRatePositionVelocityNedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
}
SetRatePositionVelocityNedRequest::SetRatePositionVelocityNedRequest(const SetRatePositionVelocityNedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
}

void SetRatePositionVelocityNedRequest::SharedCtor() {
rate_hz_ = 0;
}

SetRatePositionVelocityNedRequest::~SetRatePositionVelocityNedRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRatePositionVelocityNedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetRatePositionVelocityNedRequest::ArenaDtor(void* object) {
  SetRatePositionVelocityNedRequest* _this = reinterpret_cast< SetRatePositionVelocityNedRequest* >(object);
  (void)_this;
}
void SetRatePositionVelocityNedRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRatePositionVelocityNedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRatePositionVelocityNedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRatePositionVelocityNedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRatePositionVelocityNedRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
  return target;
}

size_t SetRatePositionVelocityNedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRatePositionVelocityNedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRatePositionVelocityNedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRatePositionVelocityNedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
    MergeFrom(*source);
  }
}

void SetRatePositionVelocityNedRequest::MergeFrom(const SetRatePositionVelocityNedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRatePositionVelocityNedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRatePositionVelocityNedRequest::CopyFrom(const SetRatePositionVelocityNedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRatePositionVelocityNedRequest::IsInitialized() const {
  return true;
}

void SetRatePositionVelocityNedRequest::InternalSwap(SetRatePositionVelocityNedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRatePositionVelocityNedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRatePositionVelocityNedResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRatePositionVelocityNedResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRatePositionVelocityNedResponse::_Internal::telemetry_result(const SetRatePositionVelocityNedResponse* msg) {
  return *msg->telemetry_result_;
}
SetRatePositionVelocityNedResponse::SetRatePositionVelocityNedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
}
SetRatePositionVelocityNedResponse::SetRatePositionVelocityNedResponse(const SetRatePositionVelocityNedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
}

void SetRatePositionVelocityNedResponse::SharedCtor() {
telemetry_result_ = nullptr;
}

SetRatePositionVelocityNedResponse::~SetRatePositionVelocityNedResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRatePositionVelocityNedResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRatePositionVelocityNedResponse::ArenaDtor(void* object) {
  SetRatePositionVelocityNedResponse* _this = reinterpret_cast< SetRatePositionVelocityNedResponse* >(object);
  (void)_this;
}
void SetRatePositionVelocityNedResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRatePositionVelocityNedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRatePositionVelocityNedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRatePositionVelocityNedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRatePositionVelocityNedResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
  return target;
}

size_t SetRatePositionVelocityNedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRatePositionVelocityNedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRatePositionVelocityNedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRatePositionVelocityNedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
    MergeFrom(*source);
  }
}

void SetRatePositionVelocityNedResponse::MergeFrom(const SetRatePositionVelocityNedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRatePositionVelocityNedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRatePositionVelocityNedResponse::CopyFrom(const SetRatePositionVelocityNedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRatePositionVelocityNedResponse::IsInitialized() const {
  return true;
}

void SetRatePositionVelocityNedResponse::InternalSwap(SetRatePositionVelocityNedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRatePositionVelocityNedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateGroundTruthRequest::_Internal {
 public:
};

SetRateGroundTruthRequest::SetRateGroundTruthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
}
SetRateGroundTruthRequest::SetRateGroundTruthRequest(const SetRateGroundTruthRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
}

void SetRateGroundTruthRequest::SharedCtor() {
rate_hz_ = 0;
}

SetRateGroundTruthRequest::~SetRateGroundTruthRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateGroundTruthRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetRateGroundTruthRequest::ArenaDtor(void* object) {
  SetRateGroundTruthRequest* _this = reinterpret_cast< SetRateGroundTruthRequest* >(object);
  (void)_this;
}
void SetRateGroundTruthRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateGroundTruthRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateGroundTruthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateGroundTruthRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateGroundTruthRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
  return target;
}

size_t SetRateGroundTruthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateGroundTruthRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateGroundTruthRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateGroundTruthRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
    MergeFrom(*source);
  }
}

void SetRateGroundTruthRequest::MergeFrom(const SetRateGroundTruthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateGroundTruthRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateGroundTruthRequest::CopyFrom(const SetRateGroundTruthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateGroundTruthRequest::IsInitialized() const {
  return true;
}

void SetRateGroundTruthRequest::InternalSwap(SetRateGroundTruthRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateGroundTruthRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateGroundTruthResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateGroundTruthResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateGroundTruthResponse::_Internal::telemetry_result(const SetRateGroundTruthResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateGroundTruthResponse::SetRateGroundTruthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
}
SetRateGroundTruthResponse::SetRateGroundTruthResponse(const SetRateGroundTruthResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
}

void SetRateGroundTruthResponse::SharedCtor() {
telemetry_result_ = nullptr;
}

SetRateGroundTruthResponse::~SetRateGroundTruthResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateGroundTruthResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateGroundTruthResponse::ArenaDtor(void* object) {
  SetRateGroundTruthResponse* _this = reinterpret_cast< SetRateGroundTruthResponse* >(object);
  (void)_this;
}
void SetRateGroundTruthResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateGroundTruthResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateGroundTruthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateGroundTruthResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateGroundTruthResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
  return target;
}

size_t SetRateGroundTruthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateGroundTruthResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateGroundTruthResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateGroundTruthResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
    MergeFrom(*source);
  }
}

void SetRateGroundTruthResponse::MergeFrom(const SetRateGroundTruthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateGroundTruthResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateGroundTruthResponse::CopyFrom(const SetRateGroundTruthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateGroundTruthResponse::IsInitialized() const {
  return true;
}

void SetRateGroundTruthResponse::InternalSwap(SetRateGroundTruthResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateGroundTruthResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateFixedwingMetricsRequest::_Internal {
 public:
};

SetRateFixedwingMetricsRequest::SetRateFixedwingMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
}
SetRateFixedwingMetricsRequest::SetRateFixedwingMetricsRequest(const SetRateFixedwingMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
}

void SetRateFixedwingMetricsRequest::SharedCtor() {
rate_hz_ = 0;
}

SetRateFixedwingMetricsRequest::~SetRateFixedwingMetricsRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateFixedwingMetricsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetRateFixedwingMetricsRequest::ArenaDtor(void* object) {
  SetRateFixedwingMetricsRequest* _this = reinterpret_cast< SetRateFixedwingMetricsRequest* >(object);
  (void)_this;
}
void SetRateFixedwingMetricsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateFixedwingMetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateFixedwingMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateFixedwingMetricsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateFixedwingMetricsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
  return target;
}

size_t SetRateFixedwingMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateFixedwingMetricsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateFixedwingMetricsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateFixedwingMetricsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
    MergeFrom(*source);
  }
}

void SetRateFixedwingMetricsRequest::MergeFrom(const SetRateFixedwingMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateFixedwingMetricsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateFixedwingMetricsRequest::CopyFrom(const SetRateFixedwingMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateFixedwingMetricsRequest::IsInitialized() const {
  return true;
}

void SetRateFixedwingMetricsRequest::InternalSwap(SetRateFixedwingMetricsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateFixedwingMetricsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateFixedwingMetricsResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateFixedwingMetricsResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateFixedwingMetricsResponse::_Internal::telemetry_result(const SetRateFixedwingMetricsResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateFixedwingMetricsResponse::SetRateFixedwingMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
}
SetRateFixedwingMetricsResponse::SetRateFixedwingMetricsResponse(const SetRateFixedwingMetricsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
}

void SetRateFixedwingMetricsResponse::SharedCtor() {
telemetry_result_ = nullptr;
}

SetRateFixedwingMetricsResponse::~SetRateFixedwingMetricsResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateFixedwingMetricsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateFixedwingMetricsResponse::ArenaDtor(void* object) {
  SetRateFixedwingMetricsResponse* _this = reinterpret_cast< SetRateFixedwingMetricsResponse* >(object);
  (void)_this;
}
void SetRateFixedwingMetricsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateFixedwingMetricsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateFixedwingMetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateFixedwingMetricsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateFixedwingMetricsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
  return target;
}

size_t SetRateFixedwingMetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateFixedwingMetricsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateFixedwingMetricsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateFixedwingMetricsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
    MergeFrom(*source);
  }
}

void SetRateFixedwingMetricsResponse::MergeFrom(const SetRateFixedwingMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateFixedwingMetricsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateFixedwingMetricsResponse::CopyFrom(const SetRateFixedwingMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateFixedwingMetricsResponse::IsInitialized() const {
  return true;
}

void SetRateFixedwingMetricsResponse::InternalSwap(SetRateFixedwingMetricsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateFixedwingMetricsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateImuRequest::_Internal {
 public:
};

SetRateImuRequest::SetRateImuRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateImuRequest)
}
SetRateImuRequest::SetRateImuRequest(const SetRateImuRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateImuRequest)
}

void SetRateImuRequest::SharedCtor() {
rate_hz_ = 0;
}

SetRateImuRequest::~SetRateImuRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateImuRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateImuRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetRateImuRequest::ArenaDtor(void* object) {
  SetRateImuRequest* _this = reinterpret_cast< SetRateImuRequest* >(object);
  (void)_this;
}
void SetRateImuRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateImuRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateImuRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateImuRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateImuRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateImuRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateImuRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateImuRequest)
  return target;
}

size_t SetRateImuRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateImuRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateImuRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateImuRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateImuRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateImuRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateImuRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateImuRequest)
    MergeFrom(*source);
  }
}

void SetRateImuRequest::MergeFrom(const SetRateImuRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateImuRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateImuRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateImuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateImuRequest::CopyFrom(const SetRateImuRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateImuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateImuRequest::IsInitialized() const {
  return true;
}

void SetRateImuRequest::InternalSwap(SetRateImuRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateImuRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateImuResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateImuResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateImuResponse::_Internal::telemetry_result(const SetRateImuResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateImuResponse::SetRateImuResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateImuResponse)
}
SetRateImuResponse::SetRateImuResponse(const SetRateImuResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateImuResponse)
}

void SetRateImuResponse::SharedCtor() {
telemetry_result_ = nullptr;
}

SetRateImuResponse::~SetRateImuResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateImuResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateImuResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateImuResponse::ArenaDtor(void* object) {
  SetRateImuResponse* _this = reinterpret_cast< SetRateImuResponse* >(object);
  (void)_this;
}
void SetRateImuResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateImuResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateImuResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateImuResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateImuResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateImuResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateImuResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateImuResponse)
  return target;
}

size_t SetRateImuResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateImuResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateImuResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateImuResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateImuResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateImuResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateImuResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateImuResponse)
    MergeFrom(*source);
  }
}

void SetRateImuResponse::MergeFrom(const SetRateImuResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateImuResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateImuResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateImuResponse::CopyFrom(const SetRateImuResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateImuResponse::IsInitialized() const {
  return true;
}

void SetRateImuResponse::InternalSwap(SetRateImuResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateImuResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateScaledImuRequest::_Internal {
 public:
};

SetRateScaledImuRequest::SetRateScaledImuRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateScaledImuRequest)
}
SetRateScaledImuRequest::SetRateScaledImuRequest(const SetRateScaledImuRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateScaledImuRequest)
}

void SetRateScaledImuRequest::SharedCtor() {
rate_hz_ = 0;
}

SetRateScaledImuRequest::~SetRateScaledImuRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateScaledImuRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateScaledImuRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetRateScaledImuRequest::ArenaDtor(void* object) {
  SetRateScaledImuRequest* _this = reinterpret_cast< SetRateScaledImuRequest* >(object);
  (void)_this;
}
void SetRateScaledImuRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateScaledImuRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateScaledImuRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateScaledImuRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateScaledImuRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateScaledImuRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateScaledImuRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateScaledImuRequest)
  return target;
}

size_t SetRateScaledImuRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateScaledImuRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateScaledImuRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateScaledImuRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateScaledImuRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateScaledImuRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateScaledImuRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateScaledImuRequest)
    MergeFrom(*source);
  }
}

void SetRateScaledImuRequest::MergeFrom(const SetRateScaledImuRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateScaledImuRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateScaledImuRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateScaledImuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateScaledImuRequest::CopyFrom(const SetRateScaledImuRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateScaledImuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateScaledImuRequest::IsInitialized() const {
  return true;
}

void SetRateScaledImuRequest::InternalSwap(SetRateScaledImuRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateScaledImuRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateScaledImuResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateScaledImuResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateScaledImuResponse::_Internal::telemetry_result(const SetRateScaledImuResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateScaledImuResponse::SetRateScaledImuResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateScaledImuResponse)
}
SetRateScaledImuResponse::SetRateScaledImuResponse(const SetRateScaledImuResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateScaledImuResponse)
}

void SetRateScaledImuResponse::SharedCtor() {
telemetry_result_ = nullptr;
}

SetRateScaledImuResponse::~SetRateScaledImuResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateScaledImuResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateScaledImuResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateScaledImuResponse::ArenaDtor(void* object) {
  SetRateScaledImuResponse* _this = reinterpret_cast< SetRateScaledImuResponse* >(object);
  (void)_this;
}
void SetRateScaledImuResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateScaledImuResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateScaledImuResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateScaledImuResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateScaledImuResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateScaledImuResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateScaledImuResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateScaledImuResponse)
  return target;
}

size_t SetRateScaledImuResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateScaledImuResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateScaledImuResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateScaledImuResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateScaledImuResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateScaledImuResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateScaledImuResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateScaledImuResponse)
    MergeFrom(*source);
  }
}

void SetRateScaledImuResponse::MergeFrom(const SetRateScaledImuResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateScaledImuResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateScaledImuResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateScaledImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateScaledImuResponse::CopyFrom(const SetRateScaledImuResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateScaledImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateScaledImuResponse::IsInitialized() const {
  return true;
}

void SetRateScaledImuResponse::InternalSwap(SetRateScaledImuResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateScaledImuResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateRawImuRequest::_Internal {
 public:
};

SetRateRawImuRequest::SetRateRawImuRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateRawImuRequest)
}
SetRateRawImuRequest::SetRateRawImuRequest(const SetRateRawImuRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateRawImuRequest)
}

void SetRateRawImuRequest::SharedCtor() {
rate_hz_ = 0;
}

SetRateRawImuRequest::~SetRateRawImuRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateRawImuRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateRawImuRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetRateRawImuRequest::ArenaDtor(void* object) {
  SetRateRawImuRequest* _this = reinterpret_cast< SetRateRawImuRequest* >(object);
  (void)_this;
}
void SetRateRawImuRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateRawImuRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateRawImuRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateRawImuRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateRawImuRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateRawImuRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateRawImuRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateRawImuRequest)
  return target;
}

size_t SetRateRawImuRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateRawImuRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateRawImuRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateRawImuRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateRawImuRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateRawImuRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateRawImuRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateRawImuRequest)
    MergeFrom(*source);
  }
}

void SetRateRawImuRequest::MergeFrom(const SetRateRawImuRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateRawImuRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateRawImuRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateRawImuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateRawImuRequest::CopyFrom(const SetRateRawImuRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateRawImuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateRawImuRequest::IsInitialized() const {
  return true;
}

void SetRateRawImuRequest::InternalSwap(SetRateRawImuRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateRawImuRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateRawImuResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateRawImuResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateRawImuResponse::_Internal::telemetry_result(const SetRateRawImuResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateRawImuResponse::SetRateRawImuResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateRawImuResponse)
}
SetRateRawImuResponse::SetRateRawImuResponse(const SetRateRawImuResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateRawImuResponse)
}

void SetRateRawImuResponse::SharedCtor() {
telemetry_result_ = nullptr;
}

SetRateRawImuResponse::~SetRateRawImuResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateRawImuResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateRawImuResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateRawImuResponse::ArenaDtor(void* object) {
  SetRateRawImuResponse* _this = reinterpret_cast< SetRateRawImuResponse* >(object);
  (void)_this;
}
void SetRateRawImuResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateRawImuResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateRawImuResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateRawImuResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateRawImuResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateRawImuResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateRawImuResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateRawImuResponse)
  return target;
}

size_t SetRateRawImuResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateRawImuResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateRawImuResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateRawImuResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateRawImuResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateRawImuResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateRawImuResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateRawImuResponse)
    MergeFrom(*source);
  }
}

void SetRateRawImuResponse::MergeFrom(const SetRateRawImuResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateRawImuResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateRawImuResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateRawImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateRawImuResponse::CopyFrom(const SetRateRawImuResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateRawImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateRawImuResponse::IsInitialized() const {
  return true;
}

void SetRateRawImuResponse::InternalSwap(SetRateRawImuResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateRawImuResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateUnixEpochTimeRequest::_Internal {
 public:
};

SetRateUnixEpochTimeRequest::SetRateUnixEpochTimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
}
SetRateUnixEpochTimeRequest::SetRateUnixEpochTimeRequest(const SetRateUnixEpochTimeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
}

void SetRateUnixEpochTimeRequest::SharedCtor() {
rate_hz_ = 0;
}

SetRateUnixEpochTimeRequest::~SetRateUnixEpochTimeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateUnixEpochTimeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetRateUnixEpochTimeRequest::ArenaDtor(void* object) {
  SetRateUnixEpochTimeRequest* _this = reinterpret_cast< SetRateUnixEpochTimeRequest* >(object);
  (void)_this;
}
void SetRateUnixEpochTimeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateUnixEpochTimeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateUnixEpochTimeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateUnixEpochTimeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateUnixEpochTimeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
  return target;
}

size_t SetRateUnixEpochTimeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateUnixEpochTimeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateUnixEpochTimeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateUnixEpochTimeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
    MergeFrom(*source);
  }
}

void SetRateUnixEpochTimeRequest::MergeFrom(const SetRateUnixEpochTimeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateUnixEpochTimeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateUnixEpochTimeRequest::CopyFrom(const SetRateUnixEpochTimeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateUnixEpochTimeRequest::IsInitialized() const {
  return true;
}

void SetRateUnixEpochTimeRequest::InternalSwap(SetRateUnixEpochTimeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateUnixEpochTimeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateUnixEpochTimeResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateUnixEpochTimeResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateUnixEpochTimeResponse::_Internal::telemetry_result(const SetRateUnixEpochTimeResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateUnixEpochTimeResponse::SetRateUnixEpochTimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
}
SetRateUnixEpochTimeResponse::SetRateUnixEpochTimeResponse(const SetRateUnixEpochTimeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
}

void SetRateUnixEpochTimeResponse::SharedCtor() {
telemetry_result_ = nullptr;
}

SetRateUnixEpochTimeResponse::~SetRateUnixEpochTimeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateUnixEpochTimeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateUnixEpochTimeResponse::ArenaDtor(void* object) {
  SetRateUnixEpochTimeResponse* _this = reinterpret_cast< SetRateUnixEpochTimeResponse* >(object);
  (void)_this;
}
void SetRateUnixEpochTimeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateUnixEpochTimeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateUnixEpochTimeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateUnixEpochTimeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateUnixEpochTimeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
  return target;
}

size_t SetRateUnixEpochTimeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateUnixEpochTimeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateUnixEpochTimeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateUnixEpochTimeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
    MergeFrom(*source);
  }
}

void SetRateUnixEpochTimeResponse::MergeFrom(const SetRateUnixEpochTimeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateUnixEpochTimeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateUnixEpochTimeResponse::CopyFrom(const SetRateUnixEpochTimeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateUnixEpochTimeResponse::IsInitialized() const {
  return true;
}

void SetRateUnixEpochTimeResponse::InternalSwap(SetRateUnixEpochTimeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateUnixEpochTimeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateDistanceSensorRequest::_Internal {
 public:
};

SetRateDistanceSensorRequest::SetRateDistanceSensorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateDistanceSensorRequest)
}
SetRateDistanceSensorRequest::SetRateDistanceSensorRequest(const SetRateDistanceSensorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateDistanceSensorRequest)
}

void SetRateDistanceSensorRequest::SharedCtor() {
rate_hz_ = 0;
}

SetRateDistanceSensorRequest::~SetRateDistanceSensorRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateDistanceSensorRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateDistanceSensorRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetRateDistanceSensorRequest::ArenaDtor(void* object) {
  SetRateDistanceSensorRequest* _this = reinterpret_cast< SetRateDistanceSensorRequest* >(object);
  (void)_this;
}
void SetRateDistanceSensorRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateDistanceSensorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateDistanceSensorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateDistanceSensorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateDistanceSensorRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateDistanceSensorRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateDistanceSensorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateDistanceSensorRequest)
  return target;
}

size_t SetRateDistanceSensorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateDistanceSensorRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateDistanceSensorRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateDistanceSensorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateDistanceSensorRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateDistanceSensorRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateDistanceSensorRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateDistanceSensorRequest)
    MergeFrom(*source);
  }
}

void SetRateDistanceSensorRequest::MergeFrom(const SetRateDistanceSensorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateDistanceSensorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateDistanceSensorRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateDistanceSensorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateDistanceSensorRequest::CopyFrom(const SetRateDistanceSensorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateDistanceSensorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateDistanceSensorRequest::IsInitialized() const {
  return true;
}

void SetRateDistanceSensorRequest::InternalSwap(SetRateDistanceSensorRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateDistanceSensorRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetRateDistanceSensorResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateDistanceSensorResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateDistanceSensorResponse::_Internal::telemetry_result(const SetRateDistanceSensorResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateDistanceSensorResponse::SetRateDistanceSensorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.SetRateDistanceSensorResponse)
}
SetRateDistanceSensorResponse::SetRateDistanceSensorResponse(const SetRateDistanceSensorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateDistanceSensorResponse)
}

void SetRateDistanceSensorResponse::SharedCtor() {
telemetry_result_ = nullptr;
}

SetRateDistanceSensorResponse::~SetRateDistanceSensorResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateDistanceSensorResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRateDistanceSensorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateDistanceSensorResponse::ArenaDtor(void* object) {
  SetRateDistanceSensorResponse* _this = reinterpret_cast< SetRateDistanceSensorResponse* >(object);
  (void)_this;
}
void SetRateDistanceSensorResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRateDistanceSensorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRateDistanceSensorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateDistanceSensorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRateDistanceSensorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateDistanceSensorResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateDistanceSensorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateDistanceSensorResponse)
  return target;
}

size_t SetRateDistanceSensorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateDistanceSensorResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateDistanceSensorResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateDistanceSensorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateDistanceSensorResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateDistanceSensorResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateDistanceSensorResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateDistanceSensorResponse)
    MergeFrom(*source);
  }
}

void SetRateDistanceSensorResponse::MergeFrom(const SetRateDistanceSensorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateDistanceSensorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateDistanceSensorResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateDistanceSensorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateDistanceSensorResponse::CopyFrom(const SetRateDistanceSensorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateDistanceSensorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateDistanceSensorResponse::IsInitialized() const {
  return true;
}

void SetRateDistanceSensorResponse::InternalSwap(SetRateDistanceSensorResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateDistanceSensorResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetGpsGlobalOriginRequest::_Internal {
 public:
};

GetGpsGlobalOriginRequest::GetGpsGlobalOriginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.GetGpsGlobalOriginRequest)
}
GetGpsGlobalOriginRequest::GetGpsGlobalOriginRequest(const GetGpsGlobalOriginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.GetGpsGlobalOriginRequest)
}

void GetGpsGlobalOriginRequest::SharedCtor() {
}

GetGpsGlobalOriginRequest::~GetGpsGlobalOriginRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.GetGpsGlobalOriginRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetGpsGlobalOriginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetGpsGlobalOriginRequest::ArenaDtor(void* object) {
  GetGpsGlobalOriginRequest* _this = reinterpret_cast< GetGpsGlobalOriginRequest* >(object);
  (void)_this;
}
void GetGpsGlobalOriginRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetGpsGlobalOriginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetGpsGlobalOriginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.GetGpsGlobalOriginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetGpsGlobalOriginRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetGpsGlobalOriginRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.GetGpsGlobalOriginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.GetGpsGlobalOriginRequest)
  return target;
}

size_t GetGpsGlobalOriginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.GetGpsGlobalOriginRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetGpsGlobalOriginRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.GetGpsGlobalOriginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetGpsGlobalOriginRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetGpsGlobalOriginRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.GetGpsGlobalOriginRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.GetGpsGlobalOriginRequest)
    MergeFrom(*source);
  }
}

void GetGpsGlobalOriginRequest::MergeFrom(const GetGpsGlobalOriginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.GetGpsGlobalOriginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetGpsGlobalOriginRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.GetGpsGlobalOriginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGpsGlobalOriginRequest::CopyFrom(const GetGpsGlobalOriginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.GetGpsGlobalOriginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGpsGlobalOriginRequest::IsInitialized() const {
  return true;
}

void GetGpsGlobalOriginRequest::InternalSwap(GetGpsGlobalOriginRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetGpsGlobalOriginRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetGpsGlobalOriginResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const GetGpsGlobalOriginResponse* msg);
  static const ::mavsdk::rpc::telemetry::GpsGlobalOrigin& gps_global_origin(const GetGpsGlobalOriginResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
GetGpsGlobalOriginResponse::_Internal::telemetry_result(const GetGpsGlobalOriginResponse* msg) {
  return *msg->telemetry_result_;
}
const ::mavsdk::rpc::telemetry::GpsGlobalOrigin&
GetGpsGlobalOriginResponse::_Internal::gps_global_origin(const GetGpsGlobalOriginResponse* msg) {
  return *msg->gps_global_origin_;
}
GetGpsGlobalOriginResponse::GetGpsGlobalOriginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse)
}
GetGpsGlobalOriginResponse::GetGpsGlobalOriginResponse(const GetGpsGlobalOriginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  if (from._internal_has_gps_global_origin()) {
    gps_global_origin_ = new ::mavsdk::rpc::telemetry::GpsGlobalOrigin(*from.gps_global_origin_);
  } else {
    gps_global_origin_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse)
}

void GetGpsGlobalOriginResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&telemetry_result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gps_global_origin_) -
    reinterpret_cast<char*>(&telemetry_result_)) + sizeof(gps_global_origin_));
}

GetGpsGlobalOriginResponse::~GetGpsGlobalOriginResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetGpsGlobalOriginResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_result_;
  if (this != internal_default_instance()) delete gps_global_origin_;
}

void GetGpsGlobalOriginResponse::ArenaDtor(void* object) {
  GetGpsGlobalOriginResponse* _this = reinterpret_cast< GetGpsGlobalOriginResponse* >(object);
  (void)_this;
}
void GetGpsGlobalOriginResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetGpsGlobalOriginResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetGpsGlobalOriginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  if (GetArena() == nullptr && gps_global_origin_ != nullptr) {
    delete gps_global_origin_;
  }
  gps_global_origin_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetGpsGlobalOriginResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry.GpsGlobalOrigin gps_global_origin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gps_global_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetGpsGlobalOriginResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  // .mavsdk.rpc.telemetry.GpsGlobalOrigin gps_global_origin = 2;
  if (this->has_gps_global_origin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gps_global_origin(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse)
  return target;
}

size_t GetGpsGlobalOriginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  // .mavsdk.rpc.telemetry.GpsGlobalOrigin gps_global_origin = 2;
  if (this->has_gps_global_origin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gps_global_origin_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetGpsGlobalOriginResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetGpsGlobalOriginResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetGpsGlobalOriginResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse)
    MergeFrom(*source);
  }
}

void GetGpsGlobalOriginResponse::MergeFrom(const GetGpsGlobalOriginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
  if (from.has_gps_global_origin()) {
    _internal_mutable_gps_global_origin()->::mavsdk::rpc::telemetry::GpsGlobalOrigin::MergeFrom(from._internal_gps_global_origin());
  }
}

void GetGpsGlobalOriginResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGpsGlobalOriginResponse::CopyFrom(const GetGpsGlobalOriginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGpsGlobalOriginResponse::IsInitialized() const {
  return true;
}

void GetGpsGlobalOriginResponse::InternalSwap(GetGpsGlobalOriginResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetGpsGlobalOriginResponse, gps_global_origin_)
      + sizeof(GetGpsGlobalOriginResponse::gps_global_origin_)
      - PROTOBUF_FIELD_OFFSET(GetGpsGlobalOriginResponse, telemetry_result_)>(
          reinterpret_cast<char*>(&telemetry_result_),
          reinterpret_cast<char*>(&other->telemetry_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetGpsGlobalOriginResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Position::_Internal {
 public:
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_deg_, &from.latitude_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&relative_altitude_m_) -
    reinterpret_cast<char*>(&latitude_deg_)) + sizeof(relative_altitude_m_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.Position)
}

void Position::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&latitude_deg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&relative_altitude_m_) -
    reinterpret_cast<char*>(&latitude_deg_)) + sizeof(relative_altitude_m_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.Position)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Position::ArenaDtor(void* object) {
  Position* _this = reinterpret_cast< Position* >(object);
  (void)_this;
}
void Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relative_altitude_m_) -
      reinterpret_cast<char*>(&latitude_deg_)) + sizeof(relative_altitude_m_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          latitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          longitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          absolute_altitude_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float relative_altitude_m = 4 [(.mavsdk.options.default_value) = "NaN"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          relative_altitude_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->latitude_deg() <= 0 && this->latitude_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude_deg(), target);
  }

  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->longitude_deg() <= 0 && this->longitude_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude_deg(), target);
  }

  // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->absolute_altitude_m() <= 0 && this->absolute_altitude_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_absolute_altitude_m(), target);
  }

  // float relative_altitude_m = 4 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->relative_altitude_m() <= 0 && this->relative_altitude_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_relative_altitude_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->latitude_deg() <= 0 && this->latitude_deg() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->longitude_deg() <= 0 && this->longitude_deg() >= 0)) {
    total_size += 1 + 8;
  }

  // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->absolute_altitude_m() <= 0 && this->absolute_altitude_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float relative_altitude_m = 4 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->relative_altitude_m() <= 0 && this->relative_altitude_m() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.latitude_deg() <= 0 && from.latitude_deg() >= 0)) {
    _internal_set_latitude_deg(from._internal_latitude_deg());
  }
  if (!(from.longitude_deg() <= 0 && from.longitude_deg() >= 0)) {
    _internal_set_longitude_deg(from._internal_longitude_deg());
  }
  if (!(from.absolute_altitude_m() <= 0 && from.absolute_altitude_m() >= 0)) {
    _internal_set_absolute_altitude_m(from._internal_absolute_altitude_m());
  }
  if (!(from.relative_altitude_m() <= 0 && from.relative_altitude_m() >= 0)) {
    _internal_set_relative_altitude_m(from._internal_relative_altitude_m());
  }
}

void Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, relative_altitude_m_)
      + sizeof(Position::relative_altitude_m_)
      - PROTOBUF_FIELD_OFFSET(Position, latitude_deg_)>(
          reinterpret_cast<char*>(&latitude_deg_),
          reinterpret_cast<char*>(&other->latitude_deg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Quaternion::_Internal {
 public:
};

Quaternion::Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.Quaternion)
}
Quaternion::Quaternion(const Quaternion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&w_, &from.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_us_) -
    reinterpret_cast<char*>(&w_)) + sizeof(timestamp_us_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.Quaternion)
}

void Quaternion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&w_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_us_) -
    reinterpret_cast<char*>(&w_)) + sizeof(timestamp_us_));
}

Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.Quaternion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Quaternion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Quaternion::ArenaDtor(void* object) {
  Quaternion* _this = reinterpret_cast< Quaternion* >(object);
  (void)_this;
}
void Quaternion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Quaternion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.Quaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_us_) -
      reinterpret_cast<char*>(&w_)) + sizeof(timestamp_us_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quaternion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float w = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float x = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 4 [(.mavsdk.options.default_value) = "NaN"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp_us = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          timestamp_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Quaternion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.Quaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float w = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->w() <= 0 && this->w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_w(), target);
  }

  // float x = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  // uint64 timestamp_us = 5;
  if (this->timestamp_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timestamp_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.Quaternion)
  return target;
}

size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.Quaternion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float w = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->w() <= 0 && this->w() >= 0)) {
    total_size += 1 + 4;
  }

  // float x = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 4 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 timestamp_us = 5;
  if (this->timestamp_us() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp_us());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Quaternion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  const Quaternion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Quaternion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.Quaternion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.Quaternion)
    MergeFrom(*source);
  }
}

void Quaternion::MergeFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.w() <= 0 && from.w() >= 0)) {
    _internal_set_w(from._internal_w());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (from.timestamp_us() != 0) {
    _internal_set_timestamp_us(from._internal_timestamp_us());
  }
}

void Quaternion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion::IsInitialized() const {
  return true;
}

void Quaternion::InternalSwap(Quaternion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quaternion, timestamp_us_)
      + sizeof(Quaternion::timestamp_us_)
      - PROTOBUF_FIELD_OFFSET(Quaternion, w_)>(
          reinterpret_cast<char*>(&w_),
          reinterpret_cast<char*>(&other->w_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quaternion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EulerAngle::_Internal {
 public:
};

EulerAngle::EulerAngle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.EulerAngle)
}
EulerAngle::EulerAngle(const EulerAngle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roll_deg_, &from.roll_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_deg_) -
    reinterpret_cast<char*>(&roll_deg_)) + sizeof(yaw_deg_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.EulerAngle)
}

void EulerAngle::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roll_deg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&yaw_deg_) -
    reinterpret_cast<char*>(&roll_deg_)) + sizeof(yaw_deg_));
}

EulerAngle::~EulerAngle() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.EulerAngle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EulerAngle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EulerAngle::ArenaDtor(void* object) {
  EulerAngle* _this = reinterpret_cast< EulerAngle* >(object);
  (void)_this;
}
void EulerAngle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EulerAngle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EulerAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.EulerAngle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roll_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_deg_) -
      reinterpret_cast<char*>(&roll_deg_)) + sizeof(yaw_deg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EulerAngle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          roll_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          pitch_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          yaw_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp_us = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timestamp_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EulerAngle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.EulerAngle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->roll_deg() <= 0 && this->roll_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_roll_deg(), target);
  }

  // float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->pitch_deg() <= 0 && this->pitch_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pitch_deg(), target);
  }

  // float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->yaw_deg() <= 0 && this->yaw_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw_deg(), target);
  }

  // uint64 timestamp_us = 4;
  if (this->timestamp_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_timestamp_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.EulerAngle)
  return target;
}

size_t EulerAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.EulerAngle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->roll_deg() <= 0 && this->roll_deg() >= 0)) {
    total_size += 1 + 4;
  }

  // float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->pitch_deg() <= 0 && this->pitch_deg() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 timestamp_us = 4;
  if (this->timestamp_us() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp_us());
  }

  // float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->yaw_deg() <= 0 && this->yaw_deg() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EulerAngle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.EulerAngle)
  GOOGLE_DCHECK_NE(&from, this);
  const EulerAngle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EulerAngle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.EulerAngle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.EulerAngle)
    MergeFrom(*source);
  }
}

void EulerAngle::MergeFrom(const EulerAngle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.EulerAngle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.roll_deg() <= 0 && from.roll_deg() >= 0)) {
    _internal_set_roll_deg(from._internal_roll_deg());
  }
  if (!(from.pitch_deg() <= 0 && from.pitch_deg() >= 0)) {
    _internal_set_pitch_deg(from._internal_pitch_deg());
  }
  if (from.timestamp_us() != 0) {
    _internal_set_timestamp_us(from._internal_timestamp_us());
  }
  if (!(from.yaw_deg() <= 0 && from.yaw_deg() >= 0)) {
    _internal_set_yaw_deg(from._internal_yaw_deg());
  }
}

void EulerAngle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.EulerAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EulerAngle::CopyFrom(const EulerAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.EulerAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EulerAngle::IsInitialized() const {
  return true;
}

void EulerAngle::InternalSwap(EulerAngle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EulerAngle, yaw_deg_)
      + sizeof(EulerAngle::yaw_deg_)
      - PROTOBUF_FIELD_OFFSET(EulerAngle, roll_deg_)>(
          reinterpret_cast<char*>(&roll_deg_),
          reinterpret_cast<char*>(&other->roll_deg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EulerAngle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AngularVelocityBody::_Internal {
 public:
};

AngularVelocityBody::AngularVelocityBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.AngularVelocityBody)
}
AngularVelocityBody::AngularVelocityBody(const AngularVelocityBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roll_rad_s_, &from.roll_rad_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_rad_s_) -
    reinterpret_cast<char*>(&roll_rad_s_)) + sizeof(yaw_rad_s_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.AngularVelocityBody)
}

void AngularVelocityBody::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roll_rad_s_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&yaw_rad_s_) -
    reinterpret_cast<char*>(&roll_rad_s_)) + sizeof(yaw_rad_s_));
}

AngularVelocityBody::~AngularVelocityBody() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.AngularVelocityBody)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AngularVelocityBody::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AngularVelocityBody::ArenaDtor(void* object) {
  AngularVelocityBody* _this = reinterpret_cast< AngularVelocityBody* >(object);
  (void)_this;
}
void AngularVelocityBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AngularVelocityBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AngularVelocityBody::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.AngularVelocityBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roll_rad_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_rad_s_) -
      reinterpret_cast<char*>(&roll_rad_s_)) + sizeof(yaw_rad_s_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AngularVelocityBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          roll_rad_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          pitch_rad_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          yaw_rad_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AngularVelocityBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.AngularVelocityBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->roll_rad_s() <= 0 && this->roll_rad_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_roll_rad_s(), target);
  }

  // float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->pitch_rad_s() <= 0 && this->pitch_rad_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pitch_rad_s(), target);
  }

  // float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->yaw_rad_s() <= 0 && this->yaw_rad_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw_rad_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.AngularVelocityBody)
  return target;
}

size_t AngularVelocityBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.AngularVelocityBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->roll_rad_s() <= 0 && this->roll_rad_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->pitch_rad_s() <= 0 && this->pitch_rad_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->yaw_rad_s() <= 0 && this->yaw_rad_s() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AngularVelocityBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.AngularVelocityBody)
  GOOGLE_DCHECK_NE(&from, this);
  const AngularVelocityBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AngularVelocityBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.AngularVelocityBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.AngularVelocityBody)
    MergeFrom(*source);
  }
}

void AngularVelocityBody::MergeFrom(const AngularVelocityBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.AngularVelocityBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.roll_rad_s() <= 0 && from.roll_rad_s() >= 0)) {
    _internal_set_roll_rad_s(from._internal_roll_rad_s());
  }
  if (!(from.pitch_rad_s() <= 0 && from.pitch_rad_s() >= 0)) {
    _internal_set_pitch_rad_s(from._internal_pitch_rad_s());
  }
  if (!(from.yaw_rad_s() <= 0 && from.yaw_rad_s() >= 0)) {
    _internal_set_yaw_rad_s(from._internal_yaw_rad_s());
  }
}

void AngularVelocityBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.AngularVelocityBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AngularVelocityBody::CopyFrom(const AngularVelocityBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.AngularVelocityBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AngularVelocityBody::IsInitialized() const {
  return true;
}

void AngularVelocityBody::InternalSwap(AngularVelocityBody* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AngularVelocityBody, yaw_rad_s_)
      + sizeof(AngularVelocityBody::yaw_rad_s_)
      - PROTOBUF_FIELD_OFFSET(AngularVelocityBody, roll_rad_s_)>(
          reinterpret_cast<char*>(&roll_rad_s_),
          reinterpret_cast<char*>(&other->roll_rad_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AngularVelocityBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GpsInfo::_Internal {
 public:
};

GpsInfo::GpsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.GpsInfo)
}
GpsInfo::GpsInfo(const GpsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num_satellites_, &from.num_satellites_,
    static_cast<size_t>(reinterpret_cast<char*>(&fix_type_) -
    reinterpret_cast<char*>(&num_satellites_)) + sizeof(fix_type_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.GpsInfo)
}

void GpsInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&num_satellites_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fix_type_) -
    reinterpret_cast<char*>(&num_satellites_)) + sizeof(fix_type_));
}

GpsInfo::~GpsInfo() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.GpsInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GpsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GpsInfo::ArenaDtor(void* object) {
  GpsInfo* _this = reinterpret_cast< GpsInfo* >(object);
  (void)_this;
}
void GpsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GpsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GpsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.GpsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_satellites_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fix_type_) -
      reinterpret_cast<char*>(&num_satellites_)) + sizeof(fix_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num_satellites = 1 [(.mavsdk.options.default_value) = "0"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_satellites_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry.FixType fix_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_fix_type(static_cast<::mavsdk::rpc::telemetry::FixType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GpsInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.GpsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_satellites = 1 [(.mavsdk.options.default_value) = "0"];
  if (this->num_satellites() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_satellites(), target);
  }

  // .mavsdk.rpc.telemetry.FixType fix_type = 2;
  if (this->fix_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_fix_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.GpsInfo)
  return target;
}

size_t GpsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.GpsInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 num_satellites = 1 [(.mavsdk.options.default_value) = "0"];
  if (this->num_satellites() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_satellites());
  }

  // .mavsdk.rpc.telemetry.FixType fix_type = 2;
  if (this->fix_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fix_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpsInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.GpsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GpsInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GpsInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.GpsInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.GpsInfo)
    MergeFrom(*source);
  }
}

void GpsInfo::MergeFrom(const GpsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.GpsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_satellites() != 0) {
    _internal_set_num_satellites(from._internal_num_satellites());
  }
  if (from.fix_type() != 0) {
    _internal_set_fix_type(from._internal_fix_type());
  }
}

void GpsInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.GpsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpsInfo::CopyFrom(const GpsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.GpsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpsInfo::IsInitialized() const {
  return true;
}

void GpsInfo::InternalSwap(GpsInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpsInfo, fix_type_)
      + sizeof(GpsInfo::fix_type_)
      - PROTOBUF_FIELD_OFFSET(GpsInfo, num_satellites_)>(
          reinterpret_cast<char*>(&num_satellites_),
          reinterpret_cast<char*>(&other->num_satellites_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GpsInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RawGps::_Internal {
 public:
};

RawGps::RawGps(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.RawGps)
}
RawGps::RawGps(const RawGps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_us_, &from.timestamp_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_deg_) -
    reinterpret_cast<char*>(&timestamp_us_)) + sizeof(yaw_deg_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.RawGps)
}

void RawGps::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_us_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&yaw_deg_) -
    reinterpret_cast<char*>(&timestamp_us_)) + sizeof(yaw_deg_));
}

RawGps::~RawGps() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.RawGps)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RawGps::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RawGps::ArenaDtor(void* object) {
  RawGps* _this = reinterpret_cast< RawGps* >(object);
  (void)_this;
}
void RawGps::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RawGps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RawGps::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.RawGps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_deg_) -
      reinterpret_cast<char*>(&timestamp_us_)) + sizeof(yaw_deg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawGps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 timestamp_us = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double latitude_deg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          latitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude_deg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          longitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float absolute_altitude_m = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          absolute_altitude_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float hdop = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          hdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vdop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          vdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float velocity_m_s = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          velocity_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cog_deg = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          cog_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float altitude_ellipsoid_m = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          altitude_ellipsoid_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float horizontal_uncertainty_m = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          horizontal_uncertainty_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vertical_uncertainty_m = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          vertical_uncertainty_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float velocity_uncertainty_m_s = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          velocity_uncertainty_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float heading_uncertainty_deg = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          heading_uncertainty_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw_deg = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          yaw_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawGps::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.RawGps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp_us = 1;
  if (this->timestamp_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp_us(), target);
  }

  // double latitude_deg = 2;
  if (!(this->latitude_deg() <= 0 && this->latitude_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_latitude_deg(), target);
  }

  // double longitude_deg = 3;
  if (!(this->longitude_deg() <= 0 && this->longitude_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_longitude_deg(), target);
  }

  // float absolute_altitude_m = 4;
  if (!(this->absolute_altitude_m() <= 0 && this->absolute_altitude_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_absolute_altitude_m(), target);
  }

  // float hdop = 5;
  if (!(this->hdop() <= 0 && this->hdop() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_hdop(), target);
  }

  // float vdop = 6;
  if (!(this->vdop() <= 0 && this->vdop() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_vdop(), target);
  }

  // float velocity_m_s = 7;
  if (!(this->velocity_m_s() <= 0 && this->velocity_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_velocity_m_s(), target);
  }

  // float cog_deg = 8;
  if (!(this->cog_deg() <= 0 && this->cog_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_cog_deg(), target);
  }

  // float altitude_ellipsoid_m = 9;
  if (!(this->altitude_ellipsoid_m() <= 0 && this->altitude_ellipsoid_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_altitude_ellipsoid_m(), target);
  }

  // float horizontal_uncertainty_m = 10;
  if (!(this->horizontal_uncertainty_m() <= 0 && this->horizontal_uncertainty_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_horizontal_uncertainty_m(), target);
  }

  // float vertical_uncertainty_m = 11;
  if (!(this->vertical_uncertainty_m() <= 0 && this->vertical_uncertainty_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_vertical_uncertainty_m(), target);
  }

  // float velocity_uncertainty_m_s = 12;
  if (!(this->velocity_uncertainty_m_s() <= 0 && this->velocity_uncertainty_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_velocity_uncertainty_m_s(), target);
  }

  // float heading_uncertainty_deg = 13;
  if (!(this->heading_uncertainty_deg() <= 0 && this->heading_uncertainty_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_heading_uncertainty_deg(), target);
  }

  // float yaw_deg = 14;
  if (!(this->yaw_deg() <= 0 && this->yaw_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_yaw_deg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.RawGps)
  return target;
}

size_t RawGps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.RawGps)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 timestamp_us = 1;
  if (this->timestamp_us() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp_us());
  }

  // double latitude_deg = 2;
  if (!(this->latitude_deg() <= 0 && this->latitude_deg() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude_deg = 3;
  if (!(this->longitude_deg() <= 0 && this->longitude_deg() >= 0)) {
    total_size += 1 + 8;
  }

  // float absolute_altitude_m = 4;
  if (!(this->absolute_altitude_m() <= 0 && this->absolute_altitude_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float hdop = 5;
  if (!(this->hdop() <= 0 && this->hdop() >= 0)) {
    total_size += 1 + 4;
  }

  // float vdop = 6;
  if (!(this->vdop() <= 0 && this->vdop() >= 0)) {
    total_size += 1 + 4;
  }

  // float velocity_m_s = 7;
  if (!(this->velocity_m_s() <= 0 && this->velocity_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float cog_deg = 8;
  if (!(this->cog_deg() <= 0 && this->cog_deg() >= 0)) {
    total_size += 1 + 4;
  }

  // float altitude_ellipsoid_m = 9;
  if (!(this->altitude_ellipsoid_m() <= 0 && this->altitude_ellipsoid_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float horizontal_uncertainty_m = 10;
  if (!(this->horizontal_uncertainty_m() <= 0 && this->horizontal_uncertainty_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float vertical_uncertainty_m = 11;
  if (!(this->vertical_uncertainty_m() <= 0 && this->vertical_uncertainty_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float velocity_uncertainty_m_s = 12;
  if (!(this->velocity_uncertainty_m_s() <= 0 && this->velocity_uncertainty_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float heading_uncertainty_deg = 13;
  if (!(this->heading_uncertainty_deg() <= 0 && this->heading_uncertainty_deg() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw_deg = 14;
  if (!(this->yaw_deg() <= 0 && this->yaw_deg() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawGps::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.RawGps)
  GOOGLE_DCHECK_NE(&from, this);
  const RawGps* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawGps>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.RawGps)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.RawGps)
    MergeFrom(*source);
  }
}

void RawGps::MergeFrom(const RawGps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.RawGps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp_us() != 0) {
    _internal_set_timestamp_us(from._internal_timestamp_us());
  }
  if (!(from.latitude_deg() <= 0 && from.latitude_deg() >= 0)) {
    _internal_set_latitude_deg(from._internal_latitude_deg());
  }
  if (!(from.longitude_deg() <= 0 && from.longitude_deg() >= 0)) {
    _internal_set_longitude_deg(from._internal_longitude_deg());
  }
  if (!(from.absolute_altitude_m() <= 0 && from.absolute_altitude_m() >= 0)) {
    _internal_set_absolute_altitude_m(from._internal_absolute_altitude_m());
  }
  if (!(from.hdop() <= 0 && from.hdop() >= 0)) {
    _internal_set_hdop(from._internal_hdop());
  }
  if (!(from.vdop() <= 0 && from.vdop() >= 0)) {
    _internal_set_vdop(from._internal_vdop());
  }
  if (!(from.velocity_m_s() <= 0 && from.velocity_m_s() >= 0)) {
    _internal_set_velocity_m_s(from._internal_velocity_m_s());
  }
  if (!(from.cog_deg() <= 0 && from.cog_deg() >= 0)) {
    _internal_set_cog_deg(from._internal_cog_deg());
  }
  if (!(from.altitude_ellipsoid_m() <= 0 && from.altitude_ellipsoid_m() >= 0)) {
    _internal_set_altitude_ellipsoid_m(from._internal_altitude_ellipsoid_m());
  }
  if (!(from.horizontal_uncertainty_m() <= 0 && from.horizontal_uncertainty_m() >= 0)) {
    _internal_set_horizontal_uncertainty_m(from._internal_horizontal_uncertainty_m());
  }
  if (!(from.vertical_uncertainty_m() <= 0 && from.vertical_uncertainty_m() >= 0)) {
    _internal_set_vertical_uncertainty_m(from._internal_vertical_uncertainty_m());
  }
  if (!(from.velocity_uncertainty_m_s() <= 0 && from.velocity_uncertainty_m_s() >= 0)) {
    _internal_set_velocity_uncertainty_m_s(from._internal_velocity_uncertainty_m_s());
  }
  if (!(from.heading_uncertainty_deg() <= 0 && from.heading_uncertainty_deg() >= 0)) {
    _internal_set_heading_uncertainty_deg(from._internal_heading_uncertainty_deg());
  }
  if (!(from.yaw_deg() <= 0 && from.yaw_deg() >= 0)) {
    _internal_set_yaw_deg(from._internal_yaw_deg());
  }
}

void RawGps::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.RawGps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawGps::CopyFrom(const RawGps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.RawGps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawGps::IsInitialized() const {
  return true;
}

void RawGps::InternalSwap(RawGps* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RawGps, yaw_deg_)
      + sizeof(RawGps::yaw_deg_)
      - PROTOBUF_FIELD_OFFSET(RawGps, timestamp_us_)>(
          reinterpret_cast<char*>(&timestamp_us_),
          reinterpret_cast<char*>(&other->timestamp_us_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RawGps::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Battery::_Internal {
 public:
};

Battery::Battery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.Battery)
}
Battery::Battery(const Battery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&voltage_v_, &from.voltage_v_,
    static_cast<size_t>(reinterpret_cast<char*>(&remaining_percent_) -
    reinterpret_cast<char*>(&voltage_v_)) + sizeof(remaining_percent_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.Battery)
}

void Battery::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&voltage_v_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&remaining_percent_) -
    reinterpret_cast<char*>(&voltage_v_)) + sizeof(remaining_percent_));
}

Battery::~Battery() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.Battery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Battery::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Battery::ArenaDtor(void* object) {
  Battery* _this = reinterpret_cast< Battery* >(object);
  (void)_this;
}
void Battery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Battery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Battery::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.Battery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&voltage_v_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remaining_percent_) -
      reinterpret_cast<char*>(&voltage_v_)) + sizeof(remaining_percent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Battery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float voltage_v = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          voltage_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float remaining_percent = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          remaining_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Battery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.Battery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float voltage_v = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->voltage_v() <= 0 && this->voltage_v() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_voltage_v(), target);
  }

  // float remaining_percent = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->remaining_percent() <= 0 && this->remaining_percent() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_remaining_percent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.Battery)
  return target;
}

size_t Battery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.Battery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float voltage_v = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->voltage_v() <= 0 && this->voltage_v() >= 0)) {
    total_size += 1 + 4;
  }

  // float remaining_percent = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->remaining_percent() <= 0 && this->remaining_percent() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Battery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.Battery)
  GOOGLE_DCHECK_NE(&from, this);
  const Battery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Battery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.Battery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.Battery)
    MergeFrom(*source);
  }
}

void Battery::MergeFrom(const Battery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.Battery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.voltage_v() <= 0 && from.voltage_v() >= 0)) {
    _internal_set_voltage_v(from._internal_voltage_v());
  }
  if (!(from.remaining_percent() <= 0 && from.remaining_percent() >= 0)) {
    _internal_set_remaining_percent(from._internal_remaining_percent());
  }
}

void Battery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battery::CopyFrom(const Battery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battery::IsInitialized() const {
  return true;
}

void Battery::InternalSwap(Battery* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Battery, remaining_percent_)
      + sizeof(Battery::remaining_percent_)
      - PROTOBUF_FIELD_OFFSET(Battery, voltage_v_)>(
          reinterpret_cast<char*>(&voltage_v_),
          reinterpret_cast<char*>(&other->voltage_v_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Battery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Health::_Internal {
 public:
};

Health::Health(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.Health)
}
Health::Health(const Health& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_gyrometer_calibration_ok_, &from.is_gyrometer_calibration_ok_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_home_position_ok_) -
    reinterpret_cast<char*>(&is_gyrometer_calibration_ok_)) + sizeof(is_home_position_ok_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.Health)
}

void Health::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_gyrometer_calibration_ok_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_home_position_ok_) -
    reinterpret_cast<char*>(&is_gyrometer_calibration_ok_)) + sizeof(is_home_position_ok_));
}

Health::~Health() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.Health)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Health::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Health::ArenaDtor(void* object) {
  Health* _this = reinterpret_cast< Health* >(object);
  (void)_this;
}
void Health::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Health::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Health::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.Health)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_gyrometer_calibration_ok_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_home_position_ok_) -
      reinterpret_cast<char*>(&is_gyrometer_calibration_ok_)) + sizeof(is_home_position_ok_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Health::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_gyrometer_calibration_ok = 1 [(.mavsdk.options.default_value) = "false"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_gyrometer_calibration_ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_accelerometer_calibration_ok = 2 [(.mavsdk.options.default_value) = "false"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_accelerometer_calibration_ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_magnetometer_calibration_ok = 3 [(.mavsdk.options.default_value) = "false"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_magnetometer_calibration_ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_level_calibration_ok = 4 [(.mavsdk.options.default_value) = "false"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_level_calibration_ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_local_position_ok = 5 [(.mavsdk.options.default_value) = "false"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_local_position_ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_global_position_ok = 6 [(.mavsdk.options.default_value) = "false"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_global_position_ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_home_position_ok = 7 [(.mavsdk.options.default_value) = "false"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_home_position_ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Health::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.Health)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_gyrometer_calibration_ok = 1 [(.mavsdk.options.default_value) = "false"];
  if (this->is_gyrometer_calibration_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_gyrometer_calibration_ok(), target);
  }

  // bool is_accelerometer_calibration_ok = 2 [(.mavsdk.options.default_value) = "false"];
  if (this->is_accelerometer_calibration_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_accelerometer_calibration_ok(), target);
  }

  // bool is_magnetometer_calibration_ok = 3 [(.mavsdk.options.default_value) = "false"];
  if (this->is_magnetometer_calibration_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_magnetometer_calibration_ok(), target);
  }

  // bool is_level_calibration_ok = 4 [(.mavsdk.options.default_value) = "false"];
  if (this->is_level_calibration_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_level_calibration_ok(), target);
  }

  // bool is_local_position_ok = 5 [(.mavsdk.options.default_value) = "false"];
  if (this->is_local_position_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_local_position_ok(), target);
  }

  // bool is_global_position_ok = 6 [(.mavsdk.options.default_value) = "false"];
  if (this->is_global_position_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_global_position_ok(), target);
  }

  // bool is_home_position_ok = 7 [(.mavsdk.options.default_value) = "false"];
  if (this->is_home_position_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_home_position_ok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.Health)
  return target;
}

size_t Health::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.Health)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_gyrometer_calibration_ok = 1 [(.mavsdk.options.default_value) = "false"];
  if (this->is_gyrometer_calibration_ok() != 0) {
    total_size += 1 + 1;
  }

  // bool is_accelerometer_calibration_ok = 2 [(.mavsdk.options.default_value) = "false"];
  if (this->is_accelerometer_calibration_ok() != 0) {
    total_size += 1 + 1;
  }

  // bool is_magnetometer_calibration_ok = 3 [(.mavsdk.options.default_value) = "false"];
  if (this->is_magnetometer_calibration_ok() != 0) {
    total_size += 1 + 1;
  }

  // bool is_level_calibration_ok = 4 [(.mavsdk.options.default_value) = "false"];
  if (this->is_level_calibration_ok() != 0) {
    total_size += 1 + 1;
  }

  // bool is_local_position_ok = 5 [(.mavsdk.options.default_value) = "false"];
  if (this->is_local_position_ok() != 0) {
    total_size += 1 + 1;
  }

  // bool is_global_position_ok = 6 [(.mavsdk.options.default_value) = "false"];
  if (this->is_global_position_ok() != 0) {
    total_size += 1 + 1;
  }

  // bool is_home_position_ok = 7 [(.mavsdk.options.default_value) = "false"];
  if (this->is_home_position_ok() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Health::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.Health)
  GOOGLE_DCHECK_NE(&from, this);
  const Health* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Health>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.Health)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.Health)
    MergeFrom(*source);
  }
}

void Health::MergeFrom(const Health& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.Health)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_gyrometer_calibration_ok() != 0) {
    _internal_set_is_gyrometer_calibration_ok(from._internal_is_gyrometer_calibration_ok());
  }
  if (from.is_accelerometer_calibration_ok() != 0) {
    _internal_set_is_accelerometer_calibration_ok(from._internal_is_accelerometer_calibration_ok());
  }
  if (from.is_magnetometer_calibration_ok() != 0) {
    _internal_set_is_magnetometer_calibration_ok(from._internal_is_magnetometer_calibration_ok());
  }
  if (from.is_level_calibration_ok() != 0) {
    _internal_set_is_level_calibration_ok(from._internal_is_level_calibration_ok());
  }
  if (from.is_local_position_ok() != 0) {
    _internal_set_is_local_position_ok(from._internal_is_local_position_ok());
  }
  if (from.is_global_position_ok() != 0) {
    _internal_set_is_global_position_ok(from._internal_is_global_position_ok());
  }
  if (from.is_home_position_ok() != 0) {
    _internal_set_is_home_position_ok(from._internal_is_home_position_ok());
  }
}

void Health::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.Health)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Health::CopyFrom(const Health& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.Health)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Health::IsInitialized() const {
  return true;
}

void Health::InternalSwap(Health* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Health, is_home_position_ok_)
      + sizeof(Health::is_home_position_ok_)
      - PROTOBUF_FIELD_OFFSET(Health, is_gyrometer_calibration_ok_)>(
          reinterpret_cast<char*>(&is_gyrometer_calibration_ok_),
          reinterpret_cast<char*>(&other->is_gyrometer_calibration_ok_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Health::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RcStatus::_Internal {
 public:
};

RcStatus::RcStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.RcStatus)
}
RcStatus::RcStatus(const RcStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&was_available_once_, &from.was_available_once_,
    static_cast<size_t>(reinterpret_cast<char*>(&signal_strength_percent_) -
    reinterpret_cast<char*>(&was_available_once_)) + sizeof(signal_strength_percent_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.RcStatus)
}

void RcStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&was_available_once_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&signal_strength_percent_) -
    reinterpret_cast<char*>(&was_available_once_)) + sizeof(signal_strength_percent_));
}

RcStatus::~RcStatus() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.RcStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RcStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RcStatus::ArenaDtor(void* object) {
  RcStatus* _this = reinterpret_cast< RcStatus* >(object);
  (void)_this;
}
void RcStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RcStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RcStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.RcStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&was_available_once_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_strength_percent_) -
      reinterpret_cast<char*>(&was_available_once_)) + sizeof(signal_strength_percent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RcStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool was_available_once = 1 [(.mavsdk.options.default_value) = "false"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          was_available_once_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_available = 2 [(.mavsdk.options.default_value) = "false"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float signal_strength_percent = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          signal_strength_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RcStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.RcStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool was_available_once = 1 [(.mavsdk.options.default_value) = "false"];
  if (this->was_available_once() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_was_available_once(), target);
  }

  // bool is_available = 2 [(.mavsdk.options.default_value) = "false"];
  if (this->is_available() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_available(), target);
  }

  // float signal_strength_percent = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->signal_strength_percent() <= 0 && this->signal_strength_percent() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_signal_strength_percent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.RcStatus)
  return target;
}

size_t RcStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.RcStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool was_available_once = 1 [(.mavsdk.options.default_value) = "false"];
  if (this->was_available_once() != 0) {
    total_size += 1 + 1;
  }

  // bool is_available = 2 [(.mavsdk.options.default_value) = "false"];
  if (this->is_available() != 0) {
    total_size += 1 + 1;
  }

  // float signal_strength_percent = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->signal_strength_percent() <= 0 && this->signal_strength_percent() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RcStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.RcStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const RcStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RcStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.RcStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.RcStatus)
    MergeFrom(*source);
  }
}

void RcStatus::MergeFrom(const RcStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.RcStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.was_available_once() != 0) {
    _internal_set_was_available_once(from._internal_was_available_once());
  }
  if (from.is_available() != 0) {
    _internal_set_is_available(from._internal_is_available());
  }
  if (!(from.signal_strength_percent() <= 0 && from.signal_strength_percent() >= 0)) {
    _internal_set_signal_strength_percent(from._internal_signal_strength_percent());
  }
}

void RcStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.RcStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RcStatus::CopyFrom(const RcStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.RcStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RcStatus::IsInitialized() const {
  return true;
}

void RcStatus::InternalSwap(RcStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RcStatus, signal_strength_percent_)
      + sizeof(RcStatus::signal_strength_percent_)
      - PROTOBUF_FIELD_OFFSET(RcStatus, was_available_once_)>(
          reinterpret_cast<char*>(&was_available_once_),
          reinterpret_cast<char*>(&other->was_available_once_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RcStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StatusText::_Internal {
 public:
};

StatusText::StatusText(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.StatusText)
}
StatusText::StatusText(const StatusText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.StatusText)
}

void StatusText::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0;
}

StatusText::~StatusText() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.StatusText)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusText::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StatusText::ArenaDtor(void* object) {
  StatusText* _this = reinterpret_cast< StatusText* >(object);
  (void)_this;
}
void StatusText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatusText::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.StatusText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.StatusTextType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::mavsdk::rpc::telemetry::StatusTextType>(val));
        } else goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mavsdk.rpc.telemetry.StatusText.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusText::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.StatusText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.StatusTextType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.telemetry.StatusText.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.StatusText)
  return target;
}

size_t StatusText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.StatusText)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .mavsdk.rpc.telemetry.StatusTextType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusText::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.StatusText)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusText* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.StatusText)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.StatusText)
    MergeFrom(*source);
  }
}

void StatusText::MergeFrom(const StatusText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.StatusText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {
    _internal_set_text(from._internal_text());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void StatusText::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.StatusText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusText::CopyFrom(const StatusText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.StatusText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusText::IsInitialized() const {
  return true;
}

void StatusText::InternalSwap(StatusText* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusText::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ActuatorControlTarget::_Internal {
 public:
};

ActuatorControlTarget::ActuatorControlTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  controls_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.ActuatorControlTarget)
}
ActuatorControlTarget::ActuatorControlTarget(const ActuatorControlTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      controls_(from.controls_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_ = from.group_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.ActuatorControlTarget)
}

void ActuatorControlTarget::SharedCtor() {
group_ = 0;
}

ActuatorControlTarget::~ActuatorControlTarget() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.ActuatorControlTarget)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActuatorControlTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ActuatorControlTarget::ArenaDtor(void* object) {
  ActuatorControlTarget* _this = reinterpret_cast< ActuatorControlTarget* >(object);
  (void)_this;
}
void ActuatorControlTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActuatorControlTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActuatorControlTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.ActuatorControlTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  controls_.Clear();
  group_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActuatorControlTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 group = 1 [(.mavsdk.options.default_value) = "0"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float controls = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_controls(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_controls(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActuatorControlTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.ActuatorControlTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 group = 1 [(.mavsdk.options.default_value) = "0"];
  if (this->group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_group(), target);
  }

  // repeated float controls = 2;
  if (this->_internal_controls_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_controls(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.ActuatorControlTarget)
  return target;
}

size_t ActuatorControlTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.ActuatorControlTarget)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float controls = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_controls_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _controls_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 group = 1 [(.mavsdk.options.default_value) = "0"];
  if (this->group() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_group());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActuatorControlTarget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.ActuatorControlTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const ActuatorControlTarget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActuatorControlTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.ActuatorControlTarget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.ActuatorControlTarget)
    MergeFrom(*source);
  }
}

void ActuatorControlTarget::MergeFrom(const ActuatorControlTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.ActuatorControlTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  controls_.MergeFrom(from.controls_);
  if (from.group() != 0) {
    _internal_set_group(from._internal_group());
  }
}

void ActuatorControlTarget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.ActuatorControlTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActuatorControlTarget::CopyFrom(const ActuatorControlTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.ActuatorControlTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActuatorControlTarget::IsInitialized() const {
  return true;
}

void ActuatorControlTarget::InternalSwap(ActuatorControlTarget* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  controls_.InternalSwap(&other->controls_);
  swap(group_, other->group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActuatorControlTarget::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ActuatorOutputStatus::_Internal {
 public:
};

ActuatorOutputStatus::ActuatorOutputStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  actuator_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.ActuatorOutputStatus)
}
ActuatorOutputStatus::ActuatorOutputStatus(const ActuatorOutputStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      actuator_(from.actuator_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  active_ = from.active_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.ActuatorOutputStatus)
}

void ActuatorOutputStatus::SharedCtor() {
active_ = 0u;
}

ActuatorOutputStatus::~ActuatorOutputStatus() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.ActuatorOutputStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActuatorOutputStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ActuatorOutputStatus::ArenaDtor(void* object) {
  ActuatorOutputStatus* _this = reinterpret_cast< ActuatorOutputStatus* >(object);
  (void)_this;
}
void ActuatorOutputStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActuatorOutputStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActuatorOutputStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.ActuatorOutputStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actuator_.Clear();
  active_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActuatorOutputStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 active = 1 [(.mavsdk.options.default_value) = "0"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float actuator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_actuator(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_actuator(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActuatorOutputStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.ActuatorOutputStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 active = 1 [(.mavsdk.options.default_value) = "0"];
  if (this->active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_active(), target);
  }

  // repeated float actuator = 2;
  if (this->_internal_actuator_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_actuator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.ActuatorOutputStatus)
  return target;
}

size_t ActuatorOutputStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.ActuatorOutputStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float actuator = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_actuator_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _actuator_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 active = 1 [(.mavsdk.options.default_value) = "0"];
  if (this->active() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_active());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActuatorOutputStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.ActuatorOutputStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ActuatorOutputStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActuatorOutputStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.ActuatorOutputStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.ActuatorOutputStatus)
    MergeFrom(*source);
  }
}

void ActuatorOutputStatus::MergeFrom(const ActuatorOutputStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.ActuatorOutputStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actuator_.MergeFrom(from.actuator_);
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
}

void ActuatorOutputStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.ActuatorOutputStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActuatorOutputStatus::CopyFrom(const ActuatorOutputStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.ActuatorOutputStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActuatorOutputStatus::IsInitialized() const {
  return true;
}

void ActuatorOutputStatus::InternalSwap(ActuatorOutputStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  actuator_.InternalSwap(&other->actuator_);
  swap(active_, other->active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActuatorOutputStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Covariance::_Internal {
 public:
};

Covariance::Covariance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  covariance_matrix_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.Covariance)
}
Covariance::Covariance(const Covariance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      covariance_matrix_(from.covariance_matrix_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.Covariance)
}

void Covariance::SharedCtor() {
}

Covariance::~Covariance() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.Covariance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Covariance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Covariance::ArenaDtor(void* object) {
  Covariance* _this = reinterpret_cast< Covariance* >(object);
  (void)_this;
}
void Covariance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Covariance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Covariance::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.Covariance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  covariance_matrix_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Covariance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float covariance_matrix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_covariance_matrix(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_covariance_matrix(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Covariance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.Covariance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float covariance_matrix = 1;
  if (this->_internal_covariance_matrix_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_covariance_matrix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.Covariance)
  return target;
}

size_t Covariance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.Covariance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float covariance_matrix = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_covariance_matrix_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _covariance_matrix_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Covariance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.Covariance)
  GOOGLE_DCHECK_NE(&from, this);
  const Covariance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Covariance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.Covariance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.Covariance)
    MergeFrom(*source);
  }
}

void Covariance::MergeFrom(const Covariance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.Covariance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  covariance_matrix_.MergeFrom(from.covariance_matrix_);
}

void Covariance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.Covariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Covariance::CopyFrom(const Covariance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.Covariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Covariance::IsInitialized() const {
  return true;
}

void Covariance::InternalSwap(Covariance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  covariance_matrix_.InternalSwap(&other->covariance_matrix_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Covariance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VelocityBody::_Internal {
 public:
};

VelocityBody::VelocityBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.VelocityBody)
}
VelocityBody::VelocityBody(const VelocityBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_m_s_, &from.x_m_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_m_s_) -
    reinterpret_cast<char*>(&x_m_s_)) + sizeof(z_m_s_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.VelocityBody)
}

void VelocityBody::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_m_s_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_m_s_) -
    reinterpret_cast<char*>(&x_m_s_)) + sizeof(z_m_s_));
}

VelocityBody::~VelocityBody() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.VelocityBody)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VelocityBody::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VelocityBody::ArenaDtor(void* object) {
  VelocityBody* _this = reinterpret_cast< VelocityBody* >(object);
  (void)_this;
}
void VelocityBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VelocityBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VelocityBody::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.VelocityBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_m_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_m_s_) -
      reinterpret_cast<char*>(&x_m_s_)) + sizeof(z_m_s_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VelocityBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x_m_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y_m_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z_m_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VelocityBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.VelocityBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x_m_s = 1;
  if (!(this->x_m_s() <= 0 && this->x_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x_m_s(), target);
  }

  // float y_m_s = 2;
  if (!(this->y_m_s() <= 0 && this->y_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y_m_s(), target);
  }

  // float z_m_s = 3;
  if (!(this->z_m_s() <= 0 && this->z_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z_m_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.VelocityBody)
  return target;
}

size_t VelocityBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.VelocityBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x_m_s = 1;
  if (!(this->x_m_s() <= 0 && this->x_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float y_m_s = 2;
  if (!(this->y_m_s() <= 0 && this->y_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float z_m_s = 3;
  if (!(this->z_m_s() <= 0 && this->z_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VelocityBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.VelocityBody)
  GOOGLE_DCHECK_NE(&from, this);
  const VelocityBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VelocityBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.VelocityBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.VelocityBody)
    MergeFrom(*source);
  }
}

void VelocityBody::MergeFrom(const VelocityBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.VelocityBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x_m_s() <= 0 && from.x_m_s() >= 0)) {
    _internal_set_x_m_s(from._internal_x_m_s());
  }
  if (!(from.y_m_s() <= 0 && from.y_m_s() >= 0)) {
    _internal_set_y_m_s(from._internal_y_m_s());
  }
  if (!(from.z_m_s() <= 0 && from.z_m_s() >= 0)) {
    _internal_set_z_m_s(from._internal_z_m_s());
  }
}

void VelocityBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.VelocityBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VelocityBody::CopyFrom(const VelocityBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.VelocityBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VelocityBody::IsInitialized() const {
  return true;
}

void VelocityBody::InternalSwap(VelocityBody* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VelocityBody, z_m_s_)
      + sizeof(VelocityBody::z_m_s_)
      - PROTOBUF_FIELD_OFFSET(VelocityBody, x_m_s_)>(
          reinterpret_cast<char*>(&x_m_s_),
          reinterpret_cast<char*>(&other->x_m_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VelocityBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PositionBody::_Internal {
 public:
};

PositionBody::PositionBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.PositionBody)
}
PositionBody::PositionBody(const PositionBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_m_, &from.x_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_m_) -
    reinterpret_cast<char*>(&x_m_)) + sizeof(z_m_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.PositionBody)
}

void PositionBody::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_m_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_m_) -
    reinterpret_cast<char*>(&x_m_)) + sizeof(z_m_));
}

PositionBody::~PositionBody() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.PositionBody)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PositionBody::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PositionBody::ArenaDtor(void* object) {
  PositionBody* _this = reinterpret_cast< PositionBody* >(object);
  (void)_this;
}
void PositionBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PositionBody::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.PositionBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_m_) -
      reinterpret_cast<char*>(&x_m_)) + sizeof(z_m_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x_m = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y_m = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z_m = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.PositionBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x_m = 1;
  if (!(this->x_m() <= 0 && this->x_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x_m(), target);
  }

  // float y_m = 2;
  if (!(this->y_m() <= 0 && this->y_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y_m(), target);
  }

  // float z_m = 3;
  if (!(this->z_m() <= 0 && this->z_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.PositionBody)
  return target;
}

size_t PositionBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.PositionBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x_m = 1;
  if (!(this->x_m() <= 0 && this->x_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float y_m = 2;
  if (!(this->y_m() <= 0 && this->y_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float z_m = 3;
  if (!(this->z_m() <= 0 && this->z_m() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.PositionBody)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.PositionBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.PositionBody)
    MergeFrom(*source);
  }
}

void PositionBody::MergeFrom(const PositionBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.PositionBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x_m() <= 0 && from.x_m() >= 0)) {
    _internal_set_x_m(from._internal_x_m());
  }
  if (!(from.y_m() <= 0 && from.y_m() >= 0)) {
    _internal_set_y_m(from._internal_y_m());
  }
  if (!(from.z_m() <= 0 && from.z_m() >= 0)) {
    _internal_set_z_m(from._internal_z_m());
  }
}

void PositionBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.PositionBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionBody::CopyFrom(const PositionBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.PositionBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionBody::IsInitialized() const {
  return true;
}

void PositionBody::InternalSwap(PositionBody* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionBody, z_m_)
      + sizeof(PositionBody::z_m_)
      - PROTOBUF_FIELD_OFFSET(PositionBody, x_m_)>(
          reinterpret_cast<char*>(&x_m_),
          reinterpret_cast<char*>(&other->x_m_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Odometry::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::PositionBody& position_body(const Odometry* msg);
  static const ::mavsdk::rpc::telemetry::Quaternion& q(const Odometry* msg);
  static const ::mavsdk::rpc::telemetry::VelocityBody& velocity_body(const Odometry* msg);
  static const ::mavsdk::rpc::telemetry::AngularVelocityBody& angular_velocity_body(const Odometry* msg);
  static const ::mavsdk::rpc::telemetry::Covariance& pose_covariance(const Odometry* msg);
  static const ::mavsdk::rpc::telemetry::Covariance& velocity_covariance(const Odometry* msg);
};

const ::mavsdk::rpc::telemetry::PositionBody&
Odometry::_Internal::position_body(const Odometry* msg) {
  return *msg->position_body_;
}
const ::mavsdk::rpc::telemetry::Quaternion&
Odometry::_Internal::q(const Odometry* msg) {
  return *msg->q_;
}
const ::mavsdk::rpc::telemetry::VelocityBody&
Odometry::_Internal::velocity_body(const Odometry* msg) {
  return *msg->velocity_body_;
}
const ::mavsdk::rpc::telemetry::AngularVelocityBody&
Odometry::_Internal::angular_velocity_body(const Odometry* msg) {
  return *msg->angular_velocity_body_;
}
const ::mavsdk::rpc::telemetry::Covariance&
Odometry::_Internal::pose_covariance(const Odometry* msg) {
  return *msg->pose_covariance_;
}
const ::mavsdk::rpc::telemetry::Covariance&
Odometry::_Internal::velocity_covariance(const Odometry* msg) {
  return *msg->velocity_covariance_;
}
Odometry::Odometry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.Odometry)
}
Odometry::Odometry(const Odometry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position_body()) {
    position_body_ = new ::mavsdk::rpc::telemetry::PositionBody(*from.position_body_);
  } else {
    position_body_ = nullptr;
  }
  if (from._internal_has_q()) {
    q_ = new ::mavsdk::rpc::telemetry::Quaternion(*from.q_);
  } else {
    q_ = nullptr;
  }
  if (from._internal_has_velocity_body()) {
    velocity_body_ = new ::mavsdk::rpc::telemetry::VelocityBody(*from.velocity_body_);
  } else {
    velocity_body_ = nullptr;
  }
  if (from._internal_has_angular_velocity_body()) {
    angular_velocity_body_ = new ::mavsdk::rpc::telemetry::AngularVelocityBody(*from.angular_velocity_body_);
  } else {
    angular_velocity_body_ = nullptr;
  }
  if (from._internal_has_pose_covariance()) {
    pose_covariance_ = new ::mavsdk::rpc::telemetry::Covariance(*from.pose_covariance_);
  } else {
    pose_covariance_ = nullptr;
  }
  if (from._internal_has_velocity_covariance()) {
    velocity_covariance_ = new ::mavsdk::rpc::telemetry::Covariance(*from.velocity_covariance_);
  } else {
    velocity_covariance_ = nullptr;
  }
  ::memcpy(&time_usec_, &from.time_usec_,
    static_cast<size_t>(reinterpret_cast<char*>(&child_frame_id_) -
    reinterpret_cast<char*>(&time_usec_)) + sizeof(child_frame_id_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.Odometry)
}

void Odometry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_body_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&child_frame_id_) -
    reinterpret_cast<char*>(&position_body_)) + sizeof(child_frame_id_));
}

Odometry::~Odometry() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.Odometry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Odometry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_body_;
  if (this != internal_default_instance()) delete q_;
  if (this != internal_default_instance()) delete velocity_body_;
  if (this != internal_default_instance()) delete angular_velocity_body_;
  if (this != internal_default_instance()) delete pose_covariance_;
  if (this != internal_default_instance()) delete velocity_covariance_;
}

void Odometry::ArenaDtor(void* object) {
  Odometry* _this = reinterpret_cast< Odometry* >(object);
  (void)_this;
}
void Odometry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Odometry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Odometry::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.Odometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_body_ != nullptr) {
    delete position_body_;
  }
  position_body_ = nullptr;
  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
  if (GetArena() == nullptr && velocity_body_ != nullptr) {
    delete velocity_body_;
  }
  velocity_body_ = nullptr;
  if (GetArena() == nullptr && angular_velocity_body_ != nullptr) {
    delete angular_velocity_body_;
  }
  angular_velocity_body_ = nullptr;
  if (GetArena() == nullptr && pose_covariance_ != nullptr) {
    delete pose_covariance_;
  }
  pose_covariance_ = nullptr;
  if (GetArena() == nullptr && velocity_covariance_ != nullptr) {
    delete velocity_covariance_;
  }
  velocity_covariance_ = nullptr;
  ::memset(&time_usec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&child_frame_id_) -
      reinterpret_cast<char*>(&time_usec_)) + sizeof(child_frame_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Odometry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 time_usec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry.Odometry.MavFrame frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_frame_id(static_cast<::mavsdk::rpc::telemetry::Odometry_MavFrame>(val));
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry.Odometry.MavFrame child_frame_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_child_frame_id(static_cast<::mavsdk::rpc::telemetry::Odometry_MavFrame>(val));
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry.PositionBody position_body = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry.Quaternion q = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry.VelocityBody velocity_body = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry.AngularVelocityBody angular_velocity_body = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry.Covariance pose_covariance = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose_covariance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry.Covariance velocity_covariance = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity_covariance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Odometry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.Odometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time_usec = 1;
  if (this->time_usec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_time_usec(), target);
  }

  // .mavsdk.rpc.telemetry.Odometry.MavFrame frame_id = 2;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_frame_id(), target);
  }

  // .mavsdk.rpc.telemetry.Odometry.MavFrame child_frame_id = 3;
  if (this->child_frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_child_frame_id(), target);
  }

  // .mavsdk.rpc.telemetry.PositionBody position_body = 4;
  if (this->has_position_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::position_body(this), target, stream);
  }

  // .mavsdk.rpc.telemetry.Quaternion q = 5;
  if (this->has_q()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::q(this), target, stream);
  }

  // .mavsdk.rpc.telemetry.VelocityBody velocity_body = 6;
  if (this->has_velocity_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::velocity_body(this), target, stream);
  }

  // .mavsdk.rpc.telemetry.AngularVelocityBody angular_velocity_body = 7;
  if (this->has_angular_velocity_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::angular_velocity_body(this), target, stream);
  }

  // .mavsdk.rpc.telemetry.Covariance pose_covariance = 8;
  if (this->has_pose_covariance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::pose_covariance(this), target, stream);
  }

  // .mavsdk.rpc.telemetry.Covariance velocity_covariance = 9;
  if (this->has_velocity_covariance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::velocity_covariance(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.Odometry)
  return target;
}

size_t Odometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.Odometry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.PositionBody position_body = 4;
  if (this->has_position_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_body_);
  }

  // .mavsdk.rpc.telemetry.Quaternion q = 5;
  if (this->has_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *q_);
  }

  // .mavsdk.rpc.telemetry.VelocityBody velocity_body = 6;
  if (this->has_velocity_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_body_);
  }

  // .mavsdk.rpc.telemetry.AngularVelocityBody angular_velocity_body = 7;
  if (this->has_angular_velocity_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_velocity_body_);
  }

  // .mavsdk.rpc.telemetry.Covariance pose_covariance = 8;
  if (this->has_pose_covariance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_covariance_);
  }

  // .mavsdk.rpc.telemetry.Covariance velocity_covariance = 9;
  if (this->has_velocity_covariance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_covariance_);
  }

  // uint64 time_usec = 1;
  if (this->time_usec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_time_usec());
  }

  // .mavsdk.rpc.telemetry.Odometry.MavFrame frame_id = 2;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_frame_id());
  }

  // .mavsdk.rpc.telemetry.Odometry.MavFrame child_frame_id = 3;
  if (this->child_frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_child_frame_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Odometry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.Odometry)
  GOOGLE_DCHECK_NE(&from, this);
  const Odometry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Odometry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.Odometry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.Odometry)
    MergeFrom(*source);
  }
}

void Odometry::MergeFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.Odometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position_body()) {
    _internal_mutable_position_body()->::mavsdk::rpc::telemetry::PositionBody::MergeFrom(from._internal_position_body());
  }
  if (from.has_q()) {
    _internal_mutable_q()->::mavsdk::rpc::telemetry::Quaternion::MergeFrom(from._internal_q());
  }
  if (from.has_velocity_body()) {
    _internal_mutable_velocity_body()->::mavsdk::rpc::telemetry::VelocityBody::MergeFrom(from._internal_velocity_body());
  }
  if (from.has_angular_velocity_body()) {
    _internal_mutable_angular_velocity_body()->::mavsdk::rpc::telemetry::AngularVelocityBody::MergeFrom(from._internal_angular_velocity_body());
  }
  if (from.has_pose_covariance()) {
    _internal_mutable_pose_covariance()->::mavsdk::rpc::telemetry::Covariance::MergeFrom(from._internal_pose_covariance());
  }
  if (from.has_velocity_covariance()) {
    _internal_mutable_velocity_covariance()->::mavsdk::rpc::telemetry::Covariance::MergeFrom(from._internal_velocity_covariance());
  }
  if (from.time_usec() != 0) {
    _internal_set_time_usec(from._internal_time_usec());
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.child_frame_id() != 0) {
    _internal_set_child_frame_id(from._internal_child_frame_id());
  }
}

void Odometry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.Odometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Odometry::CopyFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.Odometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Odometry::IsInitialized() const {
  return true;
}

void Odometry::InternalSwap(Odometry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Odometry, child_frame_id_)
      + sizeof(Odometry::child_frame_id_)
      - PROTOBUF_FIELD_OFFSET(Odometry, position_body_)>(
          reinterpret_cast<char*>(&position_body_),
          reinterpret_cast<char*>(&other->position_body_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Odometry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DistanceSensor::_Internal {
 public:
};

DistanceSensor::DistanceSensor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.DistanceSensor)
}
DistanceSensor::DistanceSensor(const DistanceSensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&minimum_distance_m_, &from.minimum_distance_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_distance_m_) -
    reinterpret_cast<char*>(&minimum_distance_m_)) + sizeof(current_distance_m_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.DistanceSensor)
}

void DistanceSensor::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&minimum_distance_m_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&current_distance_m_) -
    reinterpret_cast<char*>(&minimum_distance_m_)) + sizeof(current_distance_m_));
}

DistanceSensor::~DistanceSensor() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.DistanceSensor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DistanceSensor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DistanceSensor::ArenaDtor(void* object) {
  DistanceSensor* _this = reinterpret_cast< DistanceSensor* >(object);
  (void)_this;
}
void DistanceSensor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DistanceSensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DistanceSensor::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.DistanceSensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&minimum_distance_m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_distance_m_) -
      reinterpret_cast<char*>(&minimum_distance_m_)) + sizeof(current_distance_m_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DistanceSensor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float minimum_distance_m = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          minimum_distance_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float maximum_distance_m = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          maximum_distance_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float current_distance_m = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          current_distance_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DistanceSensor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.DistanceSensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float minimum_distance_m = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->minimum_distance_m() <= 0 && this->minimum_distance_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_minimum_distance_m(), target);
  }

  // float maximum_distance_m = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->maximum_distance_m() <= 0 && this->maximum_distance_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_maximum_distance_m(), target);
  }

  // float current_distance_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->current_distance_m() <= 0 && this->current_distance_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_current_distance_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.DistanceSensor)
  return target;
}

size_t DistanceSensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.DistanceSensor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float minimum_distance_m = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->minimum_distance_m() <= 0 && this->minimum_distance_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float maximum_distance_m = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->maximum_distance_m() <= 0 && this->maximum_distance_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float current_distance_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->current_distance_m() <= 0 && this->current_distance_m() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistanceSensor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.DistanceSensor)
  GOOGLE_DCHECK_NE(&from, this);
  const DistanceSensor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DistanceSensor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.DistanceSensor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.DistanceSensor)
    MergeFrom(*source);
  }
}

void DistanceSensor::MergeFrom(const DistanceSensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.DistanceSensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.minimum_distance_m() <= 0 && from.minimum_distance_m() >= 0)) {
    _internal_set_minimum_distance_m(from._internal_minimum_distance_m());
  }
  if (!(from.maximum_distance_m() <= 0 && from.maximum_distance_m() >= 0)) {
    _internal_set_maximum_distance_m(from._internal_maximum_distance_m());
  }
  if (!(from.current_distance_m() <= 0 && from.current_distance_m() >= 0)) {
    _internal_set_current_distance_m(from._internal_current_distance_m());
  }
}

void DistanceSensor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.DistanceSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistanceSensor::CopyFrom(const DistanceSensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.DistanceSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistanceSensor::IsInitialized() const {
  return true;
}

void DistanceSensor::InternalSwap(DistanceSensor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DistanceSensor, current_distance_m_)
      + sizeof(DistanceSensor::current_distance_m_)
      - PROTOBUF_FIELD_OFFSET(DistanceSensor, minimum_distance_m_)>(
          reinterpret_cast<char*>(&minimum_distance_m_),
          reinterpret_cast<char*>(&other->minimum_distance_m_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DistanceSensor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScaledPressure::_Internal {
 public:
};

ScaledPressure::ScaledPressure(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.ScaledPressure)
}
ScaledPressure::ScaledPressure(const ScaledPressure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_us_, &from.timestamp_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&differential_pressure_temperature_deg_) -
    reinterpret_cast<char*>(&timestamp_us_)) + sizeof(differential_pressure_temperature_deg_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.ScaledPressure)
}

void ScaledPressure::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_us_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&differential_pressure_temperature_deg_) -
    reinterpret_cast<char*>(&timestamp_us_)) + sizeof(differential_pressure_temperature_deg_));
}

ScaledPressure::~ScaledPressure() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.ScaledPressure)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScaledPressure::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ScaledPressure::ArenaDtor(void* object) {
  ScaledPressure* _this = reinterpret_cast< ScaledPressure* >(object);
  (void)_this;
}
void ScaledPressure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScaledPressure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScaledPressure::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.ScaledPressure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&differential_pressure_temperature_deg_) -
      reinterpret_cast<char*>(&timestamp_us_)) + sizeof(differential_pressure_temperature_deg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScaledPressure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 timestamp_us = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float absolute_pressure_hpa = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          absolute_pressure_hpa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float differential_pressure_hpa = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          differential_pressure_hpa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float temperature_deg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          temperature_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float differential_pressure_temperature_deg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          differential_pressure_temperature_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScaledPressure::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.ScaledPressure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp_us = 1;
  if (this->timestamp_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp_us(), target);
  }

  // float absolute_pressure_hpa = 2;
  if (!(this->absolute_pressure_hpa() <= 0 && this->absolute_pressure_hpa() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_absolute_pressure_hpa(), target);
  }

  // float differential_pressure_hpa = 3;
  if (!(this->differential_pressure_hpa() <= 0 && this->differential_pressure_hpa() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_differential_pressure_hpa(), target);
  }

  // float temperature_deg = 4;
  if (!(this->temperature_deg() <= 0 && this->temperature_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_temperature_deg(), target);
  }

  // float differential_pressure_temperature_deg = 5;
  if (!(this->differential_pressure_temperature_deg() <= 0 && this->differential_pressure_temperature_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_differential_pressure_temperature_deg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.ScaledPressure)
  return target;
}

size_t ScaledPressure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.ScaledPressure)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 timestamp_us = 1;
  if (this->timestamp_us() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp_us());
  }

  // float absolute_pressure_hpa = 2;
  if (!(this->absolute_pressure_hpa() <= 0 && this->absolute_pressure_hpa() >= 0)) {
    total_size += 1 + 4;
  }

  // float differential_pressure_hpa = 3;
  if (!(this->differential_pressure_hpa() <= 0 && this->differential_pressure_hpa() >= 0)) {
    total_size += 1 + 4;
  }

  // float temperature_deg = 4;
  if (!(this->temperature_deg() <= 0 && this->temperature_deg() >= 0)) {
    total_size += 1 + 4;
  }

  // float differential_pressure_temperature_deg = 5;
  if (!(this->differential_pressure_temperature_deg() <= 0 && this->differential_pressure_temperature_deg() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScaledPressure::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.ScaledPressure)
  GOOGLE_DCHECK_NE(&from, this);
  const ScaledPressure* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScaledPressure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.ScaledPressure)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.ScaledPressure)
    MergeFrom(*source);
  }
}

void ScaledPressure::MergeFrom(const ScaledPressure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.ScaledPressure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp_us() != 0) {
    _internal_set_timestamp_us(from._internal_timestamp_us());
  }
  if (!(from.absolute_pressure_hpa() <= 0 && from.absolute_pressure_hpa() >= 0)) {
    _internal_set_absolute_pressure_hpa(from._internal_absolute_pressure_hpa());
  }
  if (!(from.differential_pressure_hpa() <= 0 && from.differential_pressure_hpa() >= 0)) {
    _internal_set_differential_pressure_hpa(from._internal_differential_pressure_hpa());
  }
  if (!(from.temperature_deg() <= 0 && from.temperature_deg() >= 0)) {
    _internal_set_temperature_deg(from._internal_temperature_deg());
  }
  if (!(from.differential_pressure_temperature_deg() <= 0 && from.differential_pressure_temperature_deg() >= 0)) {
    _internal_set_differential_pressure_temperature_deg(from._internal_differential_pressure_temperature_deg());
  }
}

void ScaledPressure::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.ScaledPressure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScaledPressure::CopyFrom(const ScaledPressure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.ScaledPressure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScaledPressure::IsInitialized() const {
  return true;
}

void ScaledPressure::InternalSwap(ScaledPressure* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScaledPressure, differential_pressure_temperature_deg_)
      + sizeof(ScaledPressure::differential_pressure_temperature_deg_)
      - PROTOBUF_FIELD_OFFSET(ScaledPressure, timestamp_us_)>(
          reinterpret_cast<char*>(&timestamp_us_),
          reinterpret_cast<char*>(&other->timestamp_us_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScaledPressure::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PositionNed::_Internal {
 public:
};

PositionNed::PositionNed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.PositionNed)
}
PositionNed::PositionNed(const PositionNed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&north_m_, &from.north_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_m_) -
    reinterpret_cast<char*>(&north_m_)) + sizeof(down_m_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.PositionNed)
}

void PositionNed::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&north_m_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&down_m_) -
    reinterpret_cast<char*>(&north_m_)) + sizeof(down_m_));
}

PositionNed::~PositionNed() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.PositionNed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PositionNed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PositionNed::ArenaDtor(void* object) {
  PositionNed* _this = reinterpret_cast< PositionNed* >(object);
  (void)_this;
}
void PositionNed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionNed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PositionNed::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.PositionNed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&north_m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_m_) -
      reinterpret_cast<char*>(&north_m_)) + sizeof(down_m_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionNed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float north_m = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          north_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float east_m = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          east_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float down_m = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          down_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionNed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.PositionNed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float north_m = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->north_m() <= 0 && this->north_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_north_m(), target);
  }

  // float east_m = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->east_m() <= 0 && this->east_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_east_m(), target);
  }

  // float down_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->down_m() <= 0 && this->down_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_down_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.PositionNed)
  return target;
}

size_t PositionNed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.PositionNed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float north_m = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->north_m() <= 0 && this->north_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float east_m = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->east_m() <= 0 && this->east_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float down_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->down_m() <= 0 && this->down_m() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionNed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.PositionNed)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionNed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionNed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.PositionNed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.PositionNed)
    MergeFrom(*source);
  }
}

void PositionNed::MergeFrom(const PositionNed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.PositionNed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.north_m() <= 0 && from.north_m() >= 0)) {
    _internal_set_north_m(from._internal_north_m());
  }
  if (!(from.east_m() <= 0 && from.east_m() >= 0)) {
    _internal_set_east_m(from._internal_east_m());
  }
  if (!(from.down_m() <= 0 && from.down_m() >= 0)) {
    _internal_set_down_m(from._internal_down_m());
  }
}

void PositionNed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.PositionNed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionNed::CopyFrom(const PositionNed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.PositionNed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionNed::IsInitialized() const {
  return true;
}

void PositionNed::InternalSwap(PositionNed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionNed, down_m_)
      + sizeof(PositionNed::down_m_)
      - PROTOBUF_FIELD_OFFSET(PositionNed, north_m_)>(
          reinterpret_cast<char*>(&north_m_),
          reinterpret_cast<char*>(&other->north_m_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionNed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VelocityNed::_Internal {
 public:
};

VelocityNed::VelocityNed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.VelocityNed)
}
VelocityNed::VelocityNed(const VelocityNed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&north_m_s_, &from.north_m_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_m_s_) -
    reinterpret_cast<char*>(&north_m_s_)) + sizeof(down_m_s_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.VelocityNed)
}

void VelocityNed::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&north_m_s_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&down_m_s_) -
    reinterpret_cast<char*>(&north_m_s_)) + sizeof(down_m_s_));
}

VelocityNed::~VelocityNed() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.VelocityNed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VelocityNed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VelocityNed::ArenaDtor(void* object) {
  VelocityNed* _this = reinterpret_cast< VelocityNed* >(object);
  (void)_this;
}
void VelocityNed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VelocityNed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VelocityNed::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.VelocityNed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&north_m_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_m_s_) -
      reinterpret_cast<char*>(&north_m_s_)) + sizeof(down_m_s_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VelocityNed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float north_m_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          north_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float east_m_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          east_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float down_m_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          down_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VelocityNed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.VelocityNed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float north_m_s = 1;
  if (!(this->north_m_s() <= 0 && this->north_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_north_m_s(), target);
  }

  // float east_m_s = 2;
  if (!(this->east_m_s() <= 0 && this->east_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_east_m_s(), target);
  }

  // float down_m_s = 3;
  if (!(this->down_m_s() <= 0 && this->down_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_down_m_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.VelocityNed)
  return target;
}

size_t VelocityNed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.VelocityNed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float north_m_s = 1;
  if (!(this->north_m_s() <= 0 && this->north_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float east_m_s = 2;
  if (!(this->east_m_s() <= 0 && this->east_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float down_m_s = 3;
  if (!(this->down_m_s() <= 0 && this->down_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VelocityNed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.VelocityNed)
  GOOGLE_DCHECK_NE(&from, this);
  const VelocityNed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VelocityNed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.VelocityNed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.VelocityNed)
    MergeFrom(*source);
  }
}

void VelocityNed::MergeFrom(const VelocityNed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.VelocityNed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.north_m_s() <= 0 && from.north_m_s() >= 0)) {
    _internal_set_north_m_s(from._internal_north_m_s());
  }
  if (!(from.east_m_s() <= 0 && from.east_m_s() >= 0)) {
    _internal_set_east_m_s(from._internal_east_m_s());
  }
  if (!(from.down_m_s() <= 0 && from.down_m_s() >= 0)) {
    _internal_set_down_m_s(from._internal_down_m_s());
  }
}

void VelocityNed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.VelocityNed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VelocityNed::CopyFrom(const VelocityNed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.VelocityNed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VelocityNed::IsInitialized() const {
  return true;
}

void VelocityNed::InternalSwap(VelocityNed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VelocityNed, down_m_s_)
      + sizeof(VelocityNed::down_m_s_)
      - PROTOBUF_FIELD_OFFSET(VelocityNed, north_m_s_)>(
          reinterpret_cast<char*>(&north_m_s_),
          reinterpret_cast<char*>(&other->north_m_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VelocityNed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PositionVelocityNed::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::PositionNed& position(const PositionVelocityNed* msg);
  static const ::mavsdk::rpc::telemetry::VelocityNed& velocity(const PositionVelocityNed* msg);
};

const ::mavsdk::rpc::telemetry::PositionNed&
PositionVelocityNed::_Internal::position(const PositionVelocityNed* msg) {
  return *msg->position_;
}
const ::mavsdk::rpc::telemetry::VelocityNed&
PositionVelocityNed::_Internal::velocity(const PositionVelocityNed* msg) {
  return *msg->velocity_;
}
PositionVelocityNed::PositionVelocityNed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.PositionVelocityNed)
}
PositionVelocityNed::PositionVelocityNed(const PositionVelocityNed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::mavsdk::rpc::telemetry::PositionNed(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::mavsdk::rpc::telemetry::VelocityNed(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.PositionVelocityNed)
}

void PositionVelocityNed::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&velocity_) -
    reinterpret_cast<char*>(&position_)) + sizeof(velocity_));
}

PositionVelocityNed::~PositionVelocityNed() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.PositionVelocityNed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PositionVelocityNed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete velocity_;
}

void PositionVelocityNed::ArenaDtor(void* object) {
  PositionVelocityNed* _this = reinterpret_cast< PositionVelocityNed* >(object);
  (void)_this;
}
void PositionVelocityNed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionVelocityNed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PositionVelocityNed::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.PositionVelocityNed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArena() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionVelocityNed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.PositionNed position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry.VelocityNed velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionVelocityNed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.PositionVelocityNed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.PositionNed position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // .mavsdk.rpc.telemetry.VelocityNed velocity = 2;
  if (this->has_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::velocity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.PositionVelocityNed)
  return target;
}

size_t PositionVelocityNed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.PositionVelocityNed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.PositionNed position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .mavsdk.rpc.telemetry.VelocityNed velocity = 2;
  if (this->has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionVelocityNed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.PositionVelocityNed)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionVelocityNed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionVelocityNed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.PositionVelocityNed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.PositionVelocityNed)
    MergeFrom(*source);
  }
}

void PositionVelocityNed::MergeFrom(const PositionVelocityNed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.PositionVelocityNed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::mavsdk::rpc::telemetry::PositionNed::MergeFrom(from._internal_position());
  }
  if (from.has_velocity()) {
    _internal_mutable_velocity()->::mavsdk::rpc::telemetry::VelocityNed::MergeFrom(from._internal_velocity());
  }
}

void PositionVelocityNed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.PositionVelocityNed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionVelocityNed::CopyFrom(const PositionVelocityNed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.PositionVelocityNed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionVelocityNed::IsInitialized() const {
  return true;
}

void PositionVelocityNed::InternalSwap(PositionVelocityNed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionVelocityNed, velocity_)
      + sizeof(PositionVelocityNed::velocity_)
      - PROTOBUF_FIELD_OFFSET(PositionVelocityNed, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionVelocityNed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GroundTruth::_Internal {
 public:
};

GroundTruth::GroundTruth(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.GroundTruth)
}
GroundTruth::GroundTruth(const GroundTruth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_deg_, &from.latitude_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&absolute_altitude_m_) -
    reinterpret_cast<char*>(&latitude_deg_)) + sizeof(absolute_altitude_m_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.GroundTruth)
}

void GroundTruth::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&latitude_deg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&absolute_altitude_m_) -
    reinterpret_cast<char*>(&latitude_deg_)) + sizeof(absolute_altitude_m_));
}

GroundTruth::~GroundTruth() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.GroundTruth)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroundTruth::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GroundTruth::ArenaDtor(void* object) {
  GroundTruth* _this = reinterpret_cast< GroundTruth* >(object);
  (void)_this;
}
void GroundTruth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroundTruth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GroundTruth::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.GroundTruth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&absolute_altitude_m_) -
      reinterpret_cast<char*>(&latitude_deg_)) + sizeof(absolute_altitude_m_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroundTruth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          latitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          longitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          absolute_altitude_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroundTruth::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.GroundTruth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->latitude_deg() <= 0 && this->latitude_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude_deg(), target);
  }

  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->longitude_deg() <= 0 && this->longitude_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude_deg(), target);
  }

  // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->absolute_altitude_m() <= 0 && this->absolute_altitude_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_absolute_altitude_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.GroundTruth)
  return target;
}

size_t GroundTruth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.GroundTruth)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->latitude_deg() <= 0 && this->latitude_deg() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->longitude_deg() <= 0 && this->longitude_deg() >= 0)) {
    total_size += 1 + 8;
  }

  // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->absolute_altitude_m() <= 0 && this->absolute_altitude_m() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroundTruth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.GroundTruth)
  GOOGLE_DCHECK_NE(&from, this);
  const GroundTruth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroundTruth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.GroundTruth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.GroundTruth)
    MergeFrom(*source);
  }
}

void GroundTruth::MergeFrom(const GroundTruth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.GroundTruth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.latitude_deg() <= 0 && from.latitude_deg() >= 0)) {
    _internal_set_latitude_deg(from._internal_latitude_deg());
  }
  if (!(from.longitude_deg() <= 0 && from.longitude_deg() >= 0)) {
    _internal_set_longitude_deg(from._internal_longitude_deg());
  }
  if (!(from.absolute_altitude_m() <= 0 && from.absolute_altitude_m() >= 0)) {
    _internal_set_absolute_altitude_m(from._internal_absolute_altitude_m());
  }
}

void GroundTruth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.GroundTruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroundTruth::CopyFrom(const GroundTruth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.GroundTruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroundTruth::IsInitialized() const {
  return true;
}

void GroundTruth::InternalSwap(GroundTruth* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroundTruth, absolute_altitude_m_)
      + sizeof(GroundTruth::absolute_altitude_m_)
      - PROTOBUF_FIELD_OFFSET(GroundTruth, latitude_deg_)>(
          reinterpret_cast<char*>(&latitude_deg_),
          reinterpret_cast<char*>(&other->latitude_deg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroundTruth::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FixedwingMetrics::_Internal {
 public:
};

FixedwingMetrics::FixedwingMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.FixedwingMetrics)
}
FixedwingMetrics::FixedwingMetrics(const FixedwingMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&airspeed_m_s_, &from.airspeed_m_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&climb_rate_m_s_) -
    reinterpret_cast<char*>(&airspeed_m_s_)) + sizeof(climb_rate_m_s_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.FixedwingMetrics)
}

void FixedwingMetrics::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&airspeed_m_s_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&climb_rate_m_s_) -
    reinterpret_cast<char*>(&airspeed_m_s_)) + sizeof(climb_rate_m_s_));
}

FixedwingMetrics::~FixedwingMetrics() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.FixedwingMetrics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FixedwingMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FixedwingMetrics::ArenaDtor(void* object) {
  FixedwingMetrics* _this = reinterpret_cast< FixedwingMetrics* >(object);
  (void)_this;
}
void FixedwingMetrics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FixedwingMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FixedwingMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.FixedwingMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&airspeed_m_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&climb_rate_m_s_) -
      reinterpret_cast<char*>(&airspeed_m_s_)) + sizeof(climb_rate_m_s_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FixedwingMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float airspeed_m_s = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          airspeed_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float throttle_percentage = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          throttle_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float climb_rate_m_s = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          climb_rate_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FixedwingMetrics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.FixedwingMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float airspeed_m_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->airspeed_m_s() <= 0 && this->airspeed_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_airspeed_m_s(), target);
  }

  // float throttle_percentage = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->throttle_percentage() <= 0 && this->throttle_percentage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_throttle_percentage(), target);
  }

  // float climb_rate_m_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->climb_rate_m_s() <= 0 && this->climb_rate_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_climb_rate_m_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.FixedwingMetrics)
  return target;
}

size_t FixedwingMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.FixedwingMetrics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float airspeed_m_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->airspeed_m_s() <= 0 && this->airspeed_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float throttle_percentage = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->throttle_percentage() <= 0 && this->throttle_percentage() >= 0)) {
    total_size += 1 + 4;
  }

  // float climb_rate_m_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->climb_rate_m_s() <= 0 && this->climb_rate_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FixedwingMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.FixedwingMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const FixedwingMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FixedwingMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.FixedwingMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.FixedwingMetrics)
    MergeFrom(*source);
  }
}

void FixedwingMetrics::MergeFrom(const FixedwingMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.FixedwingMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.airspeed_m_s() <= 0 && from.airspeed_m_s() >= 0)) {
    _internal_set_airspeed_m_s(from._internal_airspeed_m_s());
  }
  if (!(from.throttle_percentage() <= 0 && from.throttle_percentage() >= 0)) {
    _internal_set_throttle_percentage(from._internal_throttle_percentage());
  }
  if (!(from.climb_rate_m_s() <= 0 && from.climb_rate_m_s() >= 0)) {
    _internal_set_climb_rate_m_s(from._internal_climb_rate_m_s());
  }
}

void FixedwingMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.FixedwingMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedwingMetrics::CopyFrom(const FixedwingMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.FixedwingMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedwingMetrics::IsInitialized() const {
  return true;
}

void FixedwingMetrics::InternalSwap(FixedwingMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FixedwingMetrics, climb_rate_m_s_)
      + sizeof(FixedwingMetrics::climb_rate_m_s_)
      - PROTOBUF_FIELD_OFFSET(FixedwingMetrics, airspeed_m_s_)>(
          reinterpret_cast<char*>(&airspeed_m_s_),
          reinterpret_cast<char*>(&other->airspeed_m_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FixedwingMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AccelerationFrd::_Internal {
 public:
};

AccelerationFrd::AccelerationFrd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.AccelerationFrd)
}
AccelerationFrd::AccelerationFrd(const AccelerationFrd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&forward_m_s2_, &from.forward_m_s2_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_m_s2_) -
    reinterpret_cast<char*>(&forward_m_s2_)) + sizeof(down_m_s2_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.AccelerationFrd)
}

void AccelerationFrd::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&forward_m_s2_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&down_m_s2_) -
    reinterpret_cast<char*>(&forward_m_s2_)) + sizeof(down_m_s2_));
}

AccelerationFrd::~AccelerationFrd() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.AccelerationFrd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccelerationFrd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AccelerationFrd::ArenaDtor(void* object) {
  AccelerationFrd* _this = reinterpret_cast< AccelerationFrd* >(object);
  (void)_this;
}
void AccelerationFrd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccelerationFrd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccelerationFrd::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.AccelerationFrd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&forward_m_s2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_m_s2_) -
      reinterpret_cast<char*>(&forward_m_s2_)) + sizeof(down_m_s2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccelerationFrd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float forward_m_s2 = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          forward_m_s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float right_m_s2 = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          right_m_s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float down_m_s2 = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          down_m_s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccelerationFrd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.AccelerationFrd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float forward_m_s2 = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->forward_m_s2() <= 0 && this->forward_m_s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_forward_m_s2(), target);
  }

  // float right_m_s2 = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->right_m_s2() <= 0 && this->right_m_s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_right_m_s2(), target);
  }

  // float down_m_s2 = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->down_m_s2() <= 0 && this->down_m_s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_down_m_s2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.AccelerationFrd)
  return target;
}

size_t AccelerationFrd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.AccelerationFrd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float forward_m_s2 = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->forward_m_s2() <= 0 && this->forward_m_s2() >= 0)) {
    total_size += 1 + 4;
  }

  // float right_m_s2 = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->right_m_s2() <= 0 && this->right_m_s2() >= 0)) {
    total_size += 1 + 4;
  }

  // float down_m_s2 = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->down_m_s2() <= 0 && this->down_m_s2() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccelerationFrd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.AccelerationFrd)
  GOOGLE_DCHECK_NE(&from, this);
  const AccelerationFrd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccelerationFrd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.AccelerationFrd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.AccelerationFrd)
    MergeFrom(*source);
  }
}

void AccelerationFrd::MergeFrom(const AccelerationFrd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.AccelerationFrd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.forward_m_s2() <= 0 && from.forward_m_s2() >= 0)) {
    _internal_set_forward_m_s2(from._internal_forward_m_s2());
  }
  if (!(from.right_m_s2() <= 0 && from.right_m_s2() >= 0)) {
    _internal_set_right_m_s2(from._internal_right_m_s2());
  }
  if (!(from.down_m_s2() <= 0 && from.down_m_s2() >= 0)) {
    _internal_set_down_m_s2(from._internal_down_m_s2());
  }
}

void AccelerationFrd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.AccelerationFrd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccelerationFrd::CopyFrom(const AccelerationFrd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.AccelerationFrd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccelerationFrd::IsInitialized() const {
  return true;
}

void AccelerationFrd::InternalSwap(AccelerationFrd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccelerationFrd, down_m_s2_)
      + sizeof(AccelerationFrd::down_m_s2_)
      - PROTOBUF_FIELD_OFFSET(AccelerationFrd, forward_m_s2_)>(
          reinterpret_cast<char*>(&forward_m_s2_),
          reinterpret_cast<char*>(&other->forward_m_s2_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccelerationFrd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AngularVelocityFrd::_Internal {
 public:
};

AngularVelocityFrd::AngularVelocityFrd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.AngularVelocityFrd)
}
AngularVelocityFrd::AngularVelocityFrd(const AngularVelocityFrd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&forward_rad_s_, &from.forward_rad_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_rad_s_) -
    reinterpret_cast<char*>(&forward_rad_s_)) + sizeof(down_rad_s_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.AngularVelocityFrd)
}

void AngularVelocityFrd::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&forward_rad_s_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&down_rad_s_) -
    reinterpret_cast<char*>(&forward_rad_s_)) + sizeof(down_rad_s_));
}

AngularVelocityFrd::~AngularVelocityFrd() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.AngularVelocityFrd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AngularVelocityFrd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AngularVelocityFrd::ArenaDtor(void* object) {
  AngularVelocityFrd* _this = reinterpret_cast< AngularVelocityFrd* >(object);
  (void)_this;
}
void AngularVelocityFrd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AngularVelocityFrd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AngularVelocityFrd::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.AngularVelocityFrd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&forward_rad_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_rad_s_) -
      reinterpret_cast<char*>(&forward_rad_s_)) + sizeof(down_rad_s_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AngularVelocityFrd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float forward_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          forward_rad_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float right_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          right_rad_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float down_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          down_rad_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AngularVelocityFrd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.AngularVelocityFrd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float forward_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->forward_rad_s() <= 0 && this->forward_rad_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_forward_rad_s(), target);
  }

  // float right_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->right_rad_s() <= 0 && this->right_rad_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_right_rad_s(), target);
  }

  // float down_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->down_rad_s() <= 0 && this->down_rad_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_down_rad_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.AngularVelocityFrd)
  return target;
}

size_t AngularVelocityFrd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.AngularVelocityFrd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float forward_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->forward_rad_s() <= 0 && this->forward_rad_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float right_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->right_rad_s() <= 0 && this->right_rad_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float down_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->down_rad_s() <= 0 && this->down_rad_s() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AngularVelocityFrd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.AngularVelocityFrd)
  GOOGLE_DCHECK_NE(&from, this);
  const AngularVelocityFrd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AngularVelocityFrd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.AngularVelocityFrd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.AngularVelocityFrd)
    MergeFrom(*source);
  }
}

void AngularVelocityFrd::MergeFrom(const AngularVelocityFrd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.AngularVelocityFrd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.forward_rad_s() <= 0 && from.forward_rad_s() >= 0)) {
    _internal_set_forward_rad_s(from._internal_forward_rad_s());
  }
  if (!(from.right_rad_s() <= 0 && from.right_rad_s() >= 0)) {
    _internal_set_right_rad_s(from._internal_right_rad_s());
  }
  if (!(from.down_rad_s() <= 0 && from.down_rad_s() >= 0)) {
    _internal_set_down_rad_s(from._internal_down_rad_s());
  }
}

void AngularVelocityFrd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.AngularVelocityFrd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AngularVelocityFrd::CopyFrom(const AngularVelocityFrd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.AngularVelocityFrd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AngularVelocityFrd::IsInitialized() const {
  return true;
}

void AngularVelocityFrd::InternalSwap(AngularVelocityFrd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AngularVelocityFrd, down_rad_s_)
      + sizeof(AngularVelocityFrd::down_rad_s_)
      - PROTOBUF_FIELD_OFFSET(AngularVelocityFrd, forward_rad_s_)>(
          reinterpret_cast<char*>(&forward_rad_s_),
          reinterpret_cast<char*>(&other->forward_rad_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AngularVelocityFrd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MagneticFieldFrd::_Internal {
 public:
};

MagneticFieldFrd::MagneticFieldFrd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.MagneticFieldFrd)
}
MagneticFieldFrd::MagneticFieldFrd(const MagneticFieldFrd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&forward_gauss_, &from.forward_gauss_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_gauss_) -
    reinterpret_cast<char*>(&forward_gauss_)) + sizeof(down_gauss_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.MagneticFieldFrd)
}

void MagneticFieldFrd::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&forward_gauss_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&down_gauss_) -
    reinterpret_cast<char*>(&forward_gauss_)) + sizeof(down_gauss_));
}

MagneticFieldFrd::~MagneticFieldFrd() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.MagneticFieldFrd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MagneticFieldFrd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MagneticFieldFrd::ArenaDtor(void* object) {
  MagneticFieldFrd* _this = reinterpret_cast< MagneticFieldFrd* >(object);
  (void)_this;
}
void MagneticFieldFrd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MagneticFieldFrd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MagneticFieldFrd::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.MagneticFieldFrd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&forward_gauss_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_gauss_) -
      reinterpret_cast<char*>(&forward_gauss_)) + sizeof(down_gauss_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MagneticFieldFrd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float forward_gauss = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          forward_gauss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float right_gauss = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          right_gauss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float down_gauss = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          down_gauss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MagneticFieldFrd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.MagneticFieldFrd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float forward_gauss = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->forward_gauss() <= 0 && this->forward_gauss() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_forward_gauss(), target);
  }

  // float right_gauss = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->right_gauss() <= 0 && this->right_gauss() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_right_gauss(), target);
  }

  // float down_gauss = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->down_gauss() <= 0 && this->down_gauss() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_down_gauss(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.MagneticFieldFrd)
  return target;
}

size_t MagneticFieldFrd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.MagneticFieldFrd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float forward_gauss = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->forward_gauss() <= 0 && this->forward_gauss() >= 0)) {
    total_size += 1 + 4;
  }

  // float right_gauss = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->right_gauss() <= 0 && this->right_gauss() >= 0)) {
    total_size += 1 + 4;
  }

  // float down_gauss = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->down_gauss() <= 0 && this->down_gauss() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MagneticFieldFrd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.MagneticFieldFrd)
  GOOGLE_DCHECK_NE(&from, this);
  const MagneticFieldFrd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MagneticFieldFrd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.MagneticFieldFrd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.MagneticFieldFrd)
    MergeFrom(*source);
  }
}

void MagneticFieldFrd::MergeFrom(const MagneticFieldFrd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.MagneticFieldFrd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.forward_gauss() <= 0 && from.forward_gauss() >= 0)) {
    _internal_set_forward_gauss(from._internal_forward_gauss());
  }
  if (!(from.right_gauss() <= 0 && from.right_gauss() >= 0)) {
    _internal_set_right_gauss(from._internal_right_gauss());
  }
  if (!(from.down_gauss() <= 0 && from.down_gauss() >= 0)) {
    _internal_set_down_gauss(from._internal_down_gauss());
  }
}

void MagneticFieldFrd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.MagneticFieldFrd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MagneticFieldFrd::CopyFrom(const MagneticFieldFrd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.MagneticFieldFrd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MagneticFieldFrd::IsInitialized() const {
  return true;
}

void MagneticFieldFrd::InternalSwap(MagneticFieldFrd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MagneticFieldFrd, down_gauss_)
      + sizeof(MagneticFieldFrd::down_gauss_)
      - PROTOBUF_FIELD_OFFSET(MagneticFieldFrd, forward_gauss_)>(
          reinterpret_cast<char*>(&forward_gauss_),
          reinterpret_cast<char*>(&other->forward_gauss_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MagneticFieldFrd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Imu::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::AccelerationFrd& acceleration_frd(const Imu* msg);
  static const ::mavsdk::rpc::telemetry::AngularVelocityFrd& angular_velocity_frd(const Imu* msg);
  static const ::mavsdk::rpc::telemetry::MagneticFieldFrd& magnetic_field_frd(const Imu* msg);
};

const ::mavsdk::rpc::telemetry::AccelerationFrd&
Imu::_Internal::acceleration_frd(const Imu* msg) {
  return *msg->acceleration_frd_;
}
const ::mavsdk::rpc::telemetry::AngularVelocityFrd&
Imu::_Internal::angular_velocity_frd(const Imu* msg) {
  return *msg->angular_velocity_frd_;
}
const ::mavsdk::rpc::telemetry::MagneticFieldFrd&
Imu::_Internal::magnetic_field_frd(const Imu* msg) {
  return *msg->magnetic_field_frd_;
}
Imu::Imu(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.Imu)
}
Imu::Imu(const Imu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_acceleration_frd()) {
    acceleration_frd_ = new ::mavsdk::rpc::telemetry::AccelerationFrd(*from.acceleration_frd_);
  } else {
    acceleration_frd_ = nullptr;
  }
  if (from._internal_has_angular_velocity_frd()) {
    angular_velocity_frd_ = new ::mavsdk::rpc::telemetry::AngularVelocityFrd(*from.angular_velocity_frd_);
  } else {
    angular_velocity_frd_ = nullptr;
  }
  if (from._internal_has_magnetic_field_frd()) {
    magnetic_field_frd_ = new ::mavsdk::rpc::telemetry::MagneticFieldFrd(*from.magnetic_field_frd_);
  } else {
    magnetic_field_frd_ = nullptr;
  }
  ::memcpy(&timestamp_us_, &from.timestamp_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&temperature_degc_) -
    reinterpret_cast<char*>(&timestamp_us_)) + sizeof(temperature_degc_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.Imu)
}

void Imu::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&acceleration_frd_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&temperature_degc_) -
    reinterpret_cast<char*>(&acceleration_frd_)) + sizeof(temperature_degc_));
}

Imu::~Imu() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.Imu)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Imu::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete acceleration_frd_;
  if (this != internal_default_instance()) delete angular_velocity_frd_;
  if (this != internal_default_instance()) delete magnetic_field_frd_;
}

void Imu::ArenaDtor(void* object) {
  Imu* _this = reinterpret_cast< Imu* >(object);
  (void)_this;
}
void Imu::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Imu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Imu::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.Imu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && acceleration_frd_ != nullptr) {
    delete acceleration_frd_;
  }
  acceleration_frd_ = nullptr;
  if (GetArena() == nullptr && angular_velocity_frd_ != nullptr) {
    delete angular_velocity_frd_;
  }
  angular_velocity_frd_ = nullptr;
  if (GetArena() == nullptr && magnetic_field_frd_ != nullptr) {
    delete magnetic_field_frd_;
  }
  magnetic_field_frd_ = nullptr;
  ::memset(&timestamp_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temperature_degc_) -
      reinterpret_cast<char*>(&timestamp_us_)) + sizeof(temperature_degc_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Imu::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.AccelerationFrd acceleration_frd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration_frd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry.AngularVelocityFrd angular_velocity_frd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity_frd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry.MagneticFieldFrd magnetic_field_frd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_magnetic_field_frd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float temperature_degc = 4 [(.mavsdk.options.default_value) = "NaN"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          temperature_degc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp_us = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          timestamp_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Imu::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.Imu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.AccelerationFrd acceleration_frd = 1;
  if (this->has_acceleration_frd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::acceleration_frd(this), target, stream);
  }

  // .mavsdk.rpc.telemetry.AngularVelocityFrd angular_velocity_frd = 2;
  if (this->has_angular_velocity_frd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::angular_velocity_frd(this), target, stream);
  }

  // .mavsdk.rpc.telemetry.MagneticFieldFrd magnetic_field_frd = 3;
  if (this->has_magnetic_field_frd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::magnetic_field_frd(this), target, stream);
  }

  // float temperature_degc = 4 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->temperature_degc() <= 0 && this->temperature_degc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_temperature_degc(), target);
  }

  // uint64 timestamp_us = 5;
  if (this->timestamp_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timestamp_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.Imu)
  return target;
}

size_t Imu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.Imu)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.AccelerationFrd acceleration_frd = 1;
  if (this->has_acceleration_frd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acceleration_frd_);
  }

  // .mavsdk.rpc.telemetry.AngularVelocityFrd angular_velocity_frd = 2;
  if (this->has_angular_velocity_frd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_velocity_frd_);
  }

  // .mavsdk.rpc.telemetry.MagneticFieldFrd magnetic_field_frd = 3;
  if (this->has_magnetic_field_frd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *magnetic_field_frd_);
  }

  // uint64 timestamp_us = 5;
  if (this->timestamp_us() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp_us());
  }

  // float temperature_degc = 4 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->temperature_degc() <= 0 && this->temperature_degc() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Imu::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.Imu)
  GOOGLE_DCHECK_NE(&from, this);
  const Imu* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Imu>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.Imu)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.Imu)
    MergeFrom(*source);
  }
}

void Imu::MergeFrom(const Imu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.Imu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_acceleration_frd()) {
    _internal_mutable_acceleration_frd()->::mavsdk::rpc::telemetry::AccelerationFrd::MergeFrom(from._internal_acceleration_frd());
  }
  if (from.has_angular_velocity_frd()) {
    _internal_mutable_angular_velocity_frd()->::mavsdk::rpc::telemetry::AngularVelocityFrd::MergeFrom(from._internal_angular_velocity_frd());
  }
  if (from.has_magnetic_field_frd()) {
    _internal_mutable_magnetic_field_frd()->::mavsdk::rpc::telemetry::MagneticFieldFrd::MergeFrom(from._internal_magnetic_field_frd());
  }
  if (from.timestamp_us() != 0) {
    _internal_set_timestamp_us(from._internal_timestamp_us());
  }
  if (!(from.temperature_degc() <= 0 && from.temperature_degc() >= 0)) {
    _internal_set_temperature_degc(from._internal_temperature_degc());
  }
}

void Imu::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.Imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Imu::CopyFrom(const Imu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.Imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Imu::IsInitialized() const {
  return true;
}

void Imu::InternalSwap(Imu* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Imu, temperature_degc_)
      + sizeof(Imu::temperature_degc_)
      - PROTOBUF_FIELD_OFFSET(Imu, acceleration_frd_)>(
          reinterpret_cast<char*>(&acceleration_frd_),
          reinterpret_cast<char*>(&other->acceleration_frd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Imu::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GpsGlobalOrigin::_Internal {
 public:
};

GpsGlobalOrigin::GpsGlobalOrigin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.GpsGlobalOrigin)
}
GpsGlobalOrigin::GpsGlobalOrigin(const GpsGlobalOrigin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_deg_, &from.latitude_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&altitude_m_) -
    reinterpret_cast<char*>(&latitude_deg_)) + sizeof(altitude_m_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.GpsGlobalOrigin)
}

void GpsGlobalOrigin::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&latitude_deg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&altitude_m_) -
    reinterpret_cast<char*>(&latitude_deg_)) + sizeof(altitude_m_));
}

GpsGlobalOrigin::~GpsGlobalOrigin() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.GpsGlobalOrigin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GpsGlobalOrigin::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GpsGlobalOrigin::ArenaDtor(void* object) {
  GpsGlobalOrigin* _this = reinterpret_cast< GpsGlobalOrigin* >(object);
  (void)_this;
}
void GpsGlobalOrigin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GpsGlobalOrigin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GpsGlobalOrigin::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.GpsGlobalOrigin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_m_) -
      reinterpret_cast<char*>(&latitude_deg_)) + sizeof(altitude_m_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpsGlobalOrigin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          latitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          longitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          altitude_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GpsGlobalOrigin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.GpsGlobalOrigin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->latitude_deg() <= 0 && this->latitude_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude_deg(), target);
  }

  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->longitude_deg() <= 0 && this->longitude_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude_deg(), target);
  }

  // float altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->altitude_m() <= 0 && this->altitude_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_altitude_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.GpsGlobalOrigin)
  return target;
}

size_t GpsGlobalOrigin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.GpsGlobalOrigin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->latitude_deg() <= 0 && this->latitude_deg() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->longitude_deg() <= 0 && this->longitude_deg() >= 0)) {
    total_size += 1 + 8;
  }

  // float altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->altitude_m() <= 0 && this->altitude_m() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpsGlobalOrigin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.GpsGlobalOrigin)
  GOOGLE_DCHECK_NE(&from, this);
  const GpsGlobalOrigin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GpsGlobalOrigin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.GpsGlobalOrigin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.GpsGlobalOrigin)
    MergeFrom(*source);
  }
}

void GpsGlobalOrigin::MergeFrom(const GpsGlobalOrigin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.GpsGlobalOrigin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.latitude_deg() <= 0 && from.latitude_deg() >= 0)) {
    _internal_set_latitude_deg(from._internal_latitude_deg());
  }
  if (!(from.longitude_deg() <= 0 && from.longitude_deg() >= 0)) {
    _internal_set_longitude_deg(from._internal_longitude_deg());
  }
  if (!(from.altitude_m() <= 0 && from.altitude_m() >= 0)) {
    _internal_set_altitude_m(from._internal_altitude_m());
  }
}

void GpsGlobalOrigin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.GpsGlobalOrigin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpsGlobalOrigin::CopyFrom(const GpsGlobalOrigin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.GpsGlobalOrigin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpsGlobalOrigin::IsInitialized() const {
  return true;
}

void GpsGlobalOrigin::InternalSwap(GpsGlobalOrigin* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpsGlobalOrigin, altitude_m_)
      + sizeof(GpsGlobalOrigin::altitude_m_)
      - PROTOBUF_FIELD_OFFSET(GpsGlobalOrigin, latitude_deg_)>(
          reinterpret_cast<char*>(&latitude_deg_),
          reinterpret_cast<char*>(&other->latitude_deg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GpsGlobalOrigin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TelemetryResult::_Internal {
 public:
};

TelemetryResult::TelemetryResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry.TelemetryResult)
}
TelemetryResult::TelemetryResult(const TelemetryResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result_str().empty()) {
    result_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result_str(), 
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.TelemetryResult)
}

void TelemetryResult::SharedCtor() {
result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_ = 0;
}

TelemetryResult::~TelemetryResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.TelemetryResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TelemetryResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  result_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TelemetryResult::ArenaDtor(void* object) {
  TelemetryResult* _this = reinterpret_cast< TelemetryResult* >(object);
  (void)_this;
}
void TelemetryResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TelemetryResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TelemetryResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.TelemetryResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_str_.ClearToEmpty();
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TelemetryResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::mavsdk::rpc::telemetry::TelemetryResult_Result>(val));
        } else goto handle_unusual;
        continue;
      // string result_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_result_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mavsdk.rpc.telemetry.TelemetryResult.result_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TelemetryResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.TelemetryResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult.Result result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_str().data(), static_cast<int>(this->_internal_result_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.telemetry.TelemetryResult.result_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.TelemetryResult)
  return target;
}

size_t TelemetryResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.TelemetryResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_str());
  }

  // .mavsdk.rpc.telemetry.TelemetryResult.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TelemetryResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.TelemetryResult)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetryResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TelemetryResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.TelemetryResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.TelemetryResult)
    MergeFrom(*source);
  }
}

void TelemetryResult::MergeFrom(const TelemetryResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.TelemetryResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result_str().size() > 0) {
    _internal_set_result_str(from._internal_result_str());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void TelemetryResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.TelemetryResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetryResult::CopyFrom(const TelemetryResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.TelemetryResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryResult::IsInitialized() const {
  return true;
}

void TelemetryResult::InternalSwap(TelemetryResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  result_str_.Swap(&other->result_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TelemetryResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace telemetry
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribePositionRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribePositionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribePositionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::PositionResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::PositionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::PositionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeHomeRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeHomeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribeHomeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::HomeResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::HomeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::HomeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeInAirRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeInAirRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribeInAirRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::InAirResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::InAirResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::InAirResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeLandedStateRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeLandedStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribeLandedStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::LandedStateResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::LandedStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::LandedStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeArmedRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeArmedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribeArmedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::ArmedResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::ArmedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::ArmedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeAttitudeQuaternionRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeAttitudeQuaternionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribeAttitudeQuaternionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::AttitudeQuaternionResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::AttitudeQuaternionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::AttitudeQuaternionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeAttitudeEulerRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeAttitudeEulerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribeAttitudeEulerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::AttitudeEulerResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::AttitudeEulerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::AttitudeEulerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeAttitudeAngularVelocityBodyRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeAttitudeAngularVelocityBodyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribeAttitudeAngularVelocityBodyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::AttitudeAngularVelocityBodyResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::AttitudeAngularVelocityBodyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::AttitudeAngularVelocityBodyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeCameraAttitudeQuaternionRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeCameraAttitudeQuaternionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribeCameraAttitudeQuaternionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::CameraAttitudeQuaternionResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::CameraAttitudeQuaternionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::CameraAttitudeQuaternionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeCameraAttitudeEulerRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeCameraAttitudeEulerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribeCameraAttitudeEulerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::CameraAttitudeEulerResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::CameraAttitudeEulerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::CameraAttitudeEulerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeVelocityNedRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeVelocityNedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribeVelocityNedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::VelocityNedResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::VelocityNedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::VelocityNedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeGpsInfoRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeGpsInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribeGpsInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::GpsInfoResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::GpsInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::GpsInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeRawGpsRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeRawGpsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribeRawGpsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::RawGpsResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::RawGpsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::RawGpsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeBatteryRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeBatteryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribeBatteryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::BatteryResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::BatteryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::BatteryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeFlightModeRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeFlightModeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribeFlightModeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::FlightModeResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::FlightModeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::FlightModeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeHealthRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeHealthRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribeHealthRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::HealthResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::HealthResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::HealthResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeRcStatusRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeRcStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribeRcStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::RcStatusResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::RcStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::RcStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeStatusTextRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeStatusTextRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribeStatusTextRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::StatusTextResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::StatusTextResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::StatusTextResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeActuatorControlTargetRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeActuatorControlTargetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribeActuatorControlTargetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::ActuatorControlTargetResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::ActuatorControlTargetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::ActuatorControlTargetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeActuatorOutputStatusRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeActuatorOutputStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribeActuatorOutputStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::ActuatorOutputStatusResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::ActuatorOutputStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::ActuatorOutputStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeOdometryRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeOdometryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribeOdometryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::OdometryResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::OdometryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::OdometryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribePositionVelocityNedRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribePositionVelocityNedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribePositionVelocityNedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::PositionVelocityNedResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::PositionVelocityNedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::PositionVelocityNedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeGroundTruthRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeGroundTruthRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribeGroundTruthRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::GroundTruthResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::GroundTruthResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::GroundTruthResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeFixedwingMetricsRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeFixedwingMetricsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribeFixedwingMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::FixedwingMetricsResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::FixedwingMetricsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::FixedwingMetricsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeImuRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeImuRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribeImuRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::ImuResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::ImuResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::ImuResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeScaledImuRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeScaledImuRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribeScaledImuRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::ScaledImuResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::ScaledImuResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::ScaledImuResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeRawImuRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeRawImuRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribeRawImuRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::RawImuResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::RawImuResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::RawImuResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeHealthAllOkRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeHealthAllOkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribeHealthAllOkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::HealthAllOkResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::HealthAllOkResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::HealthAllOkResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeUnixEpochTimeRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeUnixEpochTimeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribeUnixEpochTimeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::UnixEpochTimeResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::UnixEpochTimeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::UnixEpochTimeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeDistanceSensorRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeDistanceSensorRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribeDistanceSensorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::DistanceSensorResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::DistanceSensorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::DistanceSensorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeScaledPressureRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeScaledPressureRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SubscribeScaledPressureRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::ScaledPressureResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::ScaledPressureResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::ScaledPressureResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRatePositionRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRatePositionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRatePositionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRatePositionResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRatePositionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRatePositionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateHomeRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateHomeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateHomeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateHomeResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateHomeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateHomeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateInAirRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateInAirRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateInAirRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateInAirResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateInAirResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateInAirResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateLandedStateRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateLandedStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateLandedStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateLandedStateResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateLandedStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateLandedStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateAttitudeRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateAttitudeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateAttitudeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateAttitudeResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateAttitudeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateAttitudeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateCameraAttitudeRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateCameraAttitudeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateCameraAttitudeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateCameraAttitudeResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateCameraAttitudeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateCameraAttitudeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateVelocityNedRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateVelocityNedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateVelocityNedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateVelocityNedResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateVelocityNedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateVelocityNedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateGpsInfoRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateGpsInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateGpsInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateGpsInfoResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateGpsInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateGpsInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateRawGpsRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateRawGpsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateRawGpsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateBatteryRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateBatteryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateBatteryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateBatteryResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateBatteryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateBatteryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateRcStatusRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateRcStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateRcStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateRcStatusResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateRcStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateRcStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateActuatorControlTargetRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateActuatorControlTargetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateActuatorControlTargetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateActuatorControlTargetResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateActuatorControlTargetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateActuatorControlTargetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateOdometryRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateOdometryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateOdometryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateOdometryResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateOdometryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateOdometryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRatePositionVelocityNedRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRatePositionVelocityNedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRatePositionVelocityNedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRatePositionVelocityNedResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRatePositionVelocityNedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRatePositionVelocityNedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateGroundTruthRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateGroundTruthRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateGroundTruthRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateGroundTruthResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateGroundTruthResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateGroundTruthResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateFixedwingMetricsRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateFixedwingMetricsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateFixedwingMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateFixedwingMetricsResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateFixedwingMetricsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateFixedwingMetricsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateImuRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateImuRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateImuRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateImuResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateImuResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateImuResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateScaledImuRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateScaledImuRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateScaledImuRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateScaledImuResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateScaledImuResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateScaledImuResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateRawImuRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateRawImuRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateRawImuRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateRawImuResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateRawImuResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateRawImuResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateUnixEpochTimeRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateUnixEpochTimeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateUnixEpochTimeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateUnixEpochTimeResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateUnixEpochTimeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateUnixEpochTimeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateDistanceSensorRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateDistanceSensorRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateDistanceSensorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateDistanceSensorResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateDistanceSensorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::SetRateDistanceSensorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::GetGpsGlobalOriginRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::GetGpsGlobalOriginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::GetGpsGlobalOriginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::GetGpsGlobalOriginResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::GetGpsGlobalOriginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::GetGpsGlobalOriginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::Position* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::Quaternion* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::Quaternion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::Quaternion >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::EulerAngle* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::EulerAngle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::EulerAngle >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::AngularVelocityBody* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::AngularVelocityBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::AngularVelocityBody >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::GpsInfo* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::GpsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::GpsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::RawGps* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::RawGps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::RawGps >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::Battery* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::Battery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::Battery >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::Health* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::Health >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::Health >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::RcStatus* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::RcStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::RcStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::StatusText* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::StatusText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::StatusText >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::ActuatorControlTarget* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::ActuatorControlTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::ActuatorControlTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::ActuatorOutputStatus* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::ActuatorOutputStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::ActuatorOutputStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::Covariance* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::Covariance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::Covariance >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::VelocityBody* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::VelocityBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::VelocityBody >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::PositionBody* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::PositionBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::PositionBody >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::Odometry* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::Odometry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::Odometry >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::DistanceSensor* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::DistanceSensor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::DistanceSensor >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::ScaledPressure* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::ScaledPressure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::ScaledPressure >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::PositionNed* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::PositionNed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::PositionNed >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::VelocityNed* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::VelocityNed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::VelocityNed >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::PositionVelocityNed* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::PositionVelocityNed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::PositionVelocityNed >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::GroundTruth* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::GroundTruth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::GroundTruth >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::FixedwingMetrics* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::FixedwingMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::FixedwingMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::AccelerationFrd* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::AccelerationFrd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::AccelerationFrd >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::AngularVelocityFrd* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::AngularVelocityFrd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::AngularVelocityFrd >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::MagneticFieldFrd* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::MagneticFieldFrd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::MagneticFieldFrd >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::Imu* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::Imu >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::Imu >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::GpsGlobalOrigin* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::GpsGlobalOrigin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::GpsGlobalOrigin >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::TelemetryResult* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::TelemetryResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::telemetry::TelemetryResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
